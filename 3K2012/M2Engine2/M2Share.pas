unit M2Share;

interface
uses                                                                                  
  Windows, Messages, Classes, SysUtils, StdCtrls, Graphics, RunSock, Envir, ItmUnit,
  Magic, Guild, Event, Castle, FrnEngn, UsrEngn, Mudutil, Grobal2, ObjRobot, ObjNpc,
  IniFiles, SDK, PlugIn, WinSock, EDcodeUnit, StrUtils, PathFind, Division;

const
  TESTMODE = 0; //调试模式 0-正常模式 1-调试模式(不通过系统插件即可连接网关) 20080723
  BuildDay = '1218';
  {$IF M2Version = 1}
  UserMode1 = 2;//用户模式 0-免费 1-限制使用天数 2-绑定IP(WL壳) 20080701 与系统插件相对应
  g_sVersion = '5IJ:I4N:MJHHO5==>J?88JO;IMHJ9HJ5O9O?O5?;8H5>?58I';////////////2.00 Build 20121015
  g_sExceptionVer ='A' + BuildDay;//异常提示显示版本号(对应M2的编译日期，方便查询是哪个版本的异常)
  {$ELSEIF M2Version = 2}
  UserMode1 = 1;//用户模式 0-免费 1-限制使用天数 2-绑定IP(WL壳) 20080701 与系统插件相对应
  g_sVersion = '5IJ:I4N:MJHHO5==>J?88JO;IMHJ9HJ5O9O?O5?;8H5>?58I';/////////2.00 Build 20121015
  g_sExceptionVer ='B' + BuildDay;//异常提示显示版本号(对应M2的编译日期，方便查询是哪个版本的异常)
  {$ELSE}
  UserMode1 = 1;//0627是限制使用天数
  g_sVersion = 'I=8M=IO;;OHIJ>4M?IM=MNM?5;::IN?=?M;:=4=J4<N:IJ>4M9NNO=<<?4585;JO';///////Build 20121015(免费)
  g_sExceptionVer ='C' + BuildDay;//异常提示显示版本号(对应M2的编译日期，方便查询是哪个版本的异常)
  {$IFEND}
  g_sUpDateTime = 'M=5HM<I5MH4M;OJ;OJ?MNN;HNO:4JN8H';///////2012/10/11
  {$IF HEROVERSION = 1}
  g_sProductName = 'O>594JJH:O=IMHNN<<<<J4N:<HO??H<5858>J8JJ8HJMIN<I5NM:8:;4H8M9H>=<9O;O?8I?=N=<IO8I'; //3K科技反外挂防攻击数据引擎(英雄版)
  {$ELSE}
  g_sProductName = '=<O<:N;>M=J<OOIM<<<<J4N:<HO??H<5858>J8JJ8HJMIN<I5NM:8:;4H8M9H>=<9O;O?8I?=N=<IO8I'; //3K科技反外挂防攻击数据引擎(企业版)
  {$IFEND}
  g_sProgram = 'NJ?>5N=?ONI5<=<O:<=N8O=I44<==:><'; //3K科技
  g_sWebSite = '5>M9=MHM:>M<;?4MO9HN4:H:I;I5OHI=8<9;8N9M54=MN=;9?=44<:>H=888::H;'; //http://www.3KM2.com(官网站)
  g_sBbsSite = ':=?::<=I88?=N?>O:<NJNJ4><;HN59JM8<9;8N9M54=MN=;9?=44<:>H=888::H;'; //http://www.3KM2.net(程序站)
  g_sProductInfo = ':;?<>?<94?854N=59OJ8N?N<I4?HIONMH=><4?;:MJ;=<=>>8N=5:M4>O5NIH=>:'; //欢迎使用3K科技系列软件:
 // g_sSellInfo1 = 'N?M::>5NHH:>IHH>8>I9I4?9=4HH;4O;8O5H5?O5>>N<;HI=';//联系(QQ):228589790

  Version = 927746880;//对应脚本插件中的QQ号

  sSoftVersion_HERO   = '=N9OO9OH;N8J;><JM:>=J=?8;=9=OH5M'; //英雄版
  sSoftVersion_VERENT = '<45HM4I=HH?>;44J=?8J=JN:5=I?>4=4'; //1.76免费版

  BDE = 0;
  ADO = 1;
  DBTYPE = BDE; //数据库连接方式，默认为BDE  ADO-SQL数据库

  //内部广告代码
  //sBUYHINTINFO1 = ':5OOHH:<MJ8<>9MI=;I;N?5>N4;<M994N;IJ5H<5?8MM?O58'; //专业一条龙制作商%s
  //sBUYHINTINFO2 = '<M>5J:N<M:54H<:5>H8N?9IN>5HMJJ9MMN95=N45?>IO:<8NI;>MIM5O<?:J:>HJJN5JO=9>=I88I559'; //做连接即可得全天精品套白总固,%s

  nVersionType = 0;
  SOCKETTYPE = 0;

  sSTATUS_FAIL = '+FAIL/';
  sSTATUS_GOOD = '+GOOD/';

  MAXLEVEL = High(Word);
  MAXCHANGELEVEL = 1000;

  LOG_GAMEGOLD = 111;//游戏币(日志代码)
  LOG_GAMEPOINT = 112;//游戏点(日志代码)
  LOG_GameDiaMond =113;//金刚石(日志代码)20071226
  LOG_GameGird =114;//灵符(日志代码)20071226
  LOG_GameGlory = 116; //荣誉(日志代码)20080511

  ET_STONEMINE = 11;//矿石
  sENCYPTSCRIPTFLAG = ';+++++++----------'; //脚本解密标识
  tM2Server = 3;

  sSTRING_GOLDNAME = '金币';

  MAXITEMORDERSCOUNT = 100;//物品排行榜保存数量
  
//技能ID常量
  SKILL_FIREBALL = 1;//火球术
  SKILL_HEALLING = 2;//治愈术
  SKILL_ONESWORD = 3;//基本剑术
  SKILL_ILKWANG = 4;//精神力战法
  SKILL_FIREBALL2 = 5;//大火球
  SKILL_AMYOUNSUL = 6;//施毒术
  SKILL_YEDO = 7;//攻杀
  SKILL_FIREWIND = 8;//抗拒火环
  SKILL_FIRE = 9;//地狱火
  SKILL_SHOOTLIGHTEN = 10;//疾光电影
  SKILL_LIGHTENING = 11;//雷电术
  SKILL_ERGUM = 12;//刺杀剑术
  SKILL_FIRECHARM = 13;//灵魂火符
  SKILL_HANGMAJINBUB = 14;//幽灵盾
  SKILL_DEJIWONHO = 15;//神圣战甲术
  SKILL_HOLYSHIELD = 16;//困魔咒
  SKILL_SKELLETON = 17;//召唤骷髅
  SKILL_CLOAK = 18;//隐身术
  SKILL_BIGCLOAK = 19;//集体隐身术
  SKILL_TAMMING = 20;//诱惑之光
  SKILL_SPACEMOVE = 21;//瞬息移动
  SKILL_EARTHFIRE = 22;//火墙
  SKILL_FIREBOOM = 23;//爆裂火焰
  SKILL_LIGHTFLOWER = 24;//地狱雷光
  SKILL_BANWOL = 25;//半月弯刀
  SKILL_FIRESWORD = 26;//烈火剑法
  SKILL_MOOTEBO = 27;//野蛮冲撞  
  SKILL_SHOWHP = 28;//心灵启示
  SKILL_BIGHEALLING = 29;//群体治疗术
  SKILL_SINSU = 30;//召唤神兽
  SKILL_SHIELD = 31; //魔法盾
  SKILL_KILLUNDEAD = 32;//圣言术
  SKILL_SNOWWIND = 33;//冰咆哮
  SKILL_UNAMYOUNSUL = 34;//解毒术
  SKILL_WINDTEBO = 35;//狮吼功
  SKILL_MABE = 36;//火焰冰
  SKILL_GROUPLIGHTENING = 37;//群体雷电术
  SKILL_GROUPAMYOUNSUL = 38;//群体施毒术
  SKILL_GROUPDEDING = 39;//地钉
  SKILL_40 = 40;//抱月刀法 
  SKILL_41 = 41; //狮子吼
  SKILL_43 = 42;//开天斩
  SKILL_42 = 43;//龙影剑法
  SKILL_44 = 44;//寒冰掌
  SKILL_45 = 45;//灭天火
  SKILL_46 = 46;//分身术
  SKILL_47 = 47;//火龙焰
  SKILL_48 = 48;//气功波
  SKILL_49 = 49;//净化术
  SKILL_50 = 50;//无极真气
  SKILL_51 = 51;//飓风破
  SKILL_52 = 52;//诅咒术
  SKILL_53 = 53;//血咒
  SKILL_54 = 54;//骷髅咒
  SKILL_55 = 55;//擒龙手
  SKILL_56 = 56;//移行换位
  SKILL_57 = 57;//复活术
  SKILL_58 = 58;//流星火雨
  SKILL_59 = 59;//噬血术

  SKILL_60 = 60;//破魂斩
  SKILL_61 = 61;//劈星斩
  SKILL_62 = 62;//雷霆一击
  SKILL_63 = 63;//噬魂沼泽
  SKILL_64 = 64;//末日审判
  SKILL_65 = 65;//火龙气焰

  SKILL_66 = 66;//4级魔法盾
  SKILL_67 = 67;//先天元力
  SKILL_68 = 68;//酒气护体
  SKILL_69 = 69;//倚天辟地
  SKILL_70 = 70;//流星 
  SKILL_71 = 71;//召唤圣兽
  SKILL_72 = 72;//召唤月灵
  SKILL_73 = 73;//道力盾
  SKILL_74 = 74;//逐日剑法
  SKILL_75 = 75;//护体神盾
//------------连击技能-------------------
  SKILL_76 = 76;//三绝杀
  SKILL_77 = 77;//双龙破
  SKILL_78 = 78;//虎啸诀
  SKILL_79 = 79;//追心刺
  SKILL_80 = 80;//凤舞祭
  SKILL_81 = 81;//八卦掌
  SKILL_82 = 82;//断岳斩
  SKILL_83 = 83;//惊雷爆
  SKILL_84 = 84;//三焰咒
  SKILL_85 = 85;//横扫千军
  SKILL_86 = 86;//冰天雪地
  SKILL_87 = 87;//万剑归宗
  SKILL_88 = 88;//四级基本剑术
  SKILL_89 = 89;//四级刺杀剑术
  SKILL_90 = 90;//圆月弯刀(四级半月弯刀)
  SKILL_91 = 91;//四级雷电术
  SKILL_92 = 92;//四级流星火雨
  SKILL_93 = 93;//四级施毒术
  SKILL_94 = 94;//四级噬血术
  SKILL_95 = 95;//斗转星移
  SKILL_96 = 96;//血魄一击(战)
  SKILL_97 = 97;//血魄一击(法)
  SKILL_98 = 98;//血魄一击(道)
  SKILL_99 = 99;//强身术
  SKILL_100 = 100;//神秘解读
  SKILL_101 = 101;//神龙附体
  SKILL_102 = 102;//唯我独尊
  SKILL_103 = 103;//召唤巨魔
  SKILL_104 = 104;//召唤火灵
  SKILL_105 = 105;//龙卫心法(999)
  SKILL_106 = 106;//传承心法(弟子)
  SKILL_107 = 107;//纵横剑术
  SKILL_108 = 108;//冰霜雪雨
  SKILL_109 = 109;//裂神符
  SKILL_110 = 110;//死亡之眼
  SKILL_111 = 111;//冰霜群雨
  SKILL_112 = 112;//十步一杀
  SKILL_113 = 113;//天雷乱舞
  SKILL_114 = 114;//怒噬回天
//-----------内功技能--------------
  SKILL_200 = 200;//怒之攻杀
  SKILL_201 = 201;//静之攻杀
  Skill_202 = 202;//怒之半月
  Skill_203 = 203;//静之半月
  Skill_204 = 204;//怒之烈火
  Skill_205 = 205;//静之烈火
  Skill_206 = 206;//怒之逐日
  Skill_207 = 207;//静之逐日
  Skill_208 = 208;//怒之火球
  Skill_209 = 209;//静之火球
  Skill_210 = 210;//怒之大火球
  Skill_211 = 211;//静之大火球
  Skill_212 = 212;//怒之火墙
  Skill_213 = 213;//静之火墙
  Skill_214 = 214;//怒之地狱火
  Skill_215 = 215;//静之地狱火
  Skill_216 = 216;//怒之疾光电影
  Skill_217 = 217;//静之疾光电影
  Skill_218 = 218;//怒之爆裂火焰
  Skill_219 = 219;//静之爆裂火焰
  Skill_220 = 220;//怒之冰咆哮
  Skill_221 = 221;//静之冰咆哮
  Skill_222 = 222;//怒之雷电
  Skill_223 = 223;//静之雷电
  Skill_224 = 224;//怒之地狱雷光
  Skill_225 = 225;//静之地狱雷光
  Skill_226 = 226;//怒之寒冰掌
  Skill_227 = 227;//静之寒冰掌
  Skill_228 = 228;//怒之灭天火
  Skill_229 = 229;//静之灭天火
  Skill_230 = 230;//怒之火符
  Skill_231 = 231;//静之火符
  Skill_232 = 232;//怒之噬血
  Skill_233 = 233;//静之噬血
  Skill_234 = 234;//怒之流星火雨
  Skill_235 = 235;//静之流星火雨
  Skill_236 = 236;//怒之内功剑法
  Skill_237 = 237;//静之内功剑法
  Skill_238 = 238;//静之开天斩
  Skill_239 = 239;//怒之施毒术
  Skill_240 = 240;//静之施毒术
  Skill_241 = 241;//怒之月灵
  Skill_242 = 242;//静之月灵

  SLAVEMAXLEVEL = 9;//宝宝最大等级
  DEBUG = 0; //调试模式 20090202
  CHECKNEWMSG = 0; //是否显示未处理的客户端消息

  NOEXCEPTION = 0; //不显异常
  TRYEXCEPTION = 1; //显示异常
  CATEXCEPTION = TRYEXCEPTION;

  DEMOCLIENT = 0; //是否演示客户端

  VERDEMO = 0;
  VERFREE = 1;
  VERSTD = 2;
  VEROEM = 3;
  VERPRO = 4;
  VERENT = 5;
  SoftVersion = VERPRO; //程序版本类型

  USELOCALCODE = 0; //使用本地代码
  USEREMOTECODE = 1;  //使用远程代码
  USECODE = USELOCALCODE;//USECode：使用的代码来自哪里
  
  RequestVersion = 5;  //请求版本号

  LF = 0;
  LD = 1;
  ZQ = 2;
  DUDU = 3;
  ZYL = 4;
  WL = 5;
  VEROWNER = LF{WL};//版本所有者  20080302  LF--管理员列表不能输入IP地址,WL--要输入IP地址才能增加记录

  OEM = 0;
  OEM775 = 1;
  OEMVER = OEM;


  OLDMONSTERMODE = 0; //旧怪物方式
  NEWMONSTERMODE = 1; //新怪物方式
  PROCESSMONSTMODE = NEWMONSTERMODE; //处理怪物模式

  THREADENGINE = 0; //DB数据库SOCKET连接使用线程
  TIMERENGINE = 1; //DB数据库SOCKET连接使用控件
  DBSOCKETMODE = TIMERENGINE;//DBServer.exe发送信息模式
  IDSOCKETMODE = TIMERENGINE;//Loginsrv.exe发送信息模式
  USERENGINEMODE = TIMERENGINE;//使用引擎方式

  //最高可升级等级
  MAXUPLEVEL = High(Word) {65535};
  MAXHUMPOWER = High(Word) {65535};

  BODYLUCKUNIT = 5.0E3;

  HAM_ALL = 0;    //[攻击模式: 全体攻击]
  HAM_PEACE = 1;  //[攻击模式: 和平攻击]
  HAM_DEAR = 2;   //[攻击模式: 夫妻攻击]
  HAM_MASTER = 3; //[攻击模式: 师徒攻击]
  HAM_GROUP = 4;  //[攻击模式: 编组攻击]
  HAM_GUILD = 5;  //[攻击模式: 行会攻击]
  HAM_PKATTACK = 6;//[攻击模式: 红名攻击]
  HAM_DIVISION = 7;//[攻击模式: 师门攻击]

  DEFHIT = 5;
  DEFSPEED = 15;
  WARR = 0;
  WIZARD = 1;
  TAOS = 2;
{$IF HEROVERSION = 1}
  SIZEOFTHUMAN = 7192;//英雄版 20110812  原来是 7184
{$ELSE}
  SIZEOFTHUMAN = {6940}7192;//企业版 20110812
{$IFEND}
  {注释无用 By TasNat at: 2012-04-24 10:51:32
  sCHECKOPEN = 'CHECKOPEN';//好像没用处 20080724
  nCHECKOPEN = 5;
  sCHECKUNIT = 'CHECKUNIT';//好像没用处 20080724
  nCHECKUNIT = 6;
  }
  //脚本命令
  sSET = 'SET';
  nSET = 1;
  sTAKE = 'TAKE';
  nTAKE = 2;
  sSC_GIVE = 'GIVE';//给物品
  nSC_GIVE = 3;
  sTAKEW = 'TAKEW';
  nTAKEW = 4;
  sCLOSE = 'CLOSE';
  nCLOSE = 5;
  sRESET = 'RESET';
  nRESET = 6;
  sSETOPEN = 'SETOPEN';//未使用的命令 20080725
  nSETOPEN = 7;
  sSETUNIT = 'SETUNIT';//未使用的命令 20080725
  nSETUNIT = 8;
  sRESETUNIT = 'RESETUNIT';//未使用的命令 20080725  
  nRESETUNIT = 9;
  sBREAK = 'BREAK';
  nBREAK = 10;
  sTIMERECALL = 'TIMERECALL';
  nTIMERECALL = 11;
  sSC_PARAM1 = 'PARAM1';
  nSC_PARAM1 = 12;
  sSC_PARAM2 = 'PARAM2';
  nSC_PARAM2 = 13;
  sSC_PARAM3 = 'PARAM3';
  nSC_PARAM3 = 14;
  sSC_PARAM4 = 'PARAM4';
  nSC_PARAM4 = 15;
  sSC_EXEACTION = 'EXEACTION';
  nSC_EXEACTION = 16;
  sCHECKNAMELIST = 'CHECKNAMELIST';
  nCHECKNAMELIST = 17;
  sSC_ISGUILDMASTER = 'ISGUILDMASTER';
  nSC_ISGUILDMASTER = 18;
  sMAPMOVE = 'MAPMOVE';
  nMAPMOVE = 19;
  sMAP = 'MAP';
  nMAP = 20;
  sTAKECHECKITEM = 'TAKECHECKITEM';
  nTAKECHECKITEM = 21;
  sMONGEN = 'MONGEN';
  nMONGEN = 22;
  sISTAKEITEM = 'ISTAKEITEM';
  nISTAKEITEM = 23;
  sMONCLEAR = 'MONCLEAR';
  nMONCLEAR = 24;
  sMOV = 'MOV';
  nMOV = 25;
  sINC = 'INC';
  nINC = 26;
  sDEC = 'DEC';
  nDEC = 27;
  sSUM = 'SUM';
  nSUM = 28;
  sBREAKTIMERECALL = 'BREAKTIMERECALL';
  nBREAKTIMERECALL = 29;
  sSENDMSG = 'SENDMSG';//发送文字信息
  nSENDMSG = 30;
  sSC_DELAPPRENTICE = 'DELAPPRENTICE';//删除徒弟 20090208
  nSC_DELAPPRENTICE = 31;
  sPKPOINT = 'PKPOINT';
  nPKPOINT = 32;
  sCHECKHUM = 'CHECKHUM';
  nCHECKHUM = 33;
  sSC_RECALLMOB = 'RECALLMOB';
  nSC_RECALLMOB = 34;
  sKICK = 'KICK';
  nKICK = 35;
  sLARGE = 'LARGE';
  nLARGE = 36;
  sSMALL = 'SMALL';
  nSMALL = 37;
  sCHECKPKPOINT = 'CHECKPKPOINT';
  nCHECKPKPOINT = 38;
  sCHECKLUCKYPOINT = 'CHECKLUCKYPOINT';
  nCHECKLUCKYPOINT = 39;
  sCHECKMONMAP = 'CHECKMONMAP';
  nCHECKMONMAP = 40;
  sCHECKBAGGAGE = 'CHECKBAGGAGE';
  nCHECKBAGGAGE = 41;
  sEQUAL = 'EQUAL';
  nEQUAL = 42;
  sCHECKDURA = 'CHECKDURA';
  nCHECKDURA = 43;
  sCHECKDURAEVA = 'CHECKDURAEVA';
  nCHECKDURAEVA = 44;
  sDAYOFWEEK = 'DAYOFWEEK';
  nDAYOFWEEK = 45;
  sHOUR = 'HOUR';
  nHOUR = 46;
  sMIN = 'MIN';
  nMIN = 47;
  sCHECK = 'CHECK';
  nCHECK = 48;
  sRANDOM = 'RANDOM';
  nRANDOM = 49;
  sMOVR = 'MOVR';
  nMOVR = 50;
  sEXCHANGEMAP = 'EXCHANGEMAP';
  nEXCHANGEMAP = 51;
  sRECALLMAP = 'RECALLMAP';
  nRECALLMAP = 52;
  sADDBATCH = 'ADDBATCH';
  nADDBATCH = 53;
  sBATCHDELAY = 'BATCHDELAY';
  nBATCHDELAY = 54;
  sBATCHMOVE = 'BATCHMOVE';
  nBATCHMOVE = 55;
  sPLAYDICE = 'PLAYDICE';//转骰子
  nPLAYDICE = 56;
  sADDNAMELIST = 'ADDNAMELIST';
  nADDNAMELIST = 57;
  sDELNAMELIST = 'DELNAMELIST';
  nDELNAMELIST = 58;
  sADDGUILDLIST = 'ADDGUILDLIST';
  nADDGUILDLIST = 59;
  sDELGUILDLIST = 'DELGUILDLIST';
  nDELGUILDLIST = 60;
  sADDACCOUNTLIST = 'ADDACCOUNTLIST';
  nADDACCOUNTLIST = 61;
  sDELACCOUNTLIST = 'DELACCOUNTLIST';
  nDELACCOUNTLIST = 62;
  sADDIPLIST = 'ADDIPLIST';
  nADDIPLIST = 63;
  sDELIPLIST = 'DELIPLIST';
  nDELIPLIST = 64;
  sSC_ISDEFENSEGUILD = 'ISDEFENSEGUILD'; //是否为守城方
  nSC_ISDEFENSEGUILD = 65;
  sSC_ISCASTLEGUILD = 'ISCASTLEGUILD';
  nSC_ISCASTLEGUILD = 66;
  sSC_ISATTACKGUILD = 'ISATTACKGUILD'; //是否为攻城方
  nSC_ISATTACKGUILD = 67;
  sSC_HASGUILD = 'HAVEGUILD'; //是否加入行会
  nSC_HASGUILD = 68;
  sSC_CHECKCASTLEDOOR = 'CHECKCASTLEDOOR'; //检查城门
  nSC_CHECKCASTLEDOOR = 69;
  sGENDER = 'GENDER';
  nGENDER = 70;
  sDAYTIME = 'DAYTIME';
  nDAYTIME = 71;
  sCHECKLEVEL = 'CHECKLEVEL';
  nCHECKLEVEL = 72;
  sSC_ISATTACKALLYGUILD = 'ISATTACKALLYGUILD'; //是否为攻城方联盟行会
  nSC_ISATTACKALLYGUILD = 73;
  sSC_ISDEFENSEALLYGUILD = 'ISDEFENSEALLYGUILD'; //是否为守城方联盟行会
  nSC_ISDEFENSEALLYGUILD = 74;
  sCHECKJOB = 'CHECKJOB';
  nCHECKJOB = 75;
  sSC_ISSYSOP = 'ISSYSOP';
  nSC_ISSYSOP = 76;
  sSC_ISADMIN = 'ISADMIN';
  nSC_ISADMIN = 77;
  sCHECKITEM = 'CHECKITEM';
  nCHECKITEM = 78;
  sCHECKITEMW = 'CHECKITEMW';
  nCHECKITEMW = 79;
  sCHECKGOLD = 'CHECKGOLD';
  nCHECKGOLD = 80;
  sCHECKBBCOUNT = 'CHECKBBCOUNT';
  nCHECKBBCOUNT = 81;
  sSC_CHECKSERVER = 'CHECKSERVER';
  nSC_CHECKSERVER = 82;
  sSC_CHECKGROUPCOUNT = 'CHECKGROUPCOUNT';
  nSC_CHECKGROUPCOUNT = 83;
  sSC_REPAIRITEM = 'REPAIRITEM';
  nSC_REPAIRITEM = 84;
  sSC_CLEARITEMMAP = 'CLEARITEMMAP';//20080124 清除地图物品
  nSC_CLEARITEMMAP = 85;
  sSC_GROUPMOVE = 'GROUPMOVE';
  nSC_GROUPMOVE = 86;
  sSC_CLEARNAMELIST = 'CLEARNAMELIST';
  nSC_CLEARNAMELIST = 87;
  sSC_KILLSLAVE = 'KILLSLAVE';
  nSC_KILLSLAVE = 88;
  sSC_CHANGEGENDER = 'CHANGEGENDER';
  nSC_CHANGEGENDER = 89;
  sCHANGESKILL = 'CHANGESKILL';//修改魔法ID 20080624
  nCHANGESKILL = 90;
  sCHALLENGMAPMOVE = 'CHALLENGMAPMOVE';//挑战地图移动 20080705
  nCHALLENGMAPMOVE = 91;
  sGETCHALLENGEBAKITEM = 'GETCHALLENGEBAKITEM';//没有挑战地图可移动,则退回抵押的物品 20080705
  nGETCHALLENGEBAKITEM = 92;
  sHEROLOGOUT ='HEROLOGOUT';//人物在线英雄下线 20080716
  nHEROLOGOUT = 93;
  sSC_ADDGUILDMEMBER = 'ADDGUILDMEMBER';//添加行会成员//20080427
  nSC_ADDGUILDMEMBER = 94;
  sSC_DELGUILDMEMBER = 'DELGUILDMEMBER';//删除行会成员（删除掌门无效）//20080427
  nSC_DELGUILDMEMBER = 95;
  sSC_CHECKLISTTEXT ='CHECKLISTTEXT';//检查文件是否包含指定文本 20080428
  nSC_CHECKLISTTEXT =96;
  sQUERYREFINEITEM ='QUERYREFINEITEM';//打开淬炼窗口 20080502
  nQUERYREFINEITEM = 97;
  sGOHOME ='GOHOME';//移动到回城点 20080503
  nGOHOME = 98;
  sTHROWITEM ='THROWITEM';//将指定物品刷新到指定地图坐标范围内 20080508
  nTHROWITEM = 99;
  sGOQUEST = 'GOQUEST';
  nGOQUEST = 100;
  sENDQUEST = 'ENDQUEST';
  nENDQUEST = 101;
  sGOTO = 'GOTO';
  nGOTO = 102;
  sSetOnTimer = 'SETONTIMER';//个人定时器 20080509
  nSetOnTimer = 103;
  sSETOFFTIMER = 'SETOFFTIMER';//停止定时器 20080509
  nSETOFFTIMER = 104;
  sSC_CHECKGAMEGLORY ='CHECKGAMEGLORY';//检查荣誉值 20071227
  nSC_CHECKGAMEGLORY =105;
  sSC_HAIRSTYLE = 'HAIRSTYLE';
  nSC_HAIRSTYLE = 106;
//-----------------------酒馆系统-----------------------------------------
  sSC_SAVEHERO ='SAVEHERO';//寄放英雄 20080513
  nSC_SAVEHERO = 107;
  sSC_GETHERO ='GETHERO';//取回英雄 20080513
  nSC_GETHERO = 108;
  sSC_CLOSEDRINK ='CLOSEDRINK';//关闭斗酒窗口 20080514
  nSC_CLOSEDRINK = 109;
  sSC_PLAYDRINKMSG ='PLAYDRINKMSG'; //斗酒窗口说话信息 20080514
  nSC_PLAYDRINKMSG = 110;
  sSC_OPENPLAYDRINK ='OPENPLAYDRINK'; //指定人物喝酒 20080514
  nSC_OPENPLAYDRINK = 111;
//-------------------------------------------------------------------------
  sGETSORTNAME = 'GETSORTNAME';//取指定排行榜指定排名的玩家名字 20080531
  nGETSORTNAME = 112;
  sWEBBROWSER = 'WEBBROWSER';//连接指定网站网址 20080602
  nWEBBROWSER = 113;
  sSC_CHANGEHUMABILITY ='CHANGEHUMABILITY';//调整人物属性 20080609
  nSC_CHANGEHUMABILITY = 114;
  sADDATTACKSABUKALL = 'ADDATTACKSABUKALL';//设置所有行会攻城 20080609
  nADDATTACKSABUKALL = 115;
  sKICKALLPLAY = 'KICKALLPLAY';//踢除服务器所有在线人物  20080609
  nKICKALLPLAY = 116;
  sREPAIRALL = 'REPAIRALL';//修理全身装备 20080613
  nREPAIRALL = 117;
  sAUTOGOTOXY = 'AUTOGOTOXY';//自动寻路 20080617
  nAUTOGOTOXY = 118;
//----------------------------酿酒系统------------------------------------------
  sOPENMAKEWINE = 'OPENMAKEWINE';//打开酿酒窗口 20080619
  nOPENMAKEWINE = 119;
  sGETGOODMAKEWINE = 'GETGOODMAKEWINE';//取回酿好的酒 20080620
  nGETGOODMAKEWINE = 120;
  sDECMAKEWINETIME = 'DECMAKEWINETIME';//减少酿酒的时间 20080620
  nDECMAKEWINETIME = 121;
  sISONMAKEWINE ='ISONMAKEWINE';//判断是否在酿哪种酒 20080620
  nISONMAKEWINE = 122;
  sMAKEWINENPCMOVE ='MAKEWINENPCMOVE';//酿酒NPC的走动 20080621
  nMAKEWINENPCMOVE = 123;
  sFOUNTAIN ='FOUNTAIN';//设置泉水喷发 20080624
  nFOUNTAIN = 124;
  sCHECKGUILDFOUNTAIN ='CHECKGUILDFOUNTAIN';//判断是否开启行会泉水仓库 20080625
  nCHECKGUILDFOUNTAIN = 125;
  sSETGUILDFOUNTAIN ='SETGUILDFOUNTAIN';//开启/关闭行会泉水仓库 20080625
  nSETGUILDFOUNTAIN = 126;
  sGIVEGUILDFOUNTAIN ='GIVEGUILDFOUNTAIN';//领取行会酒水 20080625
  nGIVEGUILDFOUNTAIN = 127;
//------------------------------------------------------------------------------
  sHCall ='HCALL';//通过脚本命令让别人执行QManage.txt中的脚本 20080422
  nHCall = 128;
  sSC_CHECKCASTLEWAR = 'CHECKCASTLEWAR';//检查是否在攻城期间 20080422
  nSC_CHECKCASTLEWAR = 129;
  sINCASTLEWARAY ='INCASTLEWARAY';//检测人物是否在攻城期间的范围内，在则BB叛变 20080422
  nINCASTLEWARAY = 130;
  sHEROCHECKSKILL = 'HEROCHECKSKILL';//检查英雄技能 20080423
  nHEROCHECKSKILL = 131;
  sSC_CHECKSIDESLAVENAME ='CHECKSIDESLAVENAME';//检查人物周围自己宝宝数量 20080425
  nSC_CHECKSIDESLAVENAME = 132;
  sSC_ISONMAP = 'ISONMAP'; //检测地图命令  20080426
  nSC_ISONMAP = 133;
  sSC_CHANGEHEROTRANPOINT ='CHANGEHEROTRANPOINT';//调整英雄技能升级点数 20080512
  nSC_CHANGEHEROTRANPOINT = 134;
  sCHECKACCOUNTLIST = 'CHECKACCOUNTLIST';
  nCHECKACCOUNTLIST = 135;
  sCHECKIPLIST = 'CHECKIPLIST';
  nCHECKIPLIST = 136;
  sSC_CHECKSKILLLEVEL ='CHECKSKILLLEVEL';//检查技能等级 20080512
  nSC_CHECKSKILLLEVEL = 137;
  sSC_CHECKPOSEDIR = 'CHECKPOSEDIR';
  nSC_CHECKPOSEDIR = 138;
  sSC_CHECKPOSELEVEL = 'CHECKPOSELEVEL';
  nSC_CHECKPOSELEVEL = 139;
  sSC_CHECKPOSEGENDER = 'CHECKPOSEGENDER';
  nSC_CHECKPOSEGENDER = 140;
  sSC_CHECKLEVELEX = 'CHECKLEVELEX';
  nSC_CHECKLEVELEX = 141;
  sSC_CHECKBONUSPOINT = 'CHECKBONUSPOINT';
  nSC_CHECKBONUSPOINT = 142;
  sSC_CHECKMARRY = 'CHECKMARRY';
  nSC_CHECKMARRY = 143;
  sSC_CHECKPOSEMARRY = 'CHECKPOSEMARRY';
  nSC_CHECKPOSEMARRY = 144;
  sSC_CHECKMARRYCOUNT = 'CHECKMARRYCOUNT';
  nSC_CHECKMARRYCOUNT = 145;
  sSC_CHECKMASTER = 'CHECKMASTER';
  nSC_CHECKMASTER = 146;
  sSC_HAVEMASTER = 'HAVEMASTER';
  nSC_HAVEMASTER = 147;
  sSC_CHECKPOSEMASTER = 'CHECKPOSEMASTER';
  nSC_CHECKPOSEMASTER = 148;
  sSC_POSEHAVEMASTER = 'POSEHAVEMASTER';
  nSC_POSEHAVEMASTER = 149;
  sSC_CHECKISMASTER = 'CHECKPOSEISMASTER';
  nSC_CHECKISMASTER = 150;
  sSC_CHECKPOSEISMASTER = 'CHECKISMASTER';
  nSC_CHECKPOSEISMASTER = 151;
  sSC_CHECKNAMEIPLIST = 'CHECKNAMEIPLIST';
  nSC_CHECKNAMEIPLIST = 152;
  sSC_CHECKACCOUNTIPLIST = 'CHECKACCOUNTIPLIST';
  nSC_CHECKACCOUNTIPLIST = 153;
  sSC_CHECKSLAVECOUNT = 'CHECKSLAVECOUNT';
  nSC_CHECKSLAVECOUNT = 154;
  sSC_CHECKCASTLEMASTER = 'ISCASTLEMASTER';
  nSC_CHECKCASTLEMASTER = 155;
  sSC_ISNEWHUMAN = 'ISNEWHUMAN';
  nSC_ISNEWHUMAN = 156;
  sSC_CHECKMEMBERTYPE = 'CHECKMEMBERTYPE';
  nSC_CHECKMEMBERTYPE = 157;
  sSC_CHECKMEMBERLEVEL = 'CHECKMEMBERLEVEL';
  nSC_CHECKMEMBERLEVEL = 158;
  sSC_CHECKGAMEGOLD = 'CHECKGAMEGOLD';
  nSC_CHECKGAMEGOLD = 159;
  sSC_CHECKGAMEPOINT = 'CHECKGAMEPOINT';
  nSC_CHECKGAMEPOINT = 160;
  sSC_CHECKNAMELISTPOSITION = 'CHECKNAMELISTPOSITION';//检查人物在列表中的位置
  nSC_CHECKNAMELISTPOSITION = 161;
  sSC_CHECKGUILDLIST = 'CHECKGUILDLIST';
  nSC_CHECKGUILDLIST = 162;
  sSC_CHECKRENEWLEVEL = 'CHECKRENEWLEVEL';
  nSC_CHECKRENEWLEVEL = 163;
  sSC_CHECKSLAVELEVEL = 'CHECKSLAVELEVEL';
  nSC_CHECKSLAVELEVEL = 164;
  sSC_CHECKSLAVENAME = 'CHECKSLAVENAME';
  nSC_CHECKSLAVENAME = 165;
  sSC_CHECKCREDITPOINT = 'CHECKCREDITPOINT';
  nSC_CHECKCREDITPOINT = 166;
  sSC_CHECKOFGUILD = 'CHECKOFGUILD';
  nSC_CHECKOFGUILD = 167;
  sSC_CHECKPAYMENT = 'CHECKPAYMENT';
  nSC_CHECKPAYMENT = 168;
  sSC_CHECKUSEITEM = 'CHECKUSEITEM';
  nSC_CHECKUSEITEM = 169;
  sSC_CHECKBAGSIZE = 'CHECKBAGSIZE';
  nSC_CHECKBAGSIZE = 170;
  sSC_CHECKDC = 'CHECKDC';
  nSC_CHECKDC = 172;
  sSC_CHECKMC = 'CHECKMC';
  nSC_CHECKMC = 173;
  sSC_CHECKSC = 'CHECKSC';
  nSC_CHECKSC = 174;
  sSC_CHECKHP = 'CHECKHP';
  nSC_CHECKHP = 175;
  sSC_CHECKMP = 'CHECKMP';
  nSC_CHECKMP = 176;
  sSC_CHECKCODELIST = 'CHECKCODELIST'; //检测文本里的编码是否存在  20080410
  nSC_CHECKCODELIST = 177;
  sCLEARCODELIST ='CLEARCODELIST';//删除指定文本里的编码 20080410
  nCLEARCODELIST = 178;
  sSC_HEROSKILLLEVEL = 'HEROSKILLLEVEL';//调整英雄技能等级 20080415
  nSC_HEROSKILLLEVEL = 179;
  sSC_CHECKITEMTYPE = 'CHECKITEMTYPE';
  nSC_CHECKITEMTYPE = 180;
  sSC_CHECKEXP = 'CHECKEXP';
  nSC_CHECKEXP = 181;
  sSC_CHECKCASTLEGOLD = 'CHECKCASTLEGOLD';
  nSC_CHECKCASTLEGOLD = 182;
  sSC_PASSWORDERRORCOUNT = 'PASSWORDERRORCOUNT';
  nSC_PASSWORDERRORCOUNT = 183;
  sSC_ISLOCKPASSWORD = 'ISLOCKPASSWORD';
  nSC_ISLOCKPASSWORD = 184;
  sSC_ISLOCKSTORAGE = 'ISLOCKSTORAGE';
  nSC_ISLOCKSTORAGE = 185;
  sSC_CHECKBUILDPOINT = 'CHECKGUILDBUILDPOINT';
  nSC_CHECKBUILDPOINT = 186;
  sSC_CHECKAURAEPOINT = 'CHECKGUILDAURAEPOINT';
  nSC_CHECKAURAEPOINT = 187;
  sSC_CHECKSTABILITYPOINT = 'CHECKGUILDSTABILITYPOINT';
  nSC_CHECKSTABILITYPOINT = 188;
  sSC_CHECKFLOURISHPOINT = 'CHECKGUILDFLOURISHPOINT';
  nSC_CHECKFLOURISHPOINT = 189;
  sSC_CHECKCONTRIBUTION = 'CHECKCONTRIBUTION'; //贡献度
  nSC_CHECKCONTRIBUTION = 190;
  sSC_CHECKRANGEMONCOUNT = 'CHECKRANGEMONCOUNT'; //检查一个区域中有多少怪
  nSC_CHECKRANGEMONCOUNT = 191;
  sSC_CHECKITEMADDVALUE = 'CHECKITEMADDVALUE';
  nSC_CHECKITEMADDVALUE = 192;
  sSC_CHECKINMAPRANGE = 'CHECKINMAPRANGE';
  nSC_CHECKINMAPRANGE = 193;
  sSC_CASTLECHANGEDAY = 'CASTLECHANGEDAY';
  nSC_CASTLECHANGEDAY = 194;
  sSC_CASTLEWARDAY = 'CASTLEWARAY';
  nSC_CASTLEWARDAY = 195;
  sSC_ONLINELONGMIN = 'ONLINELONGMIN';
  nSC_ONLINELONGMIN = 196;
  sSC_CHECKGUILDCHIEFITEMCOUNT = 'CHECKGUILDCHIEFITEMCOUNT';
  nSC_CHECKGUILDCHIEFITEMCOUNT = 197;
  sSC_CHECKNAMEDATELIST = 'CHECKNAMEDATELIST';
  nSC_CHECKNAMEDATELIST = 198;
  sSC_CHECKMAPHUMANCOUNT = 'CHECKMAPHUMANCOUNT';
  nSC_CHECKMAPHUMANCOUNT = 199;
  sSC_CHECKMAPMONCOUNT = 'CHECKMAPMONCOUNT';
  nSC_CHECKMAPMONCOUNT = 200;
  sSC_CHECKVAR = 'CHECKVAR';
  nSC_CHECKVAR = 201;
  sSC_CHECKSERVERNAME = 'CHECKSERVERNAME';
  nSC_CHECKSERVERNAME = 202;
  sCHECKMAPNAME = 'CHECKMAPNAME';
  nCHECKMAPNAME = 203;
  sINSAFEZONE = 'INSAFEZONE';
  nINSAFEZONE = 204;
  sCHECKSKILL = 'CHECKSKILL';
  nCHECKSKILL = 205;
  sSC_CHECKUSERDATE = 'CHECKUSERDATE';
  nSC_CHECKUSERDATE = 206;
  sSC_CHECKCONTAINSTEXT = 'CHECKCONTAINSTEXT';
  nSC_CHECKCONTAINSTEXT = 207;
  sSC_COMPARETEXT = 'COMPARETEXT';
  nSC_COMPARETEXT = 208;
  sSC_CHECKTEXTLIST = 'CHECKTEXTLIST';
  nSC_CHECKTEXTLIST = 209;
  sSC_ISGROUPMASTER = 'ISGROUPMASTER';
  nSC_ISGROUPMASTER = 210;
  sSC_CHECKCONTAINSTEXTLIST = 'CHECKCONTAINSTEXTLIST';
  nSC_CHECKCONTAINSTEXTLIST = 211;
  sSC_CHECKONLINE = 'CHECKONLINE';//检查玩家是否在线
  nSC_CHECKONLINE = 212;
  sOPENDRAGONBOX ='OPENDRAGONBOX';//打开卧龙宝藏 20080306
  nOPENDRAGONBOX = 213;
  sSC_ISDUPMODE = 'ISDUPMODE';
  nSC_ISDUPMODE = 214;
  sSC_ISOFFLINEMODE = 'ISOFFLINEMODE';
  nSC_ISOFFLINEMODE = 215;
  sSC_CHECKSTATIONTIME = 'CHECKSTATIONTIME';
  nSC_CHECKSTATIONTIME = 216;
  sSC_CHECKSIGNMAP = 'CHECKSIGNMAP';
  nSC_CHECKSIGNMAP = 217;
  sSC_HAVEHERO = 'HAVEHERO';
  nSC_HAVEHERO = 218;
  sSC_CHECKHEROONLINE = 'CHECKHEROONLINE';
  nSC_CHECKHEROONLINE = 219;
  sSC_CHECKHEROLEVEL = 'CHECKHEROLEVEL';
  nSC_CHECKHEROLEVEL = 220;
  sSC_CHECKHEROJOB = 'CHECKHEROJOB';
  nSC_CHECKHEROJOB = 221;
  sSC_CHECKMINE = 'CHECKMINE'; //检测矿纯度  20080324
  nSC_CHECKMINE = 222;
  sSC_GIVEMINE = 'GIVEMINE'; //给矿石  20080330
  nSC_GIVEMINE = 223;
  sSC_CHECKCURRENTDATE ='CHECKCURRENTDATE';//检测当前日期是否小于大于等于指定的日期 20080416
  nSC_CHECKCURRENTDATE = 224;
  sSC_CHECKMASTERONLINE ='CHECKMASTERONLINE';//检测师傅(或徒弟)是否在线 20080416
  nSC_CHECKMASTERONLINE = 225;
  sSC_CHECKDEARONLINE ='CHECKDEARONLINE';//检测夫妻一方是否在线 20080416
  nSC_CHECKDEARONLINE = 226;
  sSC_CHECKMASTERONMAP ='CHECKMASTERONMAP';//检测师傅(或徒弟)是否在XXX地图，支持SELF(是否同一地图) 20080416
  nSC_CHECKMASTERONMAP = 227;
  sSC_CHECKDEARONMAP ='CHECKDEARONMAP';//检测夫妻一方是否在XXX地图，支持SELF(是否同一地图) 20080416
  nSC_CHECKDEARONMAP = 228;
  sSC_CHECKPOSEISPRENTICE ='CHECKPOSEISPRENTICE';//检测对面是否为自己的徒弟 20080416
  nSC_CHECKPOSEISPRENTICE = 229;
//-------------------------------------------------------------------------
//20080105 特殊公告
  sSENDTOPMSG ='SENDTOPMSG';//顶端滚动公告
  nSENDTOPMSG = 230;
  sSENDCENTERMSG ='SENDCENTERMSG';//屏幕居中显示公告
  nSENDCENTERMSG = 231;
  sSENDEDITTOPMSG ='SENDEDITTOPMSG';//聊天框顶端公告
  nSENDEDITTOPMSG = 232;
//-------------------------------------------------------------------------
  sSC_CHECKHEROLOYAL ='CHECKHEROLOYAL';//检测英雄的忠诚度 20080109
  nSC_CHECKHEROLOYAL = 233;
  sSC_CHANGEHEROLOYAL ='CHANGEHEROLOYAL';//调整英雄的忠诚度 20080109
  nSC_CHANGEHEROLOYAL = 234;
//-------------------------------------------------------------------------
  sOPENBOOKS ='OPENBOOKS';//卧龙 20080119
  nOPENBOOKS = 235;
  sSC_RECALLMOBEX = 'RECALLMOBEX';//20080122 召唤宝宝
  nSC_RECALLMOBEX = 236;
  sSC_MOVEMOBTO = 'MOVEMOBTO';//20080123 将指定坐标的怪物移动到新坐标
  nSC_MOVEMOBTO = 237;
  sSC_CHECKMAPMOBCOUNT ='CHECKMAPMOBCOUNT';//检查地图指定坐标指定名称怪物数量 20080123
  nSC_CHECKMAPMOBCOUNT = 238;
  sSC_FINDMAPPATH ='FINDMAPPATH';//设置地图的起终XY值 20080124
  nSC_FINDMAPPATH = 239;
  sGETRANDOMNAME ='GETRANDOMNAME';//从文件中随机取文本 20080126
  nGETRANDOMNAME = 240;
  sSC_DIV = 'DIV';//20080220 变量运算 除法
  nSC_DIV = 241;
  sSC_MUL = 'MUL';//20080220 变量运算 乘法
  nSC_MUL = 242;
  sSC_PERCENT = 'PERCENT';//20080220 变量运算 百分比
  nSC_PERCENT = 243;
  sTHROUGHHUM ='THROUGHHUM';//改变穿人模式 20080221
  nTHROUGHHUM = 245;
  sSETITEMSLIGHT ='SETITEMSLIGHT';//装备发光设置 20080223
  nSETITEMSLIGHT = 246;
  sSC_CHECKHEROPKPOINT = 'CHECKHEROPKPOINT'; //检测英雄PK值  20080304
  nSC_CHECKHEROPKPOINT = 247;
  sGIVESTATEITEM ='GIVESTATEITEM';//给予带绑定状态装备 20080312
  nGIVESTATEITEM = 248;
  sSETITEMSTATE ='SETITEMSTATE';//设置装备绑定状态 20080312
  nSETITEMSTATE = 249;
  sCHECKITEMSTATE ='CHECKITEMSTATE';//检查装备绑定状态 20080312
  nCHECKITEMSTATE = 250;
  sISHIGH ='ISHIGH';//检测服务器最高属性人物命令 20080313
  nISHIGH = 251;
//-------------------------------------------------------------------------
  sOPENYBDEAL ='OPENYBDEAL';//开通元宝交易 20080316
  nOPENYBDEAL = 252;
  sQUERYYBSELL ='QUERYYBSELL';//查询正在出售的物品 20080317
  nQUERYYBSELL = 253;
  sQUERYYBDEAL ='QUERYYBDEAL';//查询可以的购买物品 20080317
  nQUERYYBDEAL = 254;
  sSC_GMEXECUTE = 'GMEXECUTE';
  nSC_GMEXECUTE = 255;
  sSC_GUILDCHIEFITEMCOUNT = 'GUILDCHIEFITEMCOUNT';
  nSC_GUILDCHIEFITEMCOUNT = 256;
  sSC_GAMEDIAMOND = 'GAMEDIAMOND';//调整金刚石数量 20071226
  nSC_GAMEDIAMOND = 257;
  sSC_GAMEGIRD = 'GAMEGIRD';//调整灵符数量 20071226
  nSC_GAMEGIRD = 258;
  sSC_MOBFIREBURN = 'MOBFIREBURN';
  nSC_MOBFIREBURN = 259;
  sSC_MESSAGEBOX = 'MESSAGEBOX';
  nSC_MESSAGEBOX = 260;
  sSC_SETSCRIPTFLAG = 'SETSCRIPTFLAG'; //设置用于NPC输入框操作的控制标志
  nSC_SETSCRIPTFLAG = 261;
  sSC_SETAUTOGETEXP = 'SETAUTOGETEXP';
  nSC_SETAUTOGETEXP = 262;
  sSC_CHANGEHEROEXP = 'CHANGEHEROEXP';
  nSC_CHANGEHEROEXP = 263;
  sSC_VAR = 'VAR';
  nSC_VAR = 264;
  sSC_LOADVAR = 'LOADVAR';
  nSC_LOADVAR = 265;
  sSC_SAVEVAR = 'SAVEVAR';
  nSC_SAVEVAR = 266;
  sSC_CALCVAR = 'CALCVAR';//自定义变量功能
  nSC_CALCVAR = 267;
  sOFFLINEPLAY = 'OFFLINEPLAY'; //挂机脚本
  nOFFLINEPLAY = 268;
  sKICKOFFLINE = 'KICKOFFLINE';
  nKICKOFFLINE = 269;
  sSTARTTAKEGOLD = 'STARTTAKEGOLD';
  nSTARTTAKEGOLD = 270;
  sDELAYGOTO = 'DELAYGOTO';
  nDELAYGOTO = 271;
  sCLEARDELAYGOTO = 'CLEARDELAYGOTO';
  nCLEARDELAYGOTO = 272;
  sSC_CHANGEHEROPKPOINT = 'CHANGEHEROPKPOINT';
  nSC_CHANGEHEROPKPOINT = 273;
  sSC_ADDUSERDATE = 'ADDUSERDATE';
  nSC_ADDUSERDATE = 274;
  sSC_DELUSERDATE = 'DELUSERDATE';
  nSC_DELUSERDATE = 275;
  sSC_ANSIREPLACETEXT = 'ANSIREPLACETEXT';
  nSC_ANSIREPLACETEXT = 276;
  sSC_ENCODETEXT = 'ENCODETEXT';
  nSC_ENCODETEXT = 277;
  sSC_GAMEGLORY = 'CHANGEGLORY';//调整荣誉值 20080511
  nSC_GAMEGLORY = 278;
  sSC_ADDTEXTLIST = 'ADDTEXTLIST';
  nSC_ADDTEXTLIST = 279;
  sSC_DELTEXTLIST = 'DELTEXTLIST';
  nSC_DELTEXTLIST = 280;
  sSC_GROUPMAPMOVE = 'GROUPMAPMOVE';
  nSC_GROUPMAPMOVE = 281;
  sSC_RECALLHUMAN = 'RECALLHUMAN';
  nSC_RECALLHUMAN = 282;
  sSC_REGOTO = 'REGOTO';
  nSC_REGOTO = 283;
  sSC_INTTOSTR = 'INTTOSTR';
  nSC_INTTOSTR = 284;
  sSC_STRTOINT = 'STRTOINT';
  nSC_STRTOINT = 285;
  sSC_GUILDMOVE = 'GUILDMOVE';
  nSC_GUILDMOVE = 286;
  sSC_GUILDMAPMOVE = 'GUILDMAPMOVE';
  nSC_GUILDMAPMOVE = 287;
  sSC_RANDOMMOVE = 'RANDOMMOVE';
  nSC_RANDOMMOVE = 288;
  sSC_USEBONUSPOINT = 'USEBONUSPOINT';//永久增加人物属性点
  nSC_USEBONUSPOINT = 289;
  sSC_TAKEONITEM = 'TAKEONITEM';//穿上物品
  nSC_TAKEONITEM = 290;
  sSC_TAKEOFFITEM = 'TAKEOFFITEM';
  nSC_TAKEOFFITEM = 291;
  sSC_CREATEHERO = 'CREATEHERO';
  nSC_CREATEHERO = 292;
  sSC_DELETEHERO = 'DELETEHERO';
  nSC_DELETEHERO = 293;
  sSC_CHANGEHEROLEVEL = 'CHANGEHEROLEVEL';
  nSC_CHANGEHEROLEVEL = 294;
  sSC_CHANGEHEROJOB = 'CHANGEHEROJOB';
  nSC_CHANGEHEROJOB = 295;
  sSC_CLEARHEROSKILL = 'CLEARHEROSKILL'; //清除英雄技能
  nSC_CLEARHEROSKILL = 296;
  sSC_CHECKGAMEDIAMOND ='CHECKGAMEDIAMOND';//检查金刚石数量 20071227
  nSC_CHECKGAMEDIAMOND = 297;
  sSC_CHECKGAMEGIRD ='CHECKGAMEGIRD';//检查灵符数量 20071227
  nSC_CHECKGAMEGIRD = 298;
  sSC_SETRANKLEVELNAME = 'SETRANKLEVELNAME';
  nSC_SETRANKLEVELNAME = 299;
  sSC_CHANGELEVEL = 'CHANGELEVEL';
  nSC_CHANGELEVEL = 300;
  sSC_MARRY = 'MARRY';
  nSC_MARRY = 301;
  sSC_UNMARRY = 'UNMARRY';
  nSC_UNMARRY = 302;
  sSC_GETMARRY = 'GETMARRY';
  nSC_GETMARRY = 303;
  sSC_GETMASTER = 'GETMASTER';
  nSC_GETMASTER = 304;
  sSC_CLEARSKILL = 'CLEARSKILL';
  nSC_CLEARSKILL = 305;
  sSC_DELNOJOBSKILL = 'DELNOJOBSKILL';
  nSC_DELNOJOBSKILL = 306;
  sSC_DELSKILL = 'DELSKILL';//删除技能
  nSC_DELSKILL = 307;
  sSC_ADDSKILL = 'ADDSKILL';//增加技能 支持英雄
  nSC_ADDSKILL = 308;
  sSC_SKILLLEVEL = 'SKILLLEVEL';//调整技能等级
  nSC_SKILLLEVEL = 309;
  sSC_CHANGEPKPOINT = 'CHANGEPKPOINT';
  nSC_CHANGEPKPOINT = 310;
  sSC_CHANGEEXP = 'CHANGEEXP';
  nSC_CHANGEEXP = 311;
  sSC_CHANGEJOB = 'CHANGEJOB';
  nSC_CHANGEJOB = 312;
  sSC_MISSION = 'MISSION';
  nSC_MISSION = 313;
  sSC_MOBPLACE = 'MOBPLACE';
  nSC_MOBPLACE = 314;
  sSC_SETMEMBERTYPE = 'SETMEMBERTYPE';
  nSC_SETMEMBERTYPE = 315;
  sSC_SETMEMBERLEVEL = 'SETMEMBERLEVEL';
  nSC_SETMEMBERLEVEL = 316;
  sSC_GAMEGOLD = 'GAMEGOLD';//调整元宝数
  nSC_GAMEGOLD = 317;
  sSC_AUTOADDGAMEGOLD = 'AUTOADDGAMEGOLD';
  nSC_AUTOADDGAMEGOLD = 318;
  sSC_AUTOSUBGAMEGOLD = 'AUTOSUBGAMEGOLD';
  nSC_AUTOSUBGAMEGOLD = 319;
  sSC_CHANGENAMECOLOR = 'CHANGENAMECOLOR';
  nSC_CHANGENAMECOLOR = 320;
  sSC_CLEARPASSWORD = 'CLEARPASSWORD';
  nSC_CLEARPASSWORD = 321;
  sSC_RENEWLEVEL = 'RENEWLEVEL';//人物转生控制
  nSC_RENEWLEVEL = 322;
  sSC_KILLMONEXPRATE = 'KILLMONEXPRATE'; //调整杀怪经验的倍数
  nSC_KILLMONEXPRATE = 323;
  sSC_POWERRATE = 'POWERRATE';
  nSC_POWERRATE = 324;
  sSC_CHANGEMODE = 'CHANGEMODE';//改变管理模式(不检查权限)
  nSC_CHANGEMODE = 325;
  sSC_CHANGEPERMISSION = 'CHANGEPERMISSION';
  nSC_CHANGEPERMISSION = 326;
  sSC_KILL = 'KILL';
  nSC_KILL = 327;
  sSC_KICK = 'KICK';
  nSC_KICK = 328;
  sSC_BONUSPOINT = 'BONUSPOINT';
  nSC_BONUSPOINT = 329;
  sSC_RESTRENEWLEVEL = 'RESTRENEWLEVEL';
  nSC_RESTRENEWLEVEL = 330;
  sSC_DELMARRY = 'DELMARRY';
  nSC_DELMARRY = 331;
  sSC_DELMASTER = 'DELMASTER';
  nSC_DELMASTER = 332;
  sSC_MASTER = 'MASTER';//拜师
  nSC_MASTER = 333;
  sSC_UNMASTER = 'UNMASTER';//出师
  nSC_UNMASTER = 334;
  sSC_CREDITPOINT = 'CREDITPOINT';
  nSC_CREDITPOINT = 335;
  sSC_CLEARNEEDITEMS = 'CLEARNEEDITEMS';
  nSC_CLEARNEEDITEMS = 336;
  sSC_CLEARMAKEITEMS = 'CLEARMAKEITEMS';
  nSC_CLEARMAEKITEMS = 337;
  sSC_SETSENDMSGFLAG = 'SETSENDMSGFLAG';
  nSC_SETSENDMSGFLAG = 338;
  sSC_UPGRADEITEMS = 'UPGRADEITEM';
  nSC_UPGRADEITEMS = 339;
  sSC_UPGRADEITEMSEX = 'UPGRADEITEMEX';
  nSC_UPGRADEITEMSEX = 340;
  sSC_MONGENEX = 'MONGENEX';
  nSC_MONGENEX = 341;
  sSC_CLEARMAPMON = 'CLEARMAPMON';
  nSC_CLEARMAPMON = 342;
  sSC_SETMAPMODE = 'SETMPAMODE';
  nSC_SETMAPMODE = 343;
  sSC_GAMEPOINT = 'GAMEPOINT';
  nSC_GAMEPOINT = 344;
  sSC_PKZONE = 'PKZONE';
  nSC_PKZONE = 345;
  sSC_RESTBONUSPOINT = 'RESTBONUSPOINT';
  nSC_RESTBONUSPOINT = 346;
  sSC_TAKECASTLEGOLD = 'TAKECASTLEGOLD';
  nSC_TAKECASTLEGOLD = 347;
  sSC_HUMANHP = 'HUMANHP';
  nSC_HUMANHP = 348;
  sSC_HUMANMP = 'HUMANMP';
  nSC_HUMANMP = 349;
  sSC_BUILDPOINT = 'GUILDBUILDPOINT';
  nSC_BUILDPOINT = 350;
  sSC_AURAEPOINT = 'GUILDAURAEPOINT';
  nSC_AURAEPOINT = 351;
  sSC_STABILITYPOINT = 'GUILDSTABILITYPOINT';
  nSC_STABILITYPOINT = 352;
  sSC_FLOURISHPOINT = 'GUILDFLOURISHPOINT';
  nSC_FLOURISHPOINT = 353;
  sSC_OPENMAGICBOX = 'OPENITEMBOX';
  nSC_OPENMAGICBOX = 354;
  sSC_CHECKMAKEWINE = 'CHECKMAKEWINE'; //检测酒属性  20080806
  nSC_CHECKMAKEWINE = 356;
  sSC_CHECKONLINEPLAYCOUNT = 'CHECKONLINEPLAYCOUNT';
  nSC_CHECKONLINEPLAYCOUNT = 357;
  sSC_CHECKPLAYDIELVL = 'CHECKPLAYDIELVL';
  nSC_CHECKPLAYDIELVL = 358; //杀人后检测
  sSC_CHECKPLAYDIEJOB = 'CHECKPLAYDIEJOB';
  nSC_CHECKPLAYDIEJOB = 359;
  sSC_CHECKPLAYDIESEX = 'CHECKPLAYDIESEX';
  nSC_CHECKPLAYDIESEX = 360;
  sSC_CHECKKILLPLAYLVL = 'CHECKKILLPLAYLVL';
  nSC_CHECKKILLPLAYLVL = 361; //死亡后检测
  sSC_CHECKKILLPLAYJOB = 'CHECKKILLPLAYJOB';
  nSC_CHECKKILLPLAYJOB = 362;
  sSC_CHECKKILLPLAYSEX = 'CHECKKILLPLAYSEX';
  nSC_CHECKKILLPLAYSEX = 363;
  sSC_CHECKITEMLEVEL = 'CHECKITEMLEVEL'; //检查装备升级次数  20080816
  nSC_CHECKITEMLEVEL = 364;
  sCHECKITEMSNAME ='CHECKITEMSNAME';//检查指定装备位置是否带有指定的物品 20080825
  nCHECKITEMSNAME = 365;
  sKILLBYHUM ='KILLBYHUM';//检测是否被人物所杀 20080826
  nKILLBYHUM = 366;
  sREADSKILLNG = 'READSKILLNG';//NPC学习内功 20081002
  nREADSKILLNG = 367;
  sSC_CHANGENGEXP = 'CHANGENGEXP';//调整人物内力经验点数 20081002
  nSC_CHANGENGEXP = 368;
  sSC_CHANGREADNG = 'CHANGREADNG';//检查角色是否学过内功 20081002
  nSC_CHANGREADNG = 369;
  sSC_CHANGENGLEVEL = 'CHANGENGLEVEL';//调整人物内力等级 20081004
  nSC_CHANGENGLEVEL = 370;
  sSC_CHANGEGUILDFOUNTAIN = 'CHANGEGUILDFOUNTAIN';//调整行会酒泉 20081007
  nSC_CHANGEGUILDFOUNTAIN = 371;
  sCHECKGUILDFOUNTAINVALUE ='CHECKGUILDFOUNTAINVALUE';//检测行会酒泉数 20081017
  nCHECKGUILDFOUNTAINVALUE = 372;
  sSC_TAGMAPINFO = 'TAGMAPINFO';//记路标石 20081019
  nSC_TAGMAPINFO = 373;
  sSC_TAGMAPMOVE = 'TAGMAPMOVE';//移动到记路标石记录的地图XY 20081019
  nSC_TAGMAPMOVE = 374;
  sCHECKNGLEVEL ='CHECKNGLEVEL';//检查角色内功等级 20081223
  nCHECKNGLEVEL = 375;
  sCREATEFILE ='CREATEFILE';//创建文本文件 20081226
  nCREATEFILE = 376;
  sSC_SENDMSGWINDOWS = 'SENDMSGWINDOWS';//时间到解发QF段 20090124
  nSC_SENDMSGWINDOWS = 377;
  sSC_CHECKSTRINGLENGTH ='CHECKSTRINGLENGTH';//检查字符串的长度 20090105
  nSC_CHECKSTRINGLENGTH = 378;
  sCHECKGUILDMEMBERCOUNT ='CHECKGUILDMEMBERCOUNT';//检测行会成员上限 20090115
  nCHECKGUILDMEMBERCOUNT = 379;
  sSC_CHANGEGUILDMEMBERCOUNT = 'CHANGEGUILDMEMBERCOUNT';//调整行会成员上限 20090115
  nSC_CHANGEGUILDMEMBERCOUNT = 380;
  sSC_SENDTIMEMSG = 'SENDTIMEMSG';//时间到解发QF段(客户端显示时间) 20090124
  nSC_SENDTIMEMSG = 381;
  sSC_GETGROUPCOUNT = 'GETGROUPCOUNT';//取组队成员数 20090125
  nSC_GETGROUPCOUNT = 382;
  sSC_CLOSEMSGWINDOWS = 'CLOSEMSGWINDOWS';//关闭客户端'!'图标的显示 20090126
  nSC_CLOSEMSGWINDOWS = 383;
  sSC_OPENEXPCRYSTAL = 'OPENEXPCRYSTAL';//客户端显示天地结晶 20090131
  nSC_OPENEXPCRYSTAL = 384;
  sSC_CLOSEEXPCRYSTAL = 'CLOSEEXPCRYSTAL';//客户端关闭天地结晶 20090131
  nSC_CLOSEEXPCRYSTAL = 385;
  sSC_GETEXPTOCRYSTAL = 'GETEXPTOCRYSTAL';//取提天地结晶中的经验(只提取可提取的经验) 20090202
  nSC_GETEXPTOCRYSTAL = 386;
  sSC_HIGHLEVELKILLMONFIXEXP = 'HIGHLEVELKILLMONFIXEXP';//一定时间内高等级杀怪经验不变 20090213
  nSC_HIGHLEVELKILLMONFIXEXP = 387;
  sSC_CHANGHEARMSGCOLOR = 'CHANGHEARMSGCOLOR';//改变发言时文字颜色 20090221
  nSC_CHANGHEARMSGCOLOR = 388;
  sSC_ISOPENBOX = 'ISOPENBOX';//检测人物是否正在打开箱子
  nSC_ISOPENBOX = 389;
  sSC_CHECKHEARMSGCOLOR = 'CHECKHEARMSGCOLOR';//检测人物是否正在使用改变颜色功能
  nSC_CHECKHEARMSGCOLOR = 390;
  sSC_MAPHUMISSAMEGUILD = 'MAPHUMISSAMEGUILD';//检测当前地图中的人物是否属于同一个行会
  nSC_MAPHUMISSAMEGUILD = 391;
  sSC_TAKEMINE = 'TAKEMINE';//收回指定名称的矿名(按数量，纯度) 20090330
  nSC_TAKEMINE = 392;
  sNPCGIVEITEM ='NPCGIVEITEM';//在NPC范围内爆出物品 20090425
  nNPCGIVEITEM = 393;
  sSC_CLEARNGSKILL = 'CLEARNGSKILL';//清除人物的所有内功技能  20090428
  nSC_CLEARNGSKILL = 394;
  sSC_ADDRANDOMMAPGATE = 'ADDRANDOMMAPGATE';//增加地图连接 20090503
  nSC_ADDRANDOMMAPGATE = 395;
  sSC_DELRANDOMMAPGATE = 'DELRANDOMMAPGATE';//删除地图连接 20090503
  nSC_DELRANDOMMAPGATE = 396;
  sSC_OPENCATTLEGAS = 'OPENCATTLEGAS';//客户端显示牛气管图标 20090518
  nSC_OPENCATTLEGAS = 397;
  sSC_CLOSECATTLEGAS = 'CLOSECATTLEGAS';//客户端关闭牛气管图标 20090518
  nSC_CLOSECATTLEGAS = 398;
  sSC_CHANGECATTLEGASEXP = 'CHANGECATTLEGASEXP';//调整人物牛气值 20090519
  nSC_CHANGECATTLEGASEXP = 399;
  sCHECKGUILDCOUNT ='CHECKGUILDCOUNT';//检测行会成员人数 20090607
  nCHECKGUILDCOUNT = 400;
  sSC_CREATEDIR = 'CREATEDIR';//创建路径 20090616
  nSC_CREATEDIR = 401;
//--------------------------连击相关命令---------------------------------------
  sSC_OPENMAKEKIMNEEDLE = 'OPENMAKEKIMNEEDLE';//客户端显示锻练金针窗口 20090615
  nSC_OPENMAKEKIMNEEDLE = 402;
  sCHECKKIMNEEDLE = 'CHECKKIMNEEDLE';//检查包裹是否有指定叠加物品 20090615
  nCHECKKIMNEEDLE = 403;
  sSC_TAKEKIMNEEDLE = 'TAKEKIMNEEDLE';//收回包裹指定叠加物品 20090615
  nSC_TAKEKIMNEEDLE = 404;
  sSC_GIVEKIMNEEDLE = 'GIVEKIMNEEDLE';//给指定的叠加物品 20090615
  nSC_GIVEKIMNEEDLE = 405;
{$IF M2Version = 1}
  sCHECKHUMANPULSE = 'CHECKHUMANPULSE';//检查是否跨穴点击 20090623
  nCHECKHUMANPULSE = 406;
  sCHECKOPENPULSELEVEL = 'CHECKOPENPULSELEVEL';//检查打通穴位所需内功等级 20090623
  nCHECKOPENPULSELEVEL = 407;
  sSC_OPENPULSE = 'OPENPULSE';//打通指定脉穴 20090623
  nSC_OPENPULSE = 408;
  sSC_CHANGEPULSELEVEL = 'CHANGEPULSELEVEL';//改变络经等级 20090624
  nSC_CHANGEPULSELEVEL = 409;
  sCHECKPULSELEVEL = 'CHECKPULSELEVEL';//检查各经络等级
  nCHECKPULSELEVEL = 412;
  sSC_OPENHEROPULS = 'OPENHEROPULS';//开通英雄经脉
  nSC_OPENHEROPULS = 414;
  sSC_CHANGEHEROPULSEXP = 'CHANGEHEROPULSEXP';//改变英雄经络修炼点
  nSC_CHANGEHEROPULSEXP = 415;
  sCHECKHEROPULSEXP = 'CHECKHEROPULSEXP';//检查英雄经络修炼点
  nCHECKHEROPULSEXP = 416;
  sCHECKHEROOPENOPULS = 'CHECKHEROOPENOPULS';//检查英雄是否开通经脉系统(英雄不在线，没学内功都将为F)
  nCHECKHEROOPENOPULS = 419;
  sOPEN4BATTERSKILL ='OPEN4BATTERSKILL';//开启第四个连击技能 20100720
  nOPEN4BATTERSKILL = 429;
  sSC_CHECK4BATTERSKILL = 'CHECK4BATTERSKILL';//检查是否开启第四连击技能
  nSC_CHECK4BATTERSKILL = 437;
  sOPENLIANQI ='OPENLIANQI';//打开炼气窗口
  nOPENLIANQI = 438;
  sCHANGEJINGYUAN ='CHANGEJINGYUAN';//调整人物精元值
  nCHANGEJINGYUAN = 441;
  {$IFEND}
  sCHECKAUTOADDEXPPLAY = 'CHECKAUTOADDEXPPLAY';//检查服务器挂机人数 20090719
  nCHECKAUTOADDEXPPLAY = 410;
  sCHECKHUMINRANGE = 'CHECKHUMINRANGE';//检测人物是否在指定范围之内 20090808
  nCHECKHUMINRANGE = 411;
  sSC_COPYFILETXT = 'COPYFILETXT';//复制文本文件  20090824
  nSC_COPYFILETXT = 413;
  sSC_CHECKITMECOUNTDURA = 'CHECKITMECOUNTDURA';//检查物品数量以及持久值 20090913
  nSC_CHECKITMECOUNTDURA = 417;
  sSC_TAKEITMECOUNTDURA = 'TAKEITMECOUNTDURA';//收回指定名称物品(按数量，持久) 20090912
  nSC_TAKEITMECOUNTDURA = 418;
  sSC_TAKEMAKEWINE = 'TAKEMAKEWINE';//收回指定属性的酒(按品质、酒精度、酒等级) 
  nSC_TAKEMAKEWINE = 420;
  sCHECKSKILL75 = 'CHECKSKILL75';//检查是否学过护体神盾 20091126
  nCHECKSKILL75 = 421;
  sSC_CHANGETRANPOINT ='CHANGETRANPOINT';//调整技能升级点数
  nSC_CHANGETRANPOINT = 422;
  sSC_ASSESSMENTHERO ='ASSESSMENTHERO';//评定英雄
  nSC_ASSESSMENTHERO = 423;
  sSC_CHECKDEPUTYHERO = 'CHECKDEPUTYHERO';//检查当前在线英雄是否为副将英雄
  nSC_CHECKDEPUTYHERO = 424;
  sSC_CHECKHEROAUTOPRACTICE = 'CHECKHEROAUTOPRACTICE';//检查副将英雄是否正在自我修炼
  nSC_CHECKHEROAUTOPRACTICE = 425;
  sOPENHEROAUTOPRACTICE ='OPENHEROAUTOPRACTICE';//打开英雄自我修炼窗口
  nOPENHEROAUTOPRACTICE = 426;
  sSTOPHEROAUTOPRACTICE ='STOPHEROAUTOPRACTICE';//停止英雄自我修炼
  nSTOPHEROAUTOPRACTICE = 427;
  sSC_CHECKASSESSMENTHERO = 'CHECKASSESSMENTHERO';//检查是否评定过主副将英雄
  nSC_CHECKASSESSMENTHERO = 428;
  sSC_SENDSHINYMSG = 'SENDSHINYMSG';//通知客户端使"成长任务"按键发亮 20100801
  nSC_SENDSHINYMSG = 430;
  sSC_QMISSIONGOTO = 'QMISSIONGOTO';//触发QMission-0.txt脚本段  20100801
  nSC_QMISSIONGOTO = 431;
  sSC_OPENJUDGE = 'OPENJUDGE';//打开品评窗口
  nSC_OPENJUDGE = 432;
  sSC_CHANGEPROFICIENCY = 'CHANGEPROFICIENCY';//调整人物熟练度
  nSC_CHANGEPROFICIENCY = 433;
  sSC_CHECKGROUPJOB = 'CHECKGROUPJOB';//检测组队中是否有指定职业的成员
  nSC_CHECKGROUPJOB = 434;
  sSC_CHECKGROUPFLAG = 'CHECKGROUPFLAG';//检测组队所有成员的任务标记
  nSC_CHECKGROUPFLAG = 435;
  sPALYVIDEO = 'PLAYVIDEO';//播放指定的视频文件 20100929
  nPALYVIDEO = 436;
  sSC_CHECKSELFSORT = 'CHECKSELFSORT';//检测人物在指定排行榜中的名次
  nSC_CHECKSELFSORT = 439;
  sSC_CHECKHITMONNAME = 'CHECKHITMONNAME';//检测人物攻击目标的名字
  nSC_CHECKHITMONNAME = 440;
  {$IF M2Version <> 2}
  sGIVEFENGHAO = 'GIVEFENGHAO';//给予称号
  nGIVEFENGHAO = 442;
  sSC_CHECKFENGHAO = 'CHECKFENGHAO';//检查玩家是否有指定称号
  nSC_CHECKFENGHAO = 443;
  sSC_CHECKFENGHAOCOUNT = 'CHECKFENGHAOCOUNT';//检查玩家所有称号的数量
  nSC_CHECKFENGHAOCOUNT = 444;
  sRECYCFENGHAO = 'RECYCFENGHAO';//回收称号
  nRECYCFENGHAO = 446;  
  sSC_CHECKFENGHAOLISTCOUNT = 'CHECKFENGHAOLISTCOUNT';//检查玩家护花使者或主宰龙卫的数量
  nSC_CHECKFENGHAOLISTCOUNT = 447;
  sSC_CHECKGUILDSTARDAY = 'CHECKGUILDSTARDAY';//检查授于行会之星的小时数
  nSC_CHECKGUILDSTARDAY = 448;
  sGIVEFENGHAOAGREE = 'GIVEFENGHAOAGREE';//设置称号发送确认信息
  nGIVEFENGHAOAGREE = 450;

  sSC_ADDDIVISIONMEMBER = 'ADDDIVISIONMEMBER';//添加师门成员
  nSC_ADDDIVISIONMEMBER = 474;
  sSC_DELDIVISIONMEMBER = 'DELDIVISIONMEMBER';//删除师门成员(删除掌门无效)
  nSC_DELDIVISIONMEMBER = 475;
  sSC_OPENAPPLYDIVISION = 'OPENAPPLYDIVISION';//打开申请加入门派窗口
  nSC_OPENAPPLYDIVISION = 476;
  sCHANGEFENGHAOTIME = 'CHANGEFENGHAOTIME';//调整称号时长
  nCHANGEFENGHAOTIME = 477;
  sSC_CHANGEDIVISIONPOINT = 'CHANGEDIVISIONPOINT';//调整门派人气值
  nSC_CHANGEDIVISIONPOINT = 478;
  sSC_CHECKDIVISIONPOINT = 'CHECKDIVISIONPOINT';//检测门派人气值
  nSC_CHECKDIVISIONPOINT = 479;
  sSC_SAVVYHEART = 'SAVVYHEART';//弟子领悟师门心法
  nSC_SAVVYHEART = 480;
  sSC_CHANGEHEARTPOINT = 'CHANGEHEARTPOINT';//调整弟子传承心法经验,'+'时同时累积门派人气值
  nSC_CHANGEHEARTPOINT = 481;
  sSC_OPENSAVVYHEART = 'OPENSAVVYHEART';//打开领悟心法窗口(学习龙卫心法-999级)
  nSC_OPENSAVVYHEART = 482;
  sSC_INCHEARTPOINT = 'INCHEARTPOINT';//龙卫心法吸收心法经验，并减少累积经验(传承心法无效)
  nSC_INCHEARTPOINT = 483;
  sSC_ISDIVISIONMASTER = 'ISDIVISIONMASTER';//检查玩家是否为门派掌门
  nSC_ISDIVISIONMASTER = 487;
  sSC_ISDIVISIONHEART = 'ISDIVISIONHEART';//检查玩家是否为门派弟子
  nSC_ISDIVISIONHEART = 488;
  sSC_CHECKHEARTEXP = 'CHECKHEARTEXP';//检查累积经验是否达到心法吸收值
  nSC_CHECKHEARTEXP = 489;
  sSC_CHECKHEHEARTSKILL = 'CHECKHEHEARTSKILL';//检查是否学过心法
  nSC_CHECKHEHEARTSKILL = 490;
  {$IFEND}
  sSC_CHANGEITEMDURA = 'CHANGEITEMDURA';//调整装备持久
  nSC_CHANGEITEMDURA = 445;
  sSC_GETMONTHSDAY = 'GETMONTHSDAY';//取当前月份天数
  nSC_GETMONTHSDAY = 449;

  sSC_AILOGON = 'AILOGON';//假人登录
  nSC_AILOGON = 451;
  sSC_AILOGONEX = 'AILOGONEX';//假人登录
  nSC_AILOGONEX = 452;
  sSC_AISTART = 'AISTART';//假人启动
  nSC_AISTART = 453;
  sSC_AISTOP = 'AISTOP';//假人停止
  nSC_AISTOP = 454;
  sCHANGESKILLEX = 'CHANGESKILLEX';//转换魔法ID
  nCHANGESKILLEX = 455;
  {sSC_LOADROBOTCONFIG = 'LOADROBOTCONFIG';//读取假人配置
  nSC_LOADROBOTCONFIG = 455; }
  sSC_ISAI = 'ISAI';//检测是否是假人
  nSC_ISAI = 456;
  sSC_RECALLHERO = 'RECALLHERO';//召唤英雄
  nSC_RECALLHERO = 457;
  sCHECKAIPLAY = 'CHECKAIPLAY';//检查服务器假人数
  nCHECKAIPLAY = 458;
  sSC_MIRRORMAP = 'MIRRORMAP';//增加地图镜像
  nSC_MIRRORMAP = 459;
  sCHECKMAP = 'CHECKMAP';//检查地图是否存在
  nCHECKMAP = 460;
  sSC_RELOADCASTLE = 'RELOADCASTLE';//初始化沙城配置
  nSC_RELOADCASTLE = 461;
  sSC_CHECKMAPHUMAICOUNT = 'CHECKMAPHUMAICOUNT';//检查某地图假人数量
  nSC_CHECKMAPHUMAICOUNT = 462;
  sSC_CHECKBAGITEMLEVEL = 'CHECKBAGITEMLEVEL'; //检查包裹中装备升级次数
  nSC_CHECKBAGITEMLEVEL = 463;
  sSC_TAKEBAGITEM = 'TAKEBAGITEM';//收回指定名称的物品(按数量，升级次数)
  nSC_TAKEBAGITEM = 464;
  sSC_GIVEBAGITEM = 'GIVEBAGITEM';//给指定名称的物品(按数量，升级次数，且增加对应属性点)
  nSC_GIVEBAGITEM = 465;
  sSC_CHANGEMODEEX = 'CHANGEMODEEX';//改变人物状态
  nSC_CHANGEMODEEX = 466;
  sCHANGEPETSMONHAPP = 'CHANGEPETSMONHAPP';//调整人物宠物的快乐度
  nCHANGEPETSMONHAPP = 467;
  sPETSMONHAPPLOG = 'PETSMONHAPPLOG';//打开宠物喂养日志
  nPETSMONHAPPLOG = 468;
  sSC_CHECKSLAVETOPEST = 'CHECKSLAVETOPEST';//检测人物宝宝中是否有宠物类宝宝
  nSC_CHECKSLAVETOPEST = 469;
  sDELETEFILE ='DELETEFILE';//删除指定文件
  nDELETEFILE = 470;
  sSC_MAPMOVESLAVENAME = 'MAPMOVESLAVENAME';//传送到指定宝宝的身边
  nSC_MAPMOVESLAVENAME = 471;
  sSC_LOADPETSMONSET = 'LOADPETSMONSET';//加载宠物配置文本
  nSC_LOADPETSMONSET = 472;
  sSC_CHECKITEMADDVALUEEX = 'CHECKITEMADDVALUEEX';//检查身上装备的鉴定属性
  nSC_CHECKITEMADDVALUEEX = 473;
  sSC_CHECKGROUPMAP = 'CHECKGROUPMAP';//检测组队中是否在同一地图内
  nSC_CHECKGROUPMAP = 484;
  sSC_CHANGESKILLLEVELEX = 'CHANGESKILLLEVELEX';//调整人物技能的强化等级
  nSC_CHANGESKILLLEVELEX = 485;
  sSORTHUMVARTOFILE = 'SORTHUMVARTOFILE';//人物自定义变量排序
  nSORTHUMVARTOFILE = 486;
  sSC_CHANGEATTATCKMODE = 'CHANGEATTATCKMODE';//改变人物的攻击模式
  nSC_CHANGEATTATCKMODE = 491;

  sOpenRefineArmyDrum ='OPENREFINEARMYDRUM'; // 淬炼窗口
  nOpenRefineArmyDrum =500;
  //Add By TasNat at: 2012-03-17 10:43:23
  sSC_UNMIRRORMAP = 'UNMIRRORMAP';//删除地图镜像
  nSC_UNMIRRORMAP = 501;

  sSC_CLEARMAPITEM = 'CLEARMAPITEM';//清理指定地图位置的物品
  nSC_CLEARMAPITEM = 502;

  sSC_Status = 'STATUS';//设置人物状态
  nSC_Status = 503;

  sSC_BIGMAIN = 'BIGMAIN';//大窗口
  nSC_BIGMAIN = 504;

  sSC_CLEARBAGITEMS = 'CLEARBAGITEMS';//清理背包物品
  nSC_CLEARBAGITEMS = 505;

  sSC_IncreaseSkillLevel = 'IncreaseSkillLevel';//调整强化等级
  nSC_IncreaseSkillLevel = 506;

  sSC_CHECKRANGEMONEX = 'CHECKRANGEMONEX';//检测地图范围内怪物
  nSC_CHECKRANGEMONEX = 507;

  sSC_ISINGROUP = 'ISINGROUP';//检测是否队伍中有此成员
  nSC_ISINGROUP = 508;

  sSC_CHECKBAGITEMS = 'CHECKBAGITEMS';//检测背包是否有某些物品
  nSC_CHECKBAGITEMS = 509;

  

  //Add End
  sSL_SENDMSG = '@@sendmsg';//祝福语标识
  sSUPERREPAIR = '@s_repair';
  sSUPERREPAIROK = '~@s_repair';//特殊修理
  sSUPERREPAIRFAIL = '@fail_s_repair';
  sREPAIR = '@repair';//修理
  sREPAIROK = '~@repair';
  sArmsTear = '@armstear';//武器拆卸赤炎石 20100708
  sArmsExchange = '@ArmsExchange';//武器兑换卷轴碎片 20100809
  sBUY = '@buy';//买物品
  sSELL = '@sell';//卖物品
  sMAKEDURG = '@makedrug';//炼药
  sPRICES = '@prices';
  sSTORAGE = '@storage';//存仓库
  sGETBACK = '@getback';//取仓库

  sBIGSTORAGE = '@bigstorage';//存无限仓库
  sBIGGETBACK = '@biggetback';//取无限仓库

  sGETPREVIOUSPAGE = '@getpreviouspage';
  sGETNEXTPAGE = '@getnextpage';

  sUPGRADENOW = '@upgradenow';//升级物品
  sUPGRADEING = '~@upgradenow_ing';
  sUPGRADEOK = '~@upgradenow_ok';
  sUPGRADEFAIL = '~@upgradenow_fail';
  sGETBACKUPGNOW = '@getbackupgnow';
  sGETBACKUPGOK = '~@getbackupgnow_ok';
  sGETBACKUPGFAIL = '~@getbackupgnow_fail';
  sGETBACKUPGFULL = '~@getbackupgnow_bagfull';
  sGETBACKUPGING = '~@getbackupgnow_ing';
  sEXIT = '@exit';
  sBACK = '@back';
  sMAIN = '@main';
  sFAILMAIN = '~@main';
  sBigMain='@bigmain';
  sFAILBigMain='~@bigmain';


  sGETMASTER = '@@getmaster';
  sGETMARRY = '@@getmarry';
  sUSEITEMNAME = '@@useitemname';

  {sGETSELLGOLD = '@getsellgold'; //增加拍卖的三个命令   //20080416 去掉拍卖功能
  sSELLOFF = '@selloff';
  sBUYOFF = '@buyoff';}
  sRMST = '@@rmst'; //接受歌曲
  sofflinemsg = '@@offlinemsg';//挂机自动回复

  sstartdealgold = '@startdealgold';
  sdealgold = '@@dealgold';//元宝转帐

  sBUILDDIVISIONNOW = '@@buildDivisionnow';//创建师门
  sBUILDGUILDNOW = '@@buildguildnow';//创建行会
  sSCL_GUILDWAR = '@@guildwar';//申请行会战
  sDONATE = '@@donate';
  sREQUESTCASTLEWAR = '@requestcastlewarnow';

  sCASTLENAME = '@@castlename';//城堡改名
  sWITHDRAWAL = '@@withdrawal';//沙巴克取回资金
  sRECEIPTS = '@@receipts';//沙巴克存资金
  sOPENMAINDOOR = '@openmaindoor';//沙巴克开门
  sCLOSEMAINDOOR = '@closemaindoor';//沙巴克关门
  sREPAIRDOORNOW = '@repairdoornow';//马上修复城门
  sREPAIRWALLNOW1 = '@repairwallnow1';//修城墙一
  sREPAIRWALLNOW2 = '@repairwallnow2';//修城墙二
  sREPAIRWALLNOW3 = '@repairwallnow3';//修城墙三
  sHIREARCHERNOW = '@hirearchernow';//聘请弓箭手
  sHIREGUARDNOW = '@hireguardnow';//聘请守卫
  sHIREGUARDOK = '@hireguardok';
  sMarket_Def = 'Market_Def\';
  sNpc_def = 'Npc_def\';

 //---------------内置排行榜------------------  
  sUserLevelOrder = '@UserLevelOrder';
  sWarrorLevelOrder = '@WarrorLevelOrder';
  sWizardLevelOrder = '@WizardLevelOrder';
  sTaoistLevelOrder = '@TaoistLevelOrder';
  sMasterCountOrder = '@MasterCountOrder';

  sLevelOrderHomePage = '@LevelOrderHomePage';
  sLevelOrderPreviousPage = '@LevelOrderPreviousPage';
  sLevelOrderNextPage = '@LevelOrderNextPage';
  sLevelOrderLastPage = '@LevelOrderLastPage';
  sMyLevelOrder = '@MyLevelOrder';
//---------------------------------------------

  sLyCreateHero = '@@LyCreateHero';//创建英雄脚本命令
  sBuHero ='@@BuHero';//酒馆英雄NPC 20080514
  sPlayMakeWine ='@PlayMakeWine';//酿酒 标识 20080619
  sPlayDrink ='@PlayDrink';//请酒,斗酒 20080515
  sDealYBme = '@dealybme';//元宝寄售:出售物品 20080316
  sybdeal ='@ybdeal';//元宝寄售 20080316
  sKAMPODLGNEW ='@KAMPODLGNEW';//元宝寄售 20080316
type
  TLevelNeedExp = array[1..MAXCHANGELEVEL] of Int64;//等级所需经验
  TLevelNeedExp1 = array[1..MAXCHANGELEVEL] of Word;//等级所需经验 药力值
  TLevelNeedExp2 = array[1..100] of Integer;//等级所需经验  酒气护体
  TLevelNeedExp3 = array[1..1000] of Byte;//等级所分配经验比例
  TLevelNeedExp4 = array[1..99] of LongWord;//等级所需经验(斗转星移)
  TExpCrystalLevelNeedExp = array[1..4] of LongWord;//天地结晶,牛气值等级所需经验
  TExpHeroPulsLevelNeedExp = array[0..4] of LongWord;//英雄经络等级所需经验
  TItemBind = record //物品绑定(绑定的玩家才能戴此物品)
    nMakeIdex: Integer;
    nItemIdx: Integer;//物品分类
    sBindName: string[20];//玩家名称
  end;
  pTItemBind = ^TItemBind;
{$IF M2Version <> 2}
  TDigJewelItemInfo = record //挖宝物品
    Name: string[14*2];//物品名称
    nItemNum: LongWord;//物品数量
    nItemRace: Word;//几率
  end;
  pTDigJewelItemInfo = ^TDigJewelItemInfo;
{$IFEND}
{  TConsoleData = packed record //未使用的类 20080407
    nCrcExtInt: Integer;
    nCrcDllInt: Integer;
  end;
  pTConsoleData = ^TConsoleData;}

(*  TClientConf = record
    //boClientCanSet: Boolean;//20080407 未使用
    boRUNHUMAN: Boolean;//是否可以穿人
    boRUNMON: Boolean; //是否可以穿怪
    boRunNpc: Boolean; //是否可以穿NPC
    boWarRunAll: Boolean;
    btDieColor: Byte;
    wSpellTime: Word;
    wHitIime: Word;
    wItemFlashTime: Word;
    btItemSpeed: Byte;
    boParalyCanRun: Boolean;
    boParalyCanWalk: Boolean;
    boParalyCanHit: Boolean;
    boParalyCanSpell: Boolean;
    boShowJobLevel: Boolean;
    boDuraAlert: Boolean;
    //boMagicLock: Boolean;

    //内挂
{    boShowRedHPLable: Boolean;
    boShowGroupMember: Boolean;
    boShowAllItem: Boolean;
    boShowBlueMpLable: Boolean;
    boShowName: Boolean;
    boAutoPuckUpItem: Boolean;
    boShowHPNumber: Boolean;
    boShowAllName: Boolean;
    boForceNotViewFog: Boolean;

    boParalyCan: Boolean;
    boMoveSlow: Boolean;
    boCanStartRun: Boolean;
    boAutoMagic: Boolean;
    boMoveRedShow: Boolean;
    boMagicLock: Boolean;
    nMoveTime: Integer;
    nHitTime: Integer;
    nSpellTime: Integer;
    nClientWgInfo: Integer;     }
    //内挂结束
  end;      *)
  pTConfig = ^TConfig;

  TThreadInfo = record
    dwRunTick: LongWord;
    boActived: Boolean;
    nRunFlag: Integer;
    boTerminaled: Boolean;
    nRunTime: Integer;
    nMaxRunTime: Integer;
    hThreadHandle: Integer;
    dwThreadID: LongWord;
    Config: pTConfig;
  end;

  pTThreadInfo = ^TThreadInfo;

  TConfig = record
    sServerName: string;
    sServerIPaddr: string;
    //sRegServerAddr: string;
    //nRegServerPort: Integer;
    //sRegKey: string;
    sWebSite: string;
    sBbsSite: string;
    sClientDownload: string;
    sQQ: string;
    sPhone: string;
    sBankAccount0: string;
    sBankAccount1: string;
    sBankAccount2: string;
    sBankAccount3: string;
    sBankAccount4: string;
    sBankAccount5: string;
    sBankAccount6: string;
    sBankAccount7: string;
    sBankAccount8: string;
    sBankAccount9: string;
    nServerNumber: Word{Integer};//20080503 服务器数
    boVentureServer: Boolean;//不刷怪模式
    boTestServer: Boolean;//测试模式
    boServiceMode: Boolean;//免费模式
    boNonPKServer: Boolean;//禁止PK模式
    nTestLevel: Word{Integer};//20080503 测试模式开始等级
    nTestGold: Integer;//测试模式开始金币
    nTestUserLimit: Word{Integer};//测试模式上线人数限制(2000) 20080503
    nSendBlock: Integer;//网关数据传输数据块大小
    nCheckBlock: Integer;
    nAvailableBlock: Integer;
    nGateLoad: Integer;
    nUserFull: Integer;//最高上线人数
    nZenFastStep: Integer;//怪物行动速度
    sGateAddr: string;
    nGatePort: Word{Integer};//网关端口(65535) 20080503
    sDBAddr: string;
    nDBPort: Word{Integer};//DBServer端口 20080503
    sIDSAddr: string;
    nIDSPort: Word{Integer};//LoginSrv端口 20080503
    sMsgSrvAddr: string;
    nMsgSrvPort: Word{Integer};//20080503
    sLogServerAddr: string;
    nLogServerPort: Word{Integer};//日志程序端口 20080503
    boDiscountForNightTime: Boolean;
    nHalfFeeStart: Integer;
    nHalfFeeEnd: Integer;
    boViewHackMessage: Boolean;
    boViewAdmissionFailure: Boolean;
    sBaseDir: string;
    sDivisionDir: string;
    sDivisionFile: string;
    sApplyDivisionFile: string;
    sGuildDir: string;
    sGuildFile: string;
    sVentureDir: string;
    sConLogDir: string;
    sCastleDir: string;
    sCastleFile: string;
    sSortDir: string;//排行榜路径 20080220
    sBoxsDir: string;//宝箱路径 20080114
    sBoxsFile: string;//宝箱文件(BoxsList.txt) 20080114
    sEnvirDir: string;
    sMapDir: string;
    sNoticeDir: string;
    sLogDir: string;
    sPlugDir: string;
    sClientFile1: string;
    //sClientFile2: string;//20080831 注释
    //sClientFile3: string;//20080831 注释

    sClothsMan: string;
    sClothsWoman: string;
    sWoodenSword: string;
    sCandle: string;
    sBasicDrug: string;
    sGoldStone: string;
    sSilverStone: string;
    sSteelStone: string;
    sCopperStone: string;
    sBlackStone: string;
    sZuma: array[0..3] of string[15];
    sBee: string;
    sZhuFire: string;
    sFoxBeads: string;
    sSpider: string;
    sWomaHorn: string;
    sZumaPiece: string;
    sGameGoldName: string;//游戏币
    sGameDiaMond: string;//金刚石
    sGameGird: string;//灵符
    sGameGlory: string;//荣誉值
    sGamePointName: string;//游戏点
    sPayMentPointName: string;//秒点卡
    DBSocket: Integer;
    nHealthFillTime: Integer;//恢复HP时间
    nSpellFillTime: Integer;//恢复MP时间
    nMonUpLvNeedKillBase: Integer;//宝宝升级杀怪基数
    nMonUpLvRate: Word;////宝宝升级杀怪倍率
    MonUpLvNeedKillCount: array[0..SLAVEMAXLEVEL - 2] of Word;
    SlaveColor: array[0..SLAVEMAXLEVEL - 1] of Byte;
    dwNeedExps: TLevelNeedExp;
    dwHeroNeedExps: TLevelNeedExp;
    dwMedicineNeedExps: TLevelNeedExp1;//药力值 20080623
    dwSkill68NeedExps: TLevelNeedExp2;//酒气护体升级经验 2008625
{$IF M2Version = 1}
    dwSkill95NeedExps: TLevelNeedExp4;//斗转星移升级经验
{$IFEND}
    dwLevelToExpRate: TLevelNeedExp3;//等级经验分配比例 20090323
{$IF HEROVERSION = 1}
    dwExpHeroPulsNeedExps0: TExpHeroPulsLevelNeedExp;//英雄冲脉经络升级所需的经络经验
    dwExpHeroPulsNeedExps1: TExpHeroPulsLevelNeedExp;//英雄阴跷经络升级所需的经络经验
    dwExpHeroPulsNeedExps2: TExpHeroPulsLevelNeedExp;//英雄阴维经络升级所需的经络经验
    dwExpHeroPulsNeedExps3: TExpHeroPulsLevelNeedExp;//英雄任脉经络升级所需的经络经验
{$IFEND}
    dwExpCrystalNeedExps: TExpCrystalLevelNeedExp;//天地结晶升级经验 20090131
    dwNGExpCrystalNeedExps: TExpCrystalLevelNeedExp;//天地结晶内功升级经验 20090131
    dwCattleGasvalueNeedExps: LongWord;//牛气管升级经验 20090520
    WideAttack: array[0..2] of Byte;//半月刀法的方向
    CrsAttack: array[0..6] of Byte;//抱月刀法的方向
    SpitMap: array[0..7, 0..4, 0..4] of Byte;
    sHomeMap: string;
    nHomeX: Integer;
    nHomeY: Integer;
    sRedHomeMap: string;
    nRedHomeX: Integer;
    nRedHomeY: Integer;
    sRedDieHomeMap: string;
    nRedDieHomeX: Integer;
    nRedDieHomeY: Integer;
    dwDecPkPointTime: LongWord;
    nDecPkPointCount: Word{Integer};//PK减点数(2000) 20080503
    dwPKFlagTime: LongWord;
    nKillHumanWeaponUnlockRate:Byte;//杀人武器被诅咒机率 20081020
    nKillHumanAddPKPoint: Word{Integer};//杀人增加PK点数(2000) 20080503
    nKillHumanDecLuckPoint: Word{Integer};
    dwDecLightItemDrugTime: LongWord;
    nSafeZoneSize: Word{Integer};//安全区范围(2000) 20080503
    nStartPointSize: Word{Integer};//新人出生点控制(2000) 20080503
    dwHumanGetMsgTime: LongWord;
    nGuildMemberCount: Word;//新建行会成员上限 20090115
    nGroupMembersMax: Word{Integer};//组队成员数量(2000) 20080503
    sFireBallSkill: string;
    sHealSkill: string;
    sMeteorSKill: String;
    sHeavenSKill: String;
    sDragonSkill: String;
    sCallTrollSkill: String;//召唤巨魔
    dwPulsePointNGLevel: array[0..19] of Byte;//脉穴打通所需内功等级 20090618
    ReNewNameColor: array[0..9] of Byte; //($FF,$FE,$93,$9A,$E5,$A8,$B4,$FC,$B4,$FC);
    dwReNewNameColorTime: LongWord;
    boReNewChangeColor: Boolean;
    boReNewLevelClearExp: Boolean;
    BonusAbilofWarr: TNakedAbility;
    BonusAbilofWizard: TNakedAbility;
    BonusAbilofTaos: TNakedAbility;
    NakedAbilofWarr: TNakedAbility;
    NakedAbilofWizard: TNakedAbility;
    NakedAbilofTaos: TNakedAbility;
    {$IF M2Version <> 2}
    nArmsTearPriceType: Byte;//拆分赤炎石费用类型 0-元宝 1-金币 2-灵符 3-金刚石
    nArmsTearPriceRate: Word;//拆分武器赤炎石费用倍数 20100709
    nArmsCritRate: Word;//武器暴击等级出现暴击机率参数 20100709
    nMaxHeapStruckDamage: Word;//武器暴击累积上限
    sArmsExchangeItme: string;//装备交换卷轴 20100812
    {$IFEND}
    nUpgradeWeaponMaxPoint: Word{Integer};//武器升级最高点数(1000) 20080504
    nUpgradeWeaponPrice: Integer;
    dwUPgradeWeaponGetBackTime: LongWord;
    nClearExpireUpgradeWeaponDays: Byte{Integer};//武器升级过期天数(100) 20080504
    nUpgradeWeaponDCRate: Word{Integer};//武器攻击力升级成功机率(500) 20080504
    nUpgradeWeaponDCTwoPointRate: Word{Integer};//武器攻击力二点机率(100) 20080504
    nUpgradeWeaponDCThreePointRate: Word{Integer};//武器攻击力三点机率(500) 20080504
    nUpgradeWeaponSCRate: Word{Integer};//武器道术升级成功机率(500) 20080504
    nUpgradeWeaponSCTwoPointRate: Word{Integer};//武器道术二点机率(100) 20080504
    nUpgradeWeaponSCThreePointRate: Word{Integer};//武器道术三点机率(500) 20080504
    nUpgradeWeaponMCRate: Word{Integer};//武器魔法升级成功机率(500) 20080504
    nUpgradeWeaponMCTwoPointRate: Word{Integer};//武器魔法二点机率(100)  20080504
    nUpgradeWeaponMCThreePointRate: Word{Integer};//武器魔法三点机率(500)  20080504
    dwProcessMonstersTime: LongWord;//刷怪处理间隔
    dwRegenMonstersTime: LongWord;//刷怪间隔(1000) 20080503
    nMonGenRate: Word{Integer};//刷怪倍数(1000) 20080503
    //nProcessMonRandRate: Integer;//未使用变量 20080504
    //nProcessMonLimitCount: Integer;//未使用变量 20080504
    nSoftVersionDate: Integer;
    boCanOldClientLogon: Boolean;
    dwConsoleShowUserCountTime: LongWord;//控制台显示人数间隔
    dwShowLineNoticeTime: LongWord;//公告显示间隔
    nLineNoticeColor: Byte;
    nStartCastleWarDays: Byte{Integer};//申请攻城天数 20080504
    nStartCastlewarTime: Byte{Integer};//攻城开始时间(24) 20080504
    dwShowCastleWarEndMsgTime: LongWord;
    dwCastleWarTime: LongWord;
    dwGetCastleTime: LongWord;//禁止占领时间
    dwGuildWarTime: LongWord; //行会战时间
    nBuildGuildPrice: Integer;
    nGuildWarPrice: Integer;//申请行会战费用
    nMakeDurgPrice: Integer;
    nHumanMaxGold: Integer;//人物最大金币数
    nHumanTryModeMaxGold: Integer;
    nTryModeLevel: Byte{Integer};//试玩等级限制(100) 20080503
    boTryModeUseStorage: Boolean;
    nCanShoutMsgLevel: Word{Integer};//允许喊话等级(65535) 20080503
    boShowMakeItemMsg: Boolean;
    boShutRedMsgShowGMName: Boolean;
    nSayMsgMaxLen: Byte{Integer};//聊天信息长度(255) 20080503
    dwSayMsgTime: LongWord;//聊天间隔
    nSayMsgCount: Byte{Integer};//发送信息数量(255) 20080503
    dwDisableSayMsgTime: LongWord;
    nSayRedMsgMaxLen: Byte{Integer};////广播信息长度(255) 20080503
    boShowGuildName: Boolean;
    boShowRankLevelName: Boolean;
    boMonSayMsg: Boolean;
    nStartPermission: Byte{Integer};//人物起始权限(10) 20080503
    boKillHumanWinLevel: Boolean;//杀人增加等级
    boKilledLostLevel: Boolean;
    boKillHumanWinExp: Boolean;
    boKilledLostExp: Boolean;
    nKillHumanWinLevel: Word{Integer};//20080503
    nKilledLostLevel: Word{Integer};//20080503
    nKillHumanWinExp: Integer;
    nKillHumanLostExp: Integer;
    nHumanLevelDiffer: Word{Integer};//PK等级(100)
    nMonsterPowerRate: Word{Integer};//怪物属性倍率(20000) 20080503
    nItemsPowerRate: Integer;
    nItemsACPowerRate: Word{Integer};//物品属性倍率(AC、MAC二个)(2000) 20080503
    boSendOnlineCount: Boolean;
    nSendOnlineCountRate: Byte{Integer};//广播倍率(10) 20080503
    dwSendOnlineTime: LongWord;//广播间隔
    dwSaveHumanRcdTime: LongWord;
    dwHumanFreeDelayTime: LongWord;
    dwMakeGhostTime: LongWord;
    dwMakeGhostPlayMosterTime: LongWord;//人形怪尸体清理时间 20080418
    dwClearDropOnFloorItemTime: LongWord;
    dwFloorItemCanPickUpTime: LongWord;
    boPasswordLockSystem: Boolean; //是否启用密码保护系统
    boLockDealAction: Boolean; //是否锁定交易操作
    boLockDropAction: Boolean; //是否锁定扔物品操作
    boLockGetBackItemAction: Boolean; //是否锁定取仓库操作
    boLockHumanLogin: Boolean; //是否锁定人登录操作
    boLockWalkAction: Boolean; //是否锁定走操作
    boLockRunAction: Boolean; //是否锁定跑操作
    boLockHitAction: Boolean; //是否锁定攻击操作
    boLockSpellAction: Boolean; //是否锁定魔法操作

    boLockCallHeroAction: Boolean; //是否锁定召唤英雄操作  20080529

    boLockSendMsgAction: Boolean; //是否锁定发信息操作
    boLockUserItemAction: Boolean; //是否锁定使用物品操作
    boLockInObModeAction: Boolean; //锁定时进入隐身状态
    nPasswordErrorCountLock: Byte{Integer}; //输入密码错误超过 指定次数则锁定密码(10) 20080504
    boPasswordErrorKick: Boolean; //输入密码错误超过限制则踢下线
    nSendRefMsgRange: Byte;
    boDecLampDura: Boolean;
    boHungerSystem: Boolean;
    {$IF M2Version <> 2}
    boUseFengHaoAbil: Boolean;//只有启用的称号才有属性
    {$IFEND}
    boClearGamePoint: Boolean;//定时清空游戏点
    boHungerDecHP: Boolean;
    boHungerDecPower: Boolean;
    boDiableHumanRun: Boolean;
    boRUNHUMAN: Boolean;//是否可穿人物
    boRUNMON: Boolean;//是否可穿怪
    boRunNpc: Boolean;//是否可穿NPC
    boRunGuard: Boolean;
    boWarDisHumRun: Boolean;
    boSkill31Effect: Boolean;//魔法盾效果 T-特色效果 F-盛大效果 20080808
    nSkill66Rate: Byte;//四级魔法盾抵御伤害百分率 20080829
    nOrdinarySkill66Rate: Byte;//普通魔法盾抵御伤害百分率 20081226
    nSkill69NG: Byte;//内力值参数 20081001
    nSkill69NGExp: LongWord;//主体内功经验参数 20081001
    nSkill69NGExp1: LongWord;//主体内功经验参数2 20090727
    nHeroSkill69NGExp: LongWord;//英雄内功经验参数 20081001
    nHeroSkill69NGExp1: LongWord;//英雄内功经验参数2 20090727
    nLimitExpNGLevel: Word;//内功等级限制
    dwIncNHTime: LongWord;//增加内力值间隔 20081002
    nDrinkIncNHExp: LongWord;//饮酒增加内功经验 20081003
    nHitStruckDecNH: Word;//内功抵御普通攻击消耗内力值 20081003
    boGMRunAll: Boolean;//管理员可以穿一切
    boSafeAreaLimited: Boolean;//安全区是否穿
    boItmeAutoOver: Boolean;//装备持久0时自动消失
    boShowMoveHP: Boolean;  // 显示飘血的开关
    {$If M2Version = 2}
    boShowNewItem : Boolean; // 显示四格的开关 By TasNat at: 2012-10-20 10:08:00
    {$ifend}
    {$If M2Version = 0}
    boUses176StateWin : Boolean; // 合击使用老F10界面 By TasNat at: 2012-10-29 13:04:00
    {$ifend}
    boNoCanUseProtection: Boolean;//内挂禁用主体保护
    boNoCanUseHeroProtection: Boolean;//内挂禁用英雄保护
    boNoCanUseComparThrust: Boolean;//内挂隔位刺杀是否可用
    dwTryDealTime: LongWord;
    dwDealOKTime: LongWord;
    boCanNotGetBackDeal: Boolean;
    boDisableDeal: Boolean;
    nMasterCount: Byte;//可收徒弟数 20080530
    nMasterOKLevel: Word{Integer};//出师等级(65535) 20080504
    nMasterOKCreditPoint: Byte{Integer};//出师后师傅得的声望点(100) 20080504
    nMasterOKBonusPoint: Word{Integer};//徒弟出师后，师父得到的分配点数(1000) 20080504
    boLevelLessNotIncPKPoint: Boolean;//等级小于指定值不增加PK点
    nNotIncPKPointLevel: Word;////等级小于时，不增加PK点
    boPKLevelProtect: Boolean;
    boPKHeroDieAddBodyLuck: Boolean;//杀英雄增加诅咒值 20090414
    nPKProtectLevel: Word{Integer};//PK保护等级 20080503
    nRedPKProtectLevel: Word{Integer};//红名PK保护等级 20080503
    nItemPowerRate: Word{Integer};//攻击翻倍倍率(60000) 20080503
    nItemExpRate: Word{Integer};//经验翻倍倍率(60000) 20080503
    nScriptGotoCountLimit: Word{Integer};//20080912 修改
    btHearMsgFColor1: Byte; //玄绿 文字颜色 20090221
    btHearMsgFColor2: Byte; //玄紫 文字颜色 20090221
    btHearMsgFColor3: Byte; //玄褐 文字颜色 20090221
    btHearMsgFColor: Byte; //前景  聊天
    btHearMsgBColor: Byte; //背景  聊天
    btWhisperMsgFColor: Byte; //前景  悄悄话
    btWhisperMsgBColor: Byte; //背景  悄悄话
    btGMWhisperMsgFColor: Byte; //前景  GM悄悄话
    btGMWhisperMsgBColor: Byte; //背景  GM悄悄话
    btCryMsgFColor: Byte; //前景  哭
    btCryMsgBColor: Byte; //背景  哭
    btGreenMsgFColor: Byte; //前景
    btGreenMsgBColor: Byte; //背景
    btBlueMsgFColor: Byte; //前景
    btBlueMsgBColor: Byte; //背景
    btSayMsgFColor: Byte; //前景  千里传音 20080309
    btSayeMsgBColor: Byte; //背景 千里传音 20080309
    btSayMsgFColor1: Byte; //前景 传音筒
    btSayeMsgBColor1: Byte; //背景 传音筒

    {$IF M2Version <> 2}   
    btDivisionMsgFColor: Byte; //前景 师门聊天
    btDivisionMsgBColor: Byte; //背景 师门聊天
    nDivisionMemberCount: Byte;//新建师门人数上限
    nBuildDivisionLevel: Word;//创建师门所需等级
    nApplyDivisionLevel: Word;//申请入门所需等级
    {$IFEND}
    btItemMsgFColor: Byte;
    btItemMsgBColor: Byte;
    btRedMsgFColor: Byte; //前景
    btRedMsgBColor: Byte; //背景
    btGuildMsgFColor: Byte; //前景
    btGuildMsgBColor: Byte; //背景
    btGroupMsgFColor: Byte; //前景
    btGroupMsgBColor: Byte; //背景
    btCustMsgFColor: Byte; //前景
    btCustMsgBColor: Byte; //背景
    nMonRandomAddValue: Byte;//怪物掉极品的几率
    nMakeRandomAddValue: Byte;//制造物品出现极品的几率
    nPlayMonRandomAddValue: Byte;//人形身上装备极品机率 20080716
    nWeaponDCAddValueMaxLimit: Byte;
    nWeaponDCAddValueRate: Byte;
    nWeaponMCAddValueMaxLimit: Byte;
    nWeaponMCAddValueRate: Byte;
    nWeaponSCAddValueMaxLimit: Byte;
    nWeaponSCAddValueRate: Byte;
    nWeaponDCAddRate: Byte;
    nWeaponSCAddRate: Byte;
    nWeaponMCAddRate: Byte;
    nDressDCAddRate: Byte;
    nDressDCAddValueMaxLimit: Byte;
    nDressDCAddValueRate: Byte;
    nDressMCAddRate: Byte;
    nDressMCAddValueMaxLimit: Byte;
    nDressMCAddValueRate: Byte;
    nDressSCAddRate: Byte;
    nDressSCAddValueMaxLimit: Byte;
    nDressSCAddValueRate: Byte;
    nDressACAddValueMaxLimit: Byte;
    nDressACAddValueRate: Byte;
    nDressACAddRate: Byte;
    nDressMACAddValueMaxLimit: Byte;
    nDressMACAddValueRate: Byte;
    nDressMACAddRate: Byte;
    nNeckLace202124DCAddRate: Byte;
    nNeckLace202124DCAddValueMaxLimit: Byte;
    nNeckLace202124DCAddValueRate: Byte;
    nNeckLace202124MCAddRate: Byte;
    nNeckLace202124MCAddValueMaxLimit: Byte;
    nNeckLace202124MCAddValueRate: Byte;
    nNeckLace202124SCAddRate: Byte;
    nNeckLace202124SCAddValueMaxLimit: Byte;
    nNeckLace202124SCAddValueRate: Byte;
    nNeckLace202124ACAddValueMaxLimit: Byte;
    nNeckLace202124ACAddValueRate: Byte;
    nNeckLace202124ACAddRate: Byte;
    nNeckLace202124MACAddValueMaxLimit: Byte;
    nNeckLace202124MACAddValueRate: Byte;
    nNeckLace202124MACAddRate: Byte;
    nNeckLace19DCAddRate: Byte;
    nNeckLace19DCAddValueMaxLimit: Byte;
    nNeckLace19DCAddValueRate: Byte;
    nNeckLace19MCAddRate: Byte;
    nNeckLace19MCAddValueMaxLimit: Byte;
    nNeckLace19MCAddValueRate: Byte;
    nNeckLace19SCAddRate: Byte;
    nNeckLace19SCAddValueMaxLimit: Byte;
    nNeckLace19SCAddValueRate: Byte;
    nNeckLace19ACAddValueMaxLimit: Byte;
    nNeckLace19ACAddValueRate: Byte;
    nNeckLace19ACAddRate: Byte;
    nNeckLace19MACAddValueMaxLimit: Byte;
    nNeckLace19MACAddValueRate: Byte;
    nNeckLace19MACAddRate: Byte;
    nArmRing26DCAddRate: Byte;
    nArmRing26DCAddValueMaxLimit: Byte;
    nArmRing26DCAddValueRate: Byte;
    nArmRing26MCAddRate: Byte;
    nArmRing26MCAddValueMaxLimit: Byte;
    nArmRing26MCAddValueRate: Byte;
    nArmRing26SCAddRate: Byte;
    nArmRing26SCAddValueMaxLimit: Byte;
    nArmRing26SCAddValueRate: Byte;
    nArmRing26ACAddValueMaxLimit: Byte;
    nArmRing26ACAddValueRate: Byte;
    nArmRing26ACAddRate: Byte;
    nArmRing26MACAddValueMaxLimit: Byte;
    nArmRing26MACAddValueRate: Byte;
    nArmRing26MACAddRate: Byte;
    nRing22DCAddRate: Byte;
    nRing22DCAddValueMaxLimit: Byte;
    nRing22DCAddValueRate: Byte;
    nRing22MCAddRate: Byte;
    nRing22MCAddValueMaxLimit: Byte;
    nRing22MCAddValueRate: Byte;
    nRing22SCAddRate: Byte;
    nRing22SCAddValueMaxLimit: Byte;
    nRing22SCAddValueRate: Byte;
    nRing23DCAddRate: Byte;
    nRing23DCAddValueMaxLimit: Byte;
    nRing23DCAddValueRate: Byte;
    nRing23MCAddRate: Byte;
    nRing23MCAddValueMaxLimit: Byte;
    nRing23MCAddValueRate: Byte;
    nRing23SCAddRate: Byte;
    nRing23SCAddValueMaxLimit: Byte;
    nRing23SCAddValueRate: Byte;
    nRing23ACAddValueMaxLimit: Byte;
    nRing23ACAddValueRate: Byte;
    nRing23ACAddRate: Byte;
    nRing23MACAddValueMaxLimit: Byte;
    nRing23MACAddValueRate: Byte;
    nRing23MACAddRate: Byte;

    nBootsDCAddValueMaxLimit: Byte;//20080503 极品鞋子加攻最高点
    nBootsDCAddValueRate: Byte;
    nBootsDCAddRate: Byte;
    nBootsSCAddValueMaxLimit: Byte;
    nBootsSCAddValueRate: Byte;
    nBootsSCAddRate: Byte;
    nBootsMCAddValueMaxLimit: Byte;
    nBootsMCAddValueRate: Byte;
    nBootsMCAddRate: Byte;
    nBootsACAddValueMaxLimit: Byte;
    nBootsACAddValueRate: Byte;
    nBootsACAddRate: Byte;
    nBootsMACAddValueMaxLimit: Byte;
    nBootsMACAddValueRate: Byte;
    nBootsMACAddRate: Byte;

    nHelMetDCAddRate: Byte;
    nHelMetDCAddValueMaxLimit: Byte;
    nHelMetDCAddValueRate: Byte;
    nHelMetMCAddRate: Byte;
    nHelMetMCAddValueMaxLimit: Byte;
    nHelMetMCAddValueRate: Byte;
    nHelMetSCAddRate: Byte;
    nHelMetSCAddValueMaxLimit: Byte;
    nHelMetSCAddValueRate: Byte;
    nHelMetACAddValueMaxLimit: Byte;
    nHelMetACAddValueRate: Byte;
    nHelMetACAddRate: Byte;
    nHelMetMACAddValueMaxLimit: Byte;
    nHelMetMACAddValueRate: Byte;
    nHelMetMACAddRate: Byte;
    nUnknowHelMetACAddRate: Byte;
    nUnknowHelMetACAddValueMaxLimit: Byte;
    nUnknowHelMetMACAddRate: Byte;
    nUnknowHelMetMACAddValueMaxLimit: Byte;
    nUnknowHelMetDCAddRate: Byte;
    nUnknowHelMetDCAddValueMaxLimit: Byte;
    nUnknowHelMetMCAddRate: Byte;
    nUnknowHelMetMCAddValueMaxLimit: Byte;
    nUnknowHelMetSCAddRate: Byte;
    nUnknowHelMetSCAddValueMaxLimit: Byte;
    nUnknowRingACAddRate: Byte;
    nUnknowRingACAddValueMaxLimit: Byte;
    nUnknowRingMACAddRate: Byte;
    nUnknowRingMACAddValueMaxLimit: Byte;
    nUnknowRingDCAddRate: Byte;
    nUnknowRingDCAddValueMaxLimit: Byte;
    nUnknowRingMCAddRate: Byte;
    nUnknowRingMCAddValueMaxLimit: Byte;
    nUnknowRingSCAddRate: Byte;
    nUnknowRingSCAddValueMaxLimit: Byte;
    nUnknowNecklaceACAddRate: Byte;
    nUnknowNecklaceACAddValueMaxLimit: Byte;
    nUnknowNecklaceMACAddRate: Byte;
    nUnknowNecklaceMACAddValueMaxLimit: Byte;
    nUnknowNecklaceDCAddRate: Byte;
    nUnknowNecklaceDCAddValueMaxLimit: Byte;
    nUnknowNecklaceMCAddRate: Byte;
    nUnknowNecklaceMCAddValueMaxLimit: Byte;
    nUnknowNecklaceSCAddRate: Byte;
    nUnknowNecklaceSCAddValueMaxLimit: Byte;
    nMonOneDropGoldCount: Integer;
    nMakeMineHitRate: Word{Integer}; //挖矿命中率(500) 20080504
    nMakeMineRate: Word{Integer}; //挖矿机率(500) 20080504
    nStoneTypeRate: Word{Integer};//矿石因子(500) 20080504
    nStoneTypeRateMin: Word{Integer};
    nGoldStoneMin: Word{Integer};
    nGoldStoneMax: Word{Integer};//金矿率(500) 20080504
    nSilverStoneMin: Word{Integer};
    nSilverStoneMax: Word{Integer};//银矿率(500) 20080504
    nSteelStoneMin: Word{Integer};
    nSteelStoneMax: Word{Integer};//铁矿率(500) 20080504
    nBlackStoneMin: Word{Integer};
    nBlackStoneMax: Word{Integer};//黑铁矿率(500) 20080504
    nStoneMinDura: Word{Integer};//矿石最小品质(1000) 20080504
    nStoneGeneralDuraRate: Word{Integer};//普通品质范围(1000) 20080504
    nStoneAddDuraRate: Word{Integer};//高品质机率(1000) 20080504
    nStoneAddDuraMax: Word{Integer};//高品质范围(1000) 20080504
    nWinLottery6Min: Integer;
    nWinLottery6Max: Integer;
    nWinLottery5Min: Integer;
    nWinLottery5Max: Integer;
    nWinLottery4Min: Integer;
    nWinLottery4Max: Integer;
    nWinLottery3Min: Integer;
    nWinLottery3Max: Integer;
    nWinLottery2Min: Integer;
    nWinLottery2Max: Integer;
    nWinLottery1Min: Integer;
    nWinLottery1Max: Integer; //16180 + 1820;
    nWinLottery1Gold: Integer;
    nWinLottery2Gold: Integer;
    nWinLottery3Gold: Integer;
    nWinLottery4Gold: Integer;
    nWinLottery5Gold: Integer;
    nWinLottery6Gold: Integer;
    nWinLotteryRate: Integer;
    nWinLotteryCount: Integer;
    nNoWinLotteryCount: Integer;
    nWinLotteryLevel1: Integer;
    nWinLotteryLevel2: Integer;
    nWinLotteryLevel3: Integer;
    nWinLotteryLevel4: Integer;
    nWinLotteryLevel5: Integer;
    nWinLotteryLevel6: Integer;
    nSaveGlobalValIdx: Word;//保存系统变量的位置 20091113 修改类型
    GlobalVal: array[0..999] of Integer;//G 变量可保存 要写临时变量声明一致 g_TempGlobalVal
    GlobaDyMval: array[0..99] of Integer;//不可保存的变量
    GlobalAVal: array[0..999] of string;// A 变量可保存 要写临时变量声明一致 g_TempGlobalAVal
    nItemNumber: Integer;//制造物品最后一个的制造ID号
    nItemNumberEx: Integer;
    nFengHaoNumber: Integer;//称号制造ID
    nGuildRecallTime: Word{Integer};//传行传送间隔
    nGroupRecallTime: Word{Integer};
    boControlDropItem: Boolean;
    boInSafeDisableDrop: Boolean;
    nCanDropGold: Integer;
    nCanDropPrice: Integer;
    boSendCustemMsg: Boolean;
    boSubkMasterSendMsg: Boolean;
    nSuperRepairPriceRate: Byte{Integer}; //特修价格倍数(100) 20080503
    nRepairItemDecDura: Byte{Integer}; //普通修理掉持久数(持久上限减下限再除以此数为减的数值)(100) 20080503
    boDieScatterBag: Boolean;
    nDieScatterBagRate: Word{Integer};
    boDieRedScatterBagAll: Boolean;
    nDieDropUseItemRate: Word{Integer};
    nDieRedDropUseItemRate: Byte{Integer};
    boDieDropGold: Boolean;
    boKillByHumanDropUseItem: Boolean;
    boKillByMonstDropUseItem: Boolean;
    boKickExpireHuman: Boolean;
    nGuildRankNameLen: Word{Integer};
    nGuildMemberMaxLimit: Word{Integer};//行会成员上限
    nGuildNameLen: Word{Integer};
    nFree9YearsBoxID: byte;//免费奖励箱子ID
    nFirstOpen9Years: Byte;
    nSecondOpen9Years: Byte;
    nThreeOpen9Years: Byte;
    nFourOpen9Years: Byte;
    nAttackPosionRate: Byte;//麻痹成功机率(麻痹戒指)
    nAttackPosionTime: Byte;//麻痹时间(麻痹戒指)
    nAttackPosionRate1: Byte;//麻痹成功机率(战意麻痹戒指)
    nAttackPosionTime1: Byte;//麻痹时间(战意麻痹戒指)
    nAttackPosionRate2: Byte;//麻痹成功机率(魔道麻痹戒指)
    nAttackPosionTime2: Byte;//麻痹时间(魔道麻痹戒指)
    nAttackPosionRate3: Byte;//麻痹成功机率(魔意麻痹戒指)
    nAttackPosionTime3: Byte;//麻痹时间(魔意麻痹戒指)
    dwRevivalTime: LongWord; //复活间隔时间
    dwRebirthTime: LongWord;//重生间隔时间 20100720
    boUserMoveCanDupObj: Boolean;
    boUserMoveCanOnItem: Boolean;
    dwUserMoveTime: Byte{LongWord};//传送使用间隔(100) 20080503
    dwPKDieLostExpRate: LongWord;
    nPKDieLostLevelRate: Integer;
    nChallengeTime: Word;//挑战时间 20080706
    btNPCNameColor: Byte;//NPC名字颜色 20081218
    btPKFlagNameColor: Byte;
    btPKLevel1NameColor: Byte;
    btPKLevel2NameColor: Byte;//红名状态 名字的颜色
    btAllyAndGuildNameColor: Byte;
    btWarGuildNameColor: Byte;
    btInFreePKAreaNameColor: Byte;
    boSpiritMutiny: Boolean;
    dwSpiritMutinyTime: LongWord;//祈祷生效时长
    boHeroMutinyDie: Boolean;
    boMasterTimeRoyalty: Boolean;//宝宝叛变控制By TasNat at: 2012-11-03 14:25:55
    dwMasterTimeRoyaltyTime: DWord;
    boMasterDieMutiny: Boolean;
    nMasterDieMutinyRate: Word{Integer};
    nMasterDieMutinyPower: Word{Integer};
    nMasterDieMutinySpeed: Word{Integer};
    boBBMonAutoChangeColor: Boolean;
    dwBBMonAutoChangeColorTime: Integer;
    dwPetsMonDecMaxHapp: Word;//宠物日可减快乐度上限
    dwPetsMonIncMaxHapp: Word;//宠物日可加快乐度上限
    boOldClientShowHiLevel: Boolean;
    boShowScriptActionMsg: Boolean;
    boThreadRun: Boolean;
    boShowExceptionMsg: Boolean;
    boShowPreFixMsg: Boolean;
    boGMShowFailMsg: Boolean;//GM命令错误是否提示 20080602
    boRecordClientMsg: Boolean;//记录人物私聊，行会聊天信息 20081213
    nMagicAttackRage: Byte{Integer}; //魔法攻击有效距离(20) 20080504
    nMagicAttackPassRage: Byte;//魔法攻击允许的误差范围越大越容易命中
    sBoneFamm: string;
    nBoneFammCount: Byte{Integer};//召唤骷髅数量(255) 20080504
    sDogz: string;
    nDogzCount: Byte;//召唤神兽数量(255) 20080504
    sSacredName: string;//召唤圣兽怪物名
    nSacredCount: Byte;//召唤圣兽数量
    sCallTroll: string;//0级召唤巨魔 迷你型巨魔
    sCallTroll1: string;//1级召唤巨魔 中号迷你型巨魔
    sCallTroll2: string;//2-4级召唤巨魔 大型型巨魔

    sFireFairy: string;//火灵名称
    nFireFairyCount: Byte;//火灵数量(255)
    nFireFairyDuntRate: Byte;//火灵重击几率(100),等级高于目标的几率
    nFireFairyDuntRateBelow: Byte;//火灵重击次数,达到次数时按等级出重击
    nFireFairyAttackRate: Word;//火灵重击倍数(10)
    boFireFairyShareMasterMP: Boolean;//火灵与主体共用蓝
    boFireFairyNeglectACMAC: Boolean;//火灵无视防和魔防

    sFairy: string;//月灵名称
    nFairyCount: Byte;  //月灵数量(255) 20080504
    nFairyDuntRate: Byte{Integer}; //月灵重击几率(100),等级高于目标的几率 20080504
    nFairyDuntRateBelow: Byte; //月灵重击次数,达到次数时按等级出重击 20090105
    nFairyAttackRate: Word{Integer}; //月灵重击倍数(10) 20080504
    n43KillHitRate: Byte{Integer}; //开天斩重击几率(100)   20080504
    n43KillAttackRate: word; //开天斩重击倍数(10)  20090213
    nAttackRate_43: Word{Integer};//开天斩威力(10000) 20080504
    nAttackRate_26: Word;//烈火剑法威力倍数 20081208
    nAttackRate_74: Word;//逐日剑法威力倍数 20080511
    //g_Config.DogzArray : array[0..9] of TRecallMigic;
    nAmyOunsulPoint: Byte{Integer};//施毒术中毒减的点数 20080504
    nMaxMakePosionTime: Integer;//施毒术最大中毒效果时间By TasNat at: 2012-04-06 21:14:53
    boDisableInSafeZoneFireCross: Boolean;
    boGroupMbAttackPlayObject: Boolean;//狮子吼是否对人物有效
    boGroupMbAttackPlayMon: Boolean;//狮子吼是否对人形有效 20090413
    dwPosionDecHealthTime: LongWord;
    sDiyMedicine: string;//自定义内挂药品
    nPosionDamagarmor: Word{Integer}; //中红毒着持久及减防量（实际大小为 12 / 10）20080503
    boLimitSwordLong: Boolean;//禁止无限刺杀
    sSkillStrongBoneFamm: string;//强化召唤骷髅所召唤的怪物名
    sSkillStrongSacred: string;//强化召唤圣兽怪物名
    {$IF M2Version <> 2}
    boLimitSwordLongNG: Boolean;//刺杀不考虑内功等级
    {$IFEND}
    nSwordLongPowerRate: Word{Integer};//刺杀攻击力倍数 20080504
    nFireBoomRage: Byte{Integer};//爆裂火焰攻击范围 20080504
    nSnowWindRange: Byte{Integer};//冰咆哮攻击范围 20080504
    nMeteorFireRainRage: Byte;//流星火雨攻击范围 20080510
    nMagFireCharmTreatment: Byte;//噬血术加血百分率 20080511
    nHeroNameColor: Byte;//英雄名字颜色 20080315
    sHeroName:String;//英雄名字 20080315
    sHeroNameSuffix:String;//英雄名后缀  20080315
    boNameSuffix: Boolean;//是否显示后缀  20080315
    boProtectPickUpItem: Boolean;//守护时可捡物品 20090723
    boStopProtectOnChangMap: Boolean;//主人换地图停止守护By TasNat at: 2012-06-24 15:49:17
    boNoSafeProtect: Boolean;//禁止安全区守护 20080603
    boHeroAttackTarget: Boolean;//道法22前是否物理攻击 20081218
    boHeroAttackTao: Boolean;//道22后是否物理攻击 20090108
    boHeroAttackNoFollow: Boolean;//英雄攻击时不与主人切换地图 20090723
    boRestNoFollow: Boolean;//英雄休息不跟随主人切换地图 20081209
    nElecBlizzardRange: Byte{Integer};//地狱雷光攻击范围  20080504
    nHeroAttackRange_60: Byte{Integer};//破魂斩 攻击范围 20080406
    nHeroAttackRange_63: Byte{Integer};//噬魂沼泽 攻击范围 20080131
    nHeroAttackRange_64: Byte;//末日审判 攻击范围 20081216
    nHeroAttackRange_65: Byte{Integer};//火龙气焰 攻击范围 20080131
    nMagTurnUndeadLevel: Word{Integer}; //圣言怪物等级限制 20080504
    nMagTammingLevel: Word{Integer}; //诱惑之光怪物等级限制 20080504
    nMagTammingTargetLevel: Word{Integer}; //诱惑怪物相差等级机率，此数字越小机率越大； 20080504
    nMagTammingHPRate: Word{Integer}; //成功机率=怪物最高HP 除以 此倍率，此倍率越大诱惑机率越高   20080504
    nMagTammingCount: Word{Integer};//诱惑数量 20080504
    boMagTammingHitNew: Boolean;//诱惑之光怪物攻击速度算法
    nMabMabeHitRandRate: Byte{Integer};//火焰冰角色等级相差机率  20080504
    nMabMabeHitMinLvLimit: Byte{Integer};//火焰冰角色等级相差限制  20080504
    nMabMabeHitSucessRate: Byte{Integer};//麻痹命中机率 20080504
    nMabMabeHitMabeTimeRate: Byte{Integer};//麻痹时间参数倍率 20080504
    sCASTLENAME: string;
    sCastleHomeMap: string;
    nCastleHomeX: Integer;
    nCastleHomeY: Integer;
    nCastleWarRangeX: Integer;
    nCastleWarRangeY: Integer;
    nCastleTaxRate: Word{Integer};//税收率(1000) 20080503
    boGetAllNpcTax: Boolean;
    nHireGuardPrice: Integer;
    nHireArcherPrice: Integer;
    nCastleGoldMax: Integer;
    nCastleOneDayGold: Integer;
    nRepairDoorPrice: Integer;
    nRepairWallPrice: Integer;
    nCastleMemberPriceRate: Byte{Integer};//折扣率(200) 20080503
    nMaxHitMsgCount: Byte{Integer};//20080503
    nMaxSpellMsgCount: Byte{Integer};//20080503
    nMaxRunMsgCount: Byte{Integer};//20080503
    nMaxWalkMsgCount: Byte{Integer};//20080503
    nMaxTurnMsgCount: Byte{Integer};//20080503
    nMaxSitDonwMsgCount: Byte{Integer};//20080503
    nMaxDigUpMsgCount: Byte{Integer};//20080503
    boSpellSendUpdateMsg: Boolean;
    boActionSendActionMsg: Boolean;
    boKickOverSpeed: Boolean;
    btSpeedControlMode: Byte;
    nOverSpeedKickCount: Byte{Integer};//20080503
    dwDropOverSpeed: LongWord;
    dwHitIntervalTime: LongWord; //攻击间隔
    dwMagicHitIntervalTime: LongWord; //魔法间隔
    dwRunIntervalTime: LongWord; //跑步间隔
    dwWalkIntervalTime: LongWord; //走路间隔
    dwEatHPItemsIntervalTime: LongWord; //吃药间隔 20090301
    dwTurnIntervalTime: LongWord; //换方向间隔
    boControlActionInterval: Boolean;//启用组合操作控制
    boControlWalkHit: Boolean;
    boControlRunLongHit: Boolean;
    boControlRunHit: Boolean;
    boControlRunMagic: Boolean;
    dwActionIntervalTime: LongWord; //组合操作间隔
    dwRunLongHitIntervalTime: LongWord; //跑位刺杀间隔
    dwRunHitIntervalTime: LongWord; //跑位攻击间隔
    dwWalkHitIntervalTime: LongWord; //走位攻击间隔
    dwRunMagicIntervalTime: LongWord; //跑位魔法间隔
    boDisableStruck: Boolean; //不显示人物弯腰动作
    boDisableSelfStruck: Boolean; //自己不显示人物弯腰动作
    dwStruckTime: LongWord; //人物弯腰停留时间
    dwKillMonExpMultiple: Word{LongWord}; //杀怪经验倍数 20080503
    dwKillMonNGExpMultiple: Word; //杀怪内功经验倍数 20081215
    nNGSkillRate: Word;//内功技能增强的攻防比率
    nWarrNGLevelIncDC: Byte;//战内功等级+攻 200990812
    nWarrNGLevelIncAC: Byte;//战内功等级+防 200990812
    nWizardNGLevelIncDC: Byte;//法内功等级+攻 200990812
    nWizardNGLevelIncAC: Byte;//法内功等级+防 200990812
    nTaosNGLevelIncDC: Byte;//道内功等级+攻
    nTaosNGLevelIncAC: Byte;//道内功等级+防
    dwRequestVersion: LongWord;
    boHighLevelKillMonFixExp: Boolean;
    boAddUserItemNewValue: Boolean;//物品增加新属性
    sLineNoticePreFix: string;
    sSysMsgPreFix: string;
    sGuildMsgPreFix: string;
    sGroupMsgPreFix: string;
    sHintMsgPreFix: string;
    sGMRedMsgpreFix: string;
    sMonSayMsgpreFix: string;
    sCustMsgpreFix: string;
    sCastleMsgpreFix: string;
    {$IF M2Version <> 2}
    sDivisionMsgPreFix: string;
    sDivisionNotice: string;
    sDivisionChief: string;
    sDivisionMember: string;
    sApplyDivision: string;
    {$IFEND}
    sGuildNotice: string;
    sGuildWar: string;
    sGuildAll: string;
    sGuildMember: string;
    sGuildMemberRank: string;
    sGuildChief: string;
    boKickAllUser: Boolean;
    boTestSpeedMode: Boolean;

    nWeaponMakeUnLuckRate: Word{Integer};//祝福油诅咒机率(500) 20080504
    nWeaponMakeLuckPoint1: Word{Integer};//祝福油武器一级点数(500) 20080504
    nWeaponMakeLuckPoint2: Word{Integer};//祝福油武器二级点数(500) 20080504
    nWeaponMakeLuckPoint3: Word{Integer};//祝福油武器三级点数(500) 20080504
    nWeaponMakeLuckPoint2Rate: Word{Integer};//祝福油武器二级机率(500) 20080504
    nWeaponMakeLuckPoint3Rate: Word{Integer};//祝福油武器三级机率(500) 20080504
    boCheckUserItemPlace: Boolean;
    nClientKey: Integer;
    nLevelValueOfTaosHP: Word{Integer};
    nLevelValueOfTaosHPRate: Double;
    nLevelValueOfTaosMP: Word{Integer};
    nLevelValueOfWizardHP: Word{Integer};
    nLevelValueOfWizardHPRate: Double;
    nLevelValueOfWarrHP: Word{Integer};
    nLevelValueOfWarrHPRate: Double;

    nProcessMonsterInterval: Integer;

    //nAppIconCrc: Integer;//未使用 20080504
    //boCheckFail: Boolean;//20080806 注释，用于检查是否失败
    BoneFammArray: array[0..9] of TRecallMigic;
    DogzArray: array[0..9] of TRecallMigic;
    SacredArray: array[0..9] of TRecallMigic;//圣兽
    FairyArray: array[0..9] of  TRecallMigic;//月灵

    boIDSocketConnected: Boolean;
    UserIDSection: TRTLCriticalSection;
    sIDSocketRecvText: string;
    nIDSocketRecvIncLen: Integer;
    nIDSocketRecvMaxLen: Integer;
    nIDSocketRecvCount: Integer;
    nIDReceiveMaxTime: Integer;
    nIDSocketWSAErrCode: Integer;
    nIDSocketErrorCount: Integer;

    nLoadDBCount: Integer;
    nLoadDBErrorCount: Integer;
    nSaveDBCount: Integer;
    nDBQueryID: Integer;
    boDBSocketConnected: Boolean;
    nDBSocketRecvIncLen: Integer;
    nDBSocketRecvMaxLen: Integer;
    sDBSocketRecvText: string;

    boDBSocketWorking: Boolean;
    nDBSocketRecvCount: Integer;
    nDBReceiveMaxTime: Integer;
    nDBSocketWSAErrCode: Integer;
    nDBSocketErrorCount: Integer;

    UserEngineThread: pTThreadInfo;
    IDSocketThread: pTThreadInfo;
    DBSOcketThread: pTThreadInfo;

    //nServerFile_CRCB: Integer;//未使用 20080504
    nServerFile_CRCA: Integer;

    //nClientFile1_CRC: Integer;
    //nClientFile2_CRC: Integer;
    //nClientFile3_CRC: Integer;

   // Encode6BitBuf: TEncode6BitBuf;// 20080831 注释
   // Decode6BitBuf: TDecode6BitBuf;// 20080831 注释

   // nUserSellOffCount: Integer; //20080504 去掉拍卖功能
   // nUserSellOffTax: Integer; //20080504 去掉拍卖功能
    nDecUserGameGold: Word{Integer};//每次扣多少元宝(元宝寄售) 20080504

    boOpenSelfShop: Boolean;//是否开放个人商店
    boSafeZoneShop: Boolean;//只允许安全区使用个人商店
    boMapShop: Boolean;//只允许指定地图使用个人商店
    boSafeOffShop: Boolean;//禁止挂机摆摊
    nCanShopLevel: Integer;//可摆摊所需的等级

    nMakeWineTime: Integer;//酿普通酒等待时间 20080621
    nMakeWineTime1: Integer;//酿药酒等待时间 20080621
    nMakeWineRate: Byte;//酿酒获得酒曲机率 20080621
    nMakeWineLevelRate: Byte;//酿酒获得酒等级机率 20091117
    nIncAlcoholTick: Integer;//增加酒量进度的间隔时间 20080623
    nDesDrinkTick: Integer;//减少醉酒度的间隔时间 20080623
    nMaxAlcoholValue: Word;//酒量上限初始值 20080623
    nIncAlcoholValue: Word;//升级后增加酒量上限值 20080623
    nDesMedicineValue: Word;//长时间不使用酒,减药力值 20080623
    nDesMedicineTick: Integer;//减药力值时间间隔 20080624
{$IF M2Version = 1}
    nDesAlcoholValue: Word;//长时间使用酒，减酒量
    nDesAlcoholTick: Word;//减酒量时间间隔(分)
    nDesMaxAlcoholValue: Word;//超过指定酒量时才减酒量
    boAssignmentCryst: Boolean;//启用天地结等级赋值功能
    nCRYSTALLEVEL1: Byte;//天地结晶1等级时，<$CRYSTALLEVEL>对应的值
    nCRYSTALLEVEL2: Byte;//天地结晶2等级时，<$CRYSTALLEVEL>对应的值
    nCRYSTALLEVEL3: Byte;//天地结晶3等级时，<$CRYSTALLEVEL>对应的值
    nCRYSTALLEVEL4: Byte;//天地结晶4等级时，<$CRYSTALLEVEL>对应的值
    nSkill95EffectPowerWarror: Word;//斗转星移生效伤害值(战)
    nSkill95EffectRateWarror: Byte;//斗转星移生效机率(战)
    nSkill95DecInjuryWarror: Byte;//斗转星移减伤害比例(战)

    nSkill95EffectPowerWizard: Word;//斗转星移生效伤害值(法)
    nSkill95EffectRateWizard: Byte;//斗转星移生效机率(法)
    nSkill95DecInjuryWizard: Byte;//斗转星移减伤害比例(法)

    nSkill95EffectPowerTaoist: Word;//斗转星移生效伤害值(道)
    nSkill95EffectRateTaoist: Byte;//斗转星移生效机率(道)
    nSkill95DecInjuryTaoist: Byte;//斗转星移减伤害比例(道)
    nSkill95LevelDecInjury: Byte;//斗转星移每X级减伤害比例1%

    nJingYuanValue: Word;//精元值上限
    nIncJingYuanValueTime: Word;//增加精元值间隔
    nIncTransferValueTime: LongWord;//恢复斗转值间隔
    nLianqiGold: Integer;//炼气所需金币数
    nLianqiGameGird: Integer;//强化炼气所需灵符数
    nAutoExpSkill95: Byte;//自动修炼斗转星移时，一次所得的经验，单位万
{$IFEND}
    boFairyShareMasterMP: Boolean;//月灵与主体共用蓝
    boFairyUseDBHitTime: Boolean;//月灵使用DB攻击速度 20110729
    nInFountainTime: Word;//站在泉眼上的累积时间 20080624
    nMinGuildFountain: Word;//行会酒泉蓄量少于时,不能领取 20080627
    nDecGuildFountain: Word;//行会成员领取酒泉,蓄量减少 20080627
    nHeroCrystalExpRate: Byte;//天地结晶英雄分配比例 20090202
    nUseItmeToMonRate: Byte;//攻击富贵兽触发脚本段的机率 20090518
    nMonGameGird: Word;//富贵兽初始灵符数 20090518
    boShowMonSysHint: Boolean;//富贵兽累积灵符是否提示 20090603
    nIncMonGameGird: Word;//攻击狂暴状态富贵兽累计灵符数 20090519
    nMon79CrazyRate: Byte;//富贵兽狂暴机率
    nMon79CrazyTime: Integer;//富贵兽狂暴时长
    nGetCattleGasvalue: Word;//攻击富贵兽所取得牛气值 20090519
    nAutoOpenBoxID1: Byte;//牛气管升级1级后自动打开箱子的编号 20090520
    nAutoOpenBoxID2: Byte;//牛气管升级2级后自动打开箱子的编号 20090524
    nAutoOpenBoxID3: Byte;//牛气管升级3级后自动打开箱子的编号 20090524
    nAutoOpenBoxID4: Byte;//牛气管升级4级后自动打开箱子的编号 20090524
{$IF M2Version <> 2}
    nArmsDCAddValueMaxLimit: Byte;//武器+攻最高点
    nArmsDCAddValueRate: Byte;//武器+攻点数机率
    nArmsDCAddRate: Byte;//武器+攻机率

    nArmsMCAddValueMaxLimit: Byte;//武器+魔最高点
    nArmsMCAddValueRate: Byte;//武器+魔点数机率
    nArmsMCAddRate: Byte;//武器+魔机率

    nArmsSCAddValueMaxLimit: Byte;//武器+道最高点
    nArmsSCAddValueRate: Byte;//武器+道点数机率
    nArmsSCAddRate: Byte;//武器+道机率

    nArmsMainAddValueMaxLimit: Byte;//武器+主属性最高点
    nArmsMainAddValueRate: Byte;//武器+主属性点数机率
    nArmsMainAddRate: Byte;//武器+主属性机率

    nArmsQSAddValueMaxLimit: Byte;//武器+强身最高点
    nArmsQSAddValueRate: Byte;//武器+强身点数机率
    nArmsQSAddRate: Byte;//武器+强身机率

    nArmsJMAddValueMaxLimit: Byte;//武器+聚魔最高点
    nArmsJMAddValueRate: Byte;//武器+聚魔点数机率
    nArmsJMAddRate: Byte;//武器+聚魔机率

    nArmsNSAddValueMaxLimit: Byte;//武器+内伤最高点
    nArmsNSAddValueRate: Byte;//武器+内伤点数机率
    nArmsNSAddRate: Byte;//武器+内伤机率

    nArmsBJAddValueMaxLimit: Byte;//武器+暴击最高点
    nArmsBJAddValueRate: Byte;//武器+暴击点数机率
    nArmsBJAddRate: Byte;//武器+暴击机率

    nArmsHJAddValueMaxLimit: Byte;//武器+合击最高点
    nArmsHJAddValueRate: Byte;//武器+合击点数机率
    nArmsHJAddRate: Byte;//武器+合击机率

    nArmsMBAddValueMaxLimit: Byte;//武器+麻痹最高点
    nArmsMBAddValueRate: Byte;//武器+麻痹点数机率
    nArmsMBAddRate: Byte;//武器+麻痹机率

    nArmsFBAddValueMaxLimit: Byte;//武器+防暴最高点
    nArmsFBAddValueRate: Byte;//武器+防暴点数机率
    nArmsFBAddRate: Byte;//武器+防暴机率

    nArmsZQAddValueMaxLimit: Byte;//武器+准确最高点
    nArmsZQAddValueRate: Byte;//武器+准确点数机率
    nArmsZQAddRate: Byte;//武器+准确机率

    nDreDCAddValueMaxLimit: Byte;//衣服+攻最高点
    nDreDCAddValueRate: Byte;//衣服+攻点数机率
    nDreDCAddRate: Byte;//衣服+攻机率

    nDreMCAddValueMaxLimit: Byte;//衣服+魔最高点
    nDreMCAddValueRate: Byte;//衣服+魔点数机率
    nDreMCAddRate: Byte;//衣服+魔机率

    nDreSCAddValueMaxLimit: Byte;//衣服+道最高点
    nDreSCAddValueRate: Byte;//衣服+道点数机率
    nDreSCAddRate: Byte;//衣服+道机率

    nDreMainAddValueMaxLimit: Byte;//衣服+主属性最高点
    nDreMainAddValueRate: Byte;//衣服+主属性点数机率
    nDreMainAddRate: Byte;//衣服+主属性机率

    nDreQSAddValueMaxLimit: Byte;//衣服+强身最高点
    nDreQSAddValueRate: Byte;//衣服+强身点数机率
    nDreQSAddRate: Byte;//衣服+强身机率

    nDreJMAddValueMaxLimit: Byte;//衣服+聚魔最高点
    nDreJMAddValueRate: Byte;//衣服+聚魔点数机率
    nDreJMAddRate: Byte;//衣服+聚魔机率

    nDreXXAddValueMaxLimit: Byte;//衣服+吸血最高点
    nDreXXAddValueRate: Byte;//衣服+吸血点数机率
    nDreXXAddRate: Byte;//衣服+吸血机率

    nDreBJAddValueMaxLimit: Byte;//衣服+暴击最高点
    nDreBJAddValueRate: Byte;//衣服+暴击点数机率
    nDreBJAddRate: Byte;//衣服+暴击机率

    nDreHJAddValueMaxLimit: Byte;//衣服+合击最高点
    nDreHJAddValueRate: Byte;//衣服+合击点数机率
    nDreHJAddRate: Byte;//衣服+合击机率

    nDreMBAddValueMaxLimit: Byte;//衣服+麻痹最高点
    nDreMBAddValueRate: Byte;//衣服+麻痹点数机率
    nDreMBAddRate: Byte;//衣服+麻痹机率

    nDreNLAddValueMaxLimit: Byte;//衣服+内力恢复最高点
    nDreNLAddValueRate: Byte;//衣服+内力恢复点数机率
    nDreNLAddRate: Byte;//衣服+内力恢复机率

    nDreWFAddValueMaxLimit: Byte;//衣服+物防最高点
    nDreWFAddValueRate: Byte;//衣服+物防点数机率
    nDreWFAddRate: Byte;//衣服+物防机率

    nNecklaceDCAddValueMaxLimit: Byte;//项链+攻最高点
    nNecklaceDCAddValueRate: Byte;//项链+攻点数机率
    nNecklaceDCAddRate: Byte;//项链+攻机率

    nNecklaceMCAddValueMaxLimit: Byte;//项链+魔最高点
    nNecklaceMCAddValueRate: Byte;//项链+魔点数机率
    nNecklaceMCAddRate: Byte;//项链+魔机率

    nNecklaceSCAddValueMaxLimit: Byte;//项链+道最高点
    nNecklaceSCAddValueRate: Byte;//项链+道点数机率
    nNecklaceSCAddRate: Byte;//项链+道机率

    nNecklaceMainAddValueMaxLimit: Byte;//项链+主属性最高点
    nNecklaceMainAddValueRate: Byte;//项链+主属性点数机率
    nNecklaceMainAddRate: Byte;//项链+主属性机率

    nNecklaceQSAddValueMaxLimit: Byte;//项链+强身最高点
    nNecklaceQSAddValueRate: Byte;//项链+强身点数机率
    nNecklaceQSAddRate: Byte;//项链+强身机率

    nNecklaceXXAddValueMaxLimit: Byte;//项链+吸血最高点
    nNecklaceXXAddValueRate: Byte;//项链+吸血点数机率
    nNecklaceXXAddRate: Byte;//项链+吸血机率

    nNecklaceNLAddValueMaxLimit: Byte;//项链+内力恢复最高点
    nNecklaceNLAddValueRate: Byte;//项链+内力恢复点数机率
    nNecklaceNLAddRate: Byte;//项链+内力恢复机率

    nNecklaceMFAddValueMaxLimit: Byte;//项链+魔防最高点
    nNecklaceMFAddValueRate: Byte;//项链+魔防点数机率
    nNecklaceMFAddRate: Byte;//项链+魔防机率

    nNecklaceHJAddValueMaxLimit: Byte;//项链+合击威力最高点
    nNecklaceHJAddValueRate: Byte;//项链+合击威力点数机率
    nNecklaceHJAddRate: Byte;//项链+合击威力机率

    nBraceletDCAddValueMaxLimit: Byte;//手镯+攻最高点
    nBraceletDCAddValueRate: Byte;//手镯+攻点数机率
    nBraceletDCAddRate: Byte;//手镯+攻机率

    nBraceletMCAddValueMaxLimit: Byte;//手镯+魔最高点
    nBraceletMCAddValueRate: Byte;//手镯+魔点数机率
    nBraceletMCAddRate: Byte;//手镯+魔机率

    nBraceletSCAddValueMaxLimit: Byte;//手镯+道最高点
    nBraceletSCAddValueRate: Byte;//手镯+道点数机率
    nBraceletSCAddRate: Byte;//手镯+道机率

    nBraceletMainAddValueMaxLimit: Byte;//手镯+主属性最高点
    nBraceletMainAddValueRate: Byte;//手镯+主属性点数机率
    nBraceletMainAddRate: Byte;//手镯+主属性机率

    nBraceletQSAddValueMaxLimit: Byte;//手镯+强身最高点
    nBraceletQSAddValueRate: Byte;//手镯+强身点数机率
    nBraceletQSAddRate: Byte;//手镯+强身机率

    nBraceletXXAddValueMaxLimit: Byte;//手镯+吸血最高点
    nBraceletXXAddValueRate: Byte;//手镯+吸血点数机率
    nBraceletXXAddRate: Byte;//手镯+吸血机率

    nBraceletNLAddValueMaxLimit: Byte;//手镯+内力恢复最高点
    nBraceletNLAddValueRate: Byte;//手镯+内力恢复点数机率
    nBraceletNLAddRate: Byte;//手镯+内力恢复机率

    nBraceletMFAddValueMaxLimit: Byte;//手镯+魔防最高点
    nBraceletMFAddValueRate: Byte;//手镯+魔防点数机率
    nBraceletMFAddRate: Byte;//手镯+魔防机率

    nBraceletHJAddValueMaxLimit: Byte;//手镯+合击威力最高点
    nBraceletHJAddValueRate: Byte;//手镯+合击威力点数机率
    nBraceletHJAddRate: Byte;//手镯+合击威力机率

    nRingDCAddValueMaxLimit: Byte;//戒指+攻最高点
    nRingDCAddValueRate: Byte;//戒指+攻点数机率
    nRingDCAddRate: Byte;//戒指+攻机率

    nRingMCAddValueMaxLimit: Byte;//戒指+魔最高点
    nRingMCAddValueRate: Byte;//戒指+魔点数机率
    nRingMCAddRate: Byte;//戒指+魔机率

    nRingSCAddValueMaxLimit: Byte;//戒指+道最高点
    nRingSCAddValueRate: Byte;//戒指+道点数机率
    nRingSCAddRate: Byte;//戒指+道机率

    nRingMainAddValueMaxLimit: Byte;//戒指+主属性最高点
    nRingMainAddValueRate: Byte;//戒指+主属性点数机率
    nRingMainAddRate: Byte;//戒指+主属性机率

    nRingQSAddValueMaxLimit: Byte;//戒指+强身最高点
    nRingQSAddValueRate: Byte;//戒指+强身点数机率
    nRingQSAddRate: Byte;//戒指+强身点机率

    nRingJMAddValueMaxLimit: Byte;//戒指+聚魔最高点
    nRingJMAddValueRate: Byte;//戒指+聚魔点数机率
    nRingJMAddRate: Byte;//戒指+聚魔机率

    nRingXXAddValueMaxLimit: Byte;//戒指+吸血最高点
    nRingXXAddValueRate: Byte;//戒指+吸血点数机率
    nRingXXAddRate: Byte;//戒指+吸血机率

    nRingFBAddValueMaxLimit: Byte;//戒指+防爆最高点
    nRingFBAddValueRate: Byte;//戒指+防爆点数机率
    nRingFBAddRate: Byte;//戒指+防爆机率

    nRingHJAddValueMaxLimit: Byte;//戒指+合击威力最高点
    nRingHJAddValueRate: Byte;//戒指+合击威力点数机率
    nRingHJAddRate: Byte;//戒指+合击威力机率

    nRingMBAddValueMaxLimit: Byte;//戒指+麻痹最高点
    nRingMBAddValueRate: Byte;//戒指+麻痹点数机率
    nRingMBAddRate: Byte;//戒指+麻痹机率

    nRingNLAddValueMaxLimit: Byte;//戒指+内力恢复最高点
    nRingNLAddValueRate: Byte;//戒指+内力恢复点数机率
    nRingNLAddRate: Byte;//戒指+内力恢复机率

    nRingWFAddValueMaxLimit: Byte;//戒指+物防最高点
    nRingWFAddValueRate: Byte;//戒指+物防点数机率
    nRingWFAddRate: Byte;//戒指+物防机率

    nHelmeDCAddValueMaxLimit: Byte;//头盔+攻最高点
    nHelmeDCAddValueRate: Byte;//头盔+攻点数机率
    nHelmeDCAddRate: Byte;//头盔+攻机率

    nHelmeMCAddValueMaxLimit: Byte;//头盔+魔最高点
    nHelmeMCAddValueRate: Byte;//头盔+魔点数机率
    nHelmeMCAddRate: Byte;//头盔+魔机率

    nHelmeSCAddValueMaxLimit: Byte;//头盔+道最高点
    nHelmeSCAddValueRate: Byte;//头盔+道点数机率
    nHelmeSCAddRate: Byte;//头盔+道机率

    nHelmeMainAddValueMaxLimit: Byte;//头盔+主属性最高点
    nHelmeMainAddValueRate: Byte;//头盔+主属性点数机率
    nHelmeMainAddRate: Byte;//头盔+主属性机率

    nHelmeQSAddValueMaxLimit: Byte;//头盔+强身最高点
    nHelmeQSAddValueRate: Byte;//头盔+强身点数机率
    nHelmeQSAddRate: Byte;//头盔+强身点机率

    nHelmeXXAddValueMaxLimit: Byte;//头盔+吸血最高点
    nHelmeXXAddValueRate: Byte;//头盔+吸血点数机率
    nHelmeXXAddRate: Byte;//头盔+吸血机率

    nHelmeHJAddValueMaxLimit: Byte;//头盔+合击威力最高点
    nHelmeHJAddValueRate: Byte;//头盔+合击威力点数机率
    nHelmeHJAddRate: Byte;//头盔+合击威力机率

    nShoesDCAddValueMaxLimit: Byte;//鞋子+攻最高点
    nShoesDCAddValueRate: Byte;//鞋子+攻点数机率
    nShoesDCAddRate: Byte;//鞋子+攻机率

    nShoesMCAddValueMaxLimit: Byte;//鞋子+魔最高点
    nShoesMCAddValueRate: Byte;//鞋子+魔点数机率
    nShoesMCAddRate: Byte;//鞋子+魔机率

    nShoesSCAddValueMaxLimit: Byte;//鞋子+道最高点
    nShoesSCAddValueRate: Byte;//鞋子+道点数机率
    nShoesSCAddRate: Byte;//鞋子+道机率

    nShoesMainAddValueMaxLimit: Byte;//鞋子+主属性最高点
    nShoesMainAddValueRate: Byte;//鞋子+主属性点数机率
    nShoesMainAddRate: Byte;//鞋子+主属性机率

    nShoesQSAddValueMaxLimit: Byte;//鞋子+强身最高点
    nShoesQSAddValueRate: Byte;//鞋子+强身点数机率
    nShoesQSAddRate: Byte;//鞋子+强身点机率

    nShoesJMAddValueMaxLimit: Byte;//鞋子+聚魔最高点
    nShoesJMAddValueRate: Byte;//鞋子+聚魔点数机率
    nShoesJMAddRate: Byte;//鞋子+聚魔机率

    nShoesHJAddValueMaxLimit: Byte;//鞋子+合击威力最高点
    nShoesHJAddValueRate: Byte;//鞋子+合击威力点数机率
    nShoesHJAddRate: Byte;//鞋子+合击威力机率

    nMedalDCAddValueMaxLimit: Byte;//勋章+攻最高点
    nMedalDCAddValueRate: Byte;//勋章+攻点数机率
    nMedalDCAddRate: Byte;//勋章+攻机率

    nMedalMCAddValueMaxLimit: Byte;//勋章+魔最高点
    nMedalMCAddValueRate: Byte;//勋章+魔点数机率
    nMedalMCAddRate: Byte;//勋章+魔机率

    nMedalSCAddValueMaxLimit: Byte;//勋章+道最高点
    nMedalSCAddValueRate: Byte;//勋章+道点数机率
    nMedalSCAddRate: Byte;//勋章+道机率

    nMedalMainAddValueMaxLimit: Byte;//勋章+主属性最高点
    nMedalMainAddValueRate: Byte;//勋章+主属性点数机率
    nMedalMainAddRate: Byte;//勋章+主属性机率

    nMedalQSAddValueMaxLimit: Byte;//勋章+强身等级最高点
    nMedalQSAddValueRate: Byte;//勋章+强身等级点数机率
    nMedalQSAddRate: Byte;//勋章+强身等级机率

    nMedalJMAddValueMaxLimit: Byte;//勋章+聚魔最高点
    nMedalJMAddValueRate: Byte;//勋章+聚魔点数机率
    nMedalJMAddRate: Byte;//勋章+聚魔机率

    nMedalFBAddValueMaxLimit: Byte;//勋章+防爆最高点
    nMedalFBAddValueRate: Byte;//勋章+防爆点数机率
    nMedalFBAddRate: Byte;//勋章+防爆机率

    nMedalBJAddValueMaxLimit: Byte;//勋章+暴击最高点
    nMedalBJAddValueRate: Byte;//勋章+暴击点数机率
    nMedalBJAddRate: Byte;//勋章+暴击机率

    nMedalHJAddValueMaxLimit: Byte;//勋章+合击威力最高点
    nMedalHJAddValueRate: Byte;//勋章+合击威力点数机率
    nMedalHJAddRate: Byte;//勋章+合击威力机率

    nMedalMBAddValueMaxLimit: Byte;//勋章+麻痹抗性最高点
    nMedalMBAddValueRate: Byte;//勋章+麻痹抗性点数机率
    nMedalMBAddRate: Byte;//勋章+麻痹抗性机率

    nMedalNLAddValueMaxLimit: Byte;//勋章+内力恢复最高点
    nMedalNLAddValueRate: Byte;//勋章+内力恢复点数机率
    nMedalNLAddRate: Byte;//勋章+内力恢复机率

    nMedalNSAddValueMaxLimit: Byte;//勋章+内伤等级最高点
    nMedalNSAddValueRate: Byte;//勋章+内伤等级点数机率
    nMedalNSAddRate: Byte;//勋章+内伤等级机率

    nMysteryAddValueMaxLimit: Byte;//神秘属性最高点
    nMysteryAddValueRate: Byte;//神秘属性点数机率
    nMysteryAddRate: Byte;//神秘属性机率

    nReadRate:array[1..4] of Word;//解读属性机率
    nRebirthRate: Word;//重生技能机率
    nMagicShieldRate: Word;//八卦护身技能机率
    nParalysisRate: Word;//麻痹技能机率
    nParalysis2Rate: Word;//魔道麻痹技能机率
    nParalysis1Rate: Word;//战意麻痹技能机率
    nProbeNecklaceRate: Word;//探测技能机率
    nTeleportRate: Word;//传送技能机率
    nSpiritMediaAddValueRate: Byte;//宝物灵媒点数机率
    nSpiritMediaAddRate: Byte;//宝物灵媒机率
    nMaxAuraValue: Byte;//属性灵气值上限
    nFindJewelRave: Byte;//使用灵媒探索宝物成功率
    nDigJewelHitRate: Byte;//挖宝命中机率
    nGetDigJewelRave: Byte;//得宝机率
    nDecDigJewelDuraRate: Word;//得宝减装备品质机率
    boUseCanKamPo: Boolean;//是否开启鉴定系统
    boOffLineEnergy: Boolean;//禁止挂机增加精力值
    nEnergyValueTime: Word;//增加精力值间隔
    nJudgePrice: Integer;//品评价格
    boJudgeUseGold: Boolean;//品评价使用金币
    nMakeScrollRate:array[1..4] of Byte;//制造神秘卷轴机率
    nAdvancedKamPo: Word;//高级鉴定成功机率
    sDreReplaceMan: string;//衣服(男)替换
    sDreReplaceWoman: string;//衣服(女)替换
    sArmsReplace: string;//武器替换
    sNecklaceReplace: string;//项链替换
    sBraceletReplace: string;//手镯替换
    sRingReplace: string;//戒指替换
    sHelmeReplace: string;//头盔替换
    sBeltReplace: string;//腰带替换
    sShoesReplace: string;//鞋子替换
    sHatsReplace: string;//斗笠替换
    sWashclothReplace: string;//面巾替换
    sMedalReplace: string;//勋章替换
{$IFEND}
    dwNewKamPoLockNeed1 : DWord;//新鉴定锁定属性需要的材料数量By TasNat at: 2012-04-13 15:02:17
    dwNewKamPoLockNeed2 : DWord;
    dwNewKamPoNeed1 : DWord;//新鉴定需要的材料数量By TasNat at: 2012-04-13 15:02:17
    dwNewKamPoNeed2 : DWord;
    boPullPlayObject: Boolean;
    boPlayObjectReduceMP: Boolean;//打中目标，目标是否掉蓝
    boGroupMbAttackSlave: Boolean;
    nBigStorageLimitCount: Word{Integer};//无限仓库物品上限
    boDropGoldToPlayBag: Boolean; //金币入包
    boChangeUseItemNameByPlayName: Boolean;
    sChangeUseItemName: string;
    boUseFixExp: Boolean;//达到1000后是否使用引擎经验
    nBaseExp: Integer;
    nAddExp: Integer;
    boMagFirNoneSSMagic : Boolean;
    nKill55UseTime: Byte;//擒龙手使用间隔
    nKill43UseTime: Byte;//开天斩使用间隔(100) 20080504
    nDedingUseTime: Byte{Integer};//彻地钉使用间隔(100) 20080504
    nAbilityUpTick: Byte;//无极真气使用间隔 20080603
    boAbilityUpFixMode: Boolean;//无极真气使用时长模式 20081109
    boAbilityAddMode: Boolean;//无极真气是否同时增加上下限
    boDecSuitItemMode: Boolean;//无极真气不考虑套装所增加的道术
    boDecMag105SC : Boolean;//无极真气不考虑心法所增加的道术 By TasNat at: 2012-03-06 16:17:20
    nAbilityUpFixUseTime: Byte;//无极真气使用固定时长 20081109
    nAbilityUpUseTime: Byte;//无极真气使用时长 20080603
    nMinDrinkValue67: Byte;//先天元力失效酒量下限比例 20080626
    nMinDrinkValue68: Byte;//酒气护体失效酒量下限比例 20080626
    nHPUpTick: Byte;//酒气护体使用间隔 20080625
    nHPUpUseTime: Byte;//酒气护体增加使用时长 20080625
    boMon109AutoTrun: Boolean;//押镖怪遇目标挡路自动转向
    boMon109ShowHint: Boolean;//押镖怪提示开启
    nShowHintMon109: Word;//押镖怪提示时长

    nLimitItemTime: Byte;//限时绑定时长

    boDedingAllowPK: Boolean;
    boRegenMonsters: Boolean;

    nMakeSelfTick: Integer;//分身使用时长 20080404
    nCopyHumanTick: Integer;//召唤分身的间隔 20080204
    nCopyHumanBagCount: Integer;
    nCopyHumNameColor: Byte;//分身名字颜色 20080404
    nAllowCopyHumanCount: Integer;
    boAttackMasterTarget: Boolean;//分身与主体攻击同一目标 20100408
    boAddMasterName: Boolean;
    sCopyHumName: string;
    nCopyHumAddHPRate: Byte;//分身HP达到百分率开始吃药(100) 20080504
    nCopyHumAddMPRate: Byte;//分身MP达到百分率开始吃药(100) 20080504
    sCopyHumBagItems1: string;
    sCopyHumBagItems2: string;
    sCopyHumBagItems3: string;
    boAllowGuardAttack: Boolean;

    dwWarrorAttackTime: LongWord;
    dwWizardAttackTime: LongWord;
    dwTaoistAttackTime: LongWord;
    boAllowReCallMobOtherHum: Boolean;
    boNeedLevelHighTarget: Boolean;

    dwGetDBSockMsgTime: LongWord;//等待DBS返回消息的时间
    boPullCrossInSafeZone: Boolean;
    boHighLevelGroupFixExp: Boolean;
    boStartMapEvent: Boolean;
    boStartRevivalTick: Boolean;//是否登陆时初始复活计数 20100704
    boStartRebirthTick: Boolean;//是否登陆时初始重生戒指计数 20100720
    boUnderWarMove: Boolean;//攻城期复活传送回攻方复活点
    boUseNewAttackFFT_96: Boolean;//是否使用新算法计算血魄技能威力 20100704
    boUnKnowHum: Boolean;//带上斗笠是否显示神秘人 20080424
    boOneRingXiXue : Boolean;
    boSaveExpRate:Boolean;//是否保存双倍经验时间 20080412
    boSaveHighLevelKillMonFixExp:Boolean;//是否保存真视经验时间 20090213
    boContinuousUpLevel: Boolean;//是否使用连续升级

    nLimitExpLevel: Word;//限制等级 20080503
    nLimitExpLevelHero: Word;//限制英雄等级 20110113
    nLimitExpValue: uInt64;

    boChangeMapFireExtinguish: Boolean;
    nFireDelayTimeRate: Word;//火墙有效时间倍数 20080504
    nFirePowerRate: Word;//火墙威力倍数 20080504
    nFireMaxTime: Word;//火墙最大时间 By TasNat at: 2012-03-17 13:56:36
    nDidingPowerRate: Word;//彻地钉威力倍数(10000) 20080504

    nStrength1DecGold: Word;//低强度减金币
    nStrength1DecGameGird: Word;//低强度减灵符
    nStrength1Exp:Word;//低强度每秒经验
    nStrength2DecGold: Word;//中强度减金币
    nStrength2DecGameGird: Word;//中强度减灵符
    nStrength2Exp:Word;//中强度每秒经验
    nStrength3DecGold: Word;//高强度减金币
    nStrength3DecGameGird: Word;//高强度减灵符
    nStrength3Exp:Word;//高强度每秒经验
    boUseCanHero: Boolean;//是否开放英雄系统
    boUseCanDivision: Boolean;//是否开放师门系统

    nHeroProtectLevel: Word;//英雄守护需等级
    nHeroStartLevel: Word{Integer};//20080504
    nDrinkHeroStartLevel: Word;//卧龙英雄开始等级 20080514
    nHeroKillMonExpRate: Byte;//20080504
    nHeroNoKillMonExpRate: Byte;//20080803 非杀怪分配经验比例
    nHeroBagItemCount: array[0..4] of Word;  //20080129 修改英雄包裹数
    dwHeroWarrorAttackTime: LongWord;//战士英雄的攻击速度
    dwHeroWizardAttackTime: LongWord;//法师英雄的攻击速度
    dwHeroTaoistAttackTime: LongWord;//道士英雄的攻击速度

    boHeroKillByMonstDropUseItem: Boolean;
    boHeroKillByHumanDropUseItem: Boolean;
    boHeroDieScatterBag: Boolean;

    boHeroNoTargetCall: Boolean;//英雄无目标下可召唤宝宝 20080615
    boHeroDieExp: Boolean;//英雄死亡掉经验 20080605
    nHeroDieExpRate: Word;//英雄死亡掉经验比率 20080605
    boHeroDieRedScatterBagAll: Boolean;
    nHeroDieDropUseItemRate: Word{Integer};
    nHeroDieRedDropUseItemRate: Byte{Integer};
    nHeroDieScatterBagRate: Word{Integer};

    boAutoHeroUseEat: Boolean;//英雄自动吃药
    nHeroAddHPRate: Byte;
    nHeroAddMPRate: Byte;
    nHeroAddHPMPTick:LongWord;//战普通药速度
    nHeroAddHPRate1: Byte;
    nHeroAddMPRate1: Byte;
    nHeroAddHPMPTick1:LongWord;//战特殊药速度
    nHeroAddHPMPTickA:LongWord;//道法普通药速度
    nHeroAddHPMPTickB:LongWord;//道法特殊药速度
{$IF M2Version <> 2}
    nSKILL_7Strong: array[0..8] of Byte;//强化攻杀剑术所需心法等级
    nSKILL_90Strong: array[0..8] of Byte;//强化圆月弯刀所需心法等级
    nSKILL_89Strong: array[0..8] of Byte;//强化刺杀剑术所需心法等级
    nSKILL_26Strong: array[0..8] of Byte;//强化烈火剑法所需心法等级
    nSKILL_74Strong: array[0..8] of Byte;//强化逐日剑法所需心法等级

    nSKILL_91Strong: array[0..8] of Byte;//强化雷电术所需心法等级
    nSKILL_10Strong: array[0..8] of Byte;//强化疾光电影所需心法等级
    nSKILL_22Strong: array[0..8] of Byte;//强化火墙所需心法等级
    nSKILL_45Strong: array[0..8] of Byte;//强化灭天火所需心法等级
    nSKILL_92Strong: array[0..8] of Byte;//强化流星火雨所需心法等级

    nSKILL_93Strong: array[0..8] of Byte;//强化施毒术所需心法等级
    nSKILL_13Strong: array[0..8] of Byte;//强化灵魂火符所需心法等级
    nSKILL_17Strong: array[0..8] of Byte;//强化召唤骷髅所需心法等级
    nSKILL_71Strong: array[0..8] of Byte;//强化召唤圣兽所需心法等级
    nSKILL_94Strong: array[0..8] of Byte;//强化噬血术所需心法等级

    nSKILL_FIREBOOMStrong: array[0..8] of Byte;//强化爆裂火焰所需心法等级
    nSKILL_SNOWWINDStrong: array[0..8] of Byte;//强化冰咆哮所需心法等级
    nSKILL_HANGMAJINBUBStrong: array[0..8] of Byte;//强化幽灵盾所需心法等级
    nSKILL_DEJIWONHOStrong: array[0..8] of Byte;//强化神圣战甲术所需心法等级

    nSKILL_107NeedHeart: array[0..8] of Byte;//纵横剑术升级所需心法等级
    nSKILL_108NeedHeart: array[0..8] of Byte;//冰霜雪雨升级所需心法等级
    nSKILL_109NeedHeart: array[0..8] of Byte;//裂神符升级所需心法等级

    nSKILLStrongRate: array[0..16] of Byte;//强化技能威力比例
    nUpHeartNeedLevel: array[0..8] of Word;//升级传承心法所需要的等级条件

    nMemberUseHeartTime:Word;//弟子心法激活可用时长
    nActivMemberHeartRate:Byte;//激活弟子心法(255为不激活)
    nHeartArrValueRate: Byte;//心法增加属性比例
    nHeartIncDamageRate: Byte;//心法压制增加伤害比例
    nDivisionSavvyRate:Byte;//触发领悟脚本段@Savvy机率
    nPublicHeartLevel: Byte;//公共心法传承等级
    nSavvyHeartNeedLevel: Word;//领悟心法所需等级
    nActivHeartNH: Word;//激活心法所需内力值
    nIncHeartPointNeedExp: Int64;//吸收心法经验所需经验
    boHeratPowerNeed: Boolean;//神圣属性需龙卫状态下生效
    boHeratPowerNeed2: Boolean;//心法技能在龙卫状态下生效
    nKill69UseTime: Word;//倚天辟地使用间隔(100)
    nKill102UseTime: Word;//唯我独尊使用间隔
    nSill102TargetDecACTime: Byte;//3级唯我独尊目标减防时长
    nSkill101Point: Word;//神龙附体威力
    nKill101UseTime: Word;//神龙附体使用间隔(45)
    nKill101UseLogTime: Word;//神龙附体持续时长(6)
    nHeartSkilltime: Word;//主动神技使用间隔(180)
    nMagicAttackRage_107: Byte;//纵横剑术范围
    boMag113LockCanFly : Boolean;//被天雷乱舞禁锢允许飞走
    sNGStrongItem: string;//内功技能强化所需物品
    nNGSkillMaxLevel: Byte;//强化内功技能最高等级
    nSKILL_200NGStrong: array[0..3] of Byte;//怒之攻杀强化
    nSkill_202NGStrong: array[0..3] of Byte;//怒之半月强化
    nSkill_236NGStrong: array[0..3] of Byte;//怒之内功剑法强化
    nSkill_204NGStrong: array[0..3] of Byte;//怒之烈火强化
    nSkill_206NGStrong: array[0..3] of Byte;//怒之逐日强化
    nSkill_239NGStrong: array[0..3] of Byte;//怒之施毒术强化
    nSkill_230NGStrong: array[0..3] of Byte;//怒之火符强化
    nSkill_232NGStrong: array[0..3] of Byte;//怒之噬血强化
    nSkill_241NGStrong: array[0..3] of Byte;//怒之月灵强化
    nSkill_228NGStrong: array[0..3] of Byte;//怒之灭天火强化
    nSkill_234NGStrong: array[0..3] of Byte;//怒之流星火雨强化

    nSkill_208NGStrong: array[0..3] of Byte;//怒之火球强化
    nSkill_214NGStrong: array[0..3] of Byte;//怒之地狱火强化
    nSkill_218NGStrong: array[0..3] of Byte;//怒之爆裂火焰强化
    nSkill_222NGStrong: array[0..3] of Byte;//怒之雷电强化
    nSkill_210NGStrong: array[0..3] of Byte;//怒之大火球强化
    nSkill_212NGStrong: array[0..3] of Byte;//怒之火墙强化
    nSkill_216NGStrong: array[0..3] of Byte;//怒之疾光电影强化
    nSkill_224NGStrong: array[0..3] of Byte;//怒之地狱雷光强化
    nSkill_226NGStrong: array[0..3] of Byte;//怒之寒冰掌强化
    nSkill_220NGStrong: array[0..3] of Byte;//怒之冰咆哮强化
{$IFEND}
    nKill42UseTime: Byte;//龙影剑法使用间隔(100) 20080619
    nAttackRate_42: Word{Integer};//龙影剑法威力 20080504
    nMagicAttackRage_42: Byte{Integer};//龙影剑法范围 20080504

    nMaxFirDragonPoint: Word{Integer};//怒气槽最大值
    nAddFirDragonPoint: Word{Integer};//每次加怒气值
    nDecFirDragonPoint: Word{Integer};//每次减怒气值
    nIncDragonPointTick: LongWord;//加怒气时间间隔 20080606
    nHeroSkill46MaxHP_0: Byte;//0级 英雄召唤分身HP的比率 20080907
    nHeroSkill46MaxHP_1: Byte;//1级 英雄召唤分身HP的比率 20081217
    nHeroSkill46MaxHP_2: Byte;//2级 英雄召唤分身HP的比率 20081217
    nHeroSkill46MaxHP_3: Byte;//3级 英雄召唤分身HP的比率 20081217
    nHeroMakeSelfTick: Word;//英雄分身0级使用时间 20081217
    nHeroMakeSelfTick1: Word;//英雄分身1级使用时间 20090817
    nHeroMakeSelfTick2: Word;//英雄分身1级使用时间 20090817
    nHeroMakeSelfTick3: Word;//英雄分身1级使用时间 20090817
    nDecDragonHitPoint: Byte;//饮酒减少合击伤害 20080626
    nDecDragonRate: Byte;//合击对人物的伤害比例 20080803
    n4SKillDecNHRate: Byte;//四级合击减目标内力值比例 20100719
    n4SKillDecMPRate: Byte;//四级合击减目标MP值比例 20100719
    nHeroAttackRate_60: Word{Integer};//破魂斩威力 20080131
    nHeroAttackRate_61: Word{Integer};//劈星斩威力 20080131
    nHeroAttackRate_62: Word{Integer};//雷霆一击威力 20080131
    nHeroAttackRate_63: Word{Integer};//噬魂沼泽威力 20080131
    nHeroAttackRate_64: Word{Integer};//末日审判威力 20080131
    nHeroAttackRate_65: Word{Integer};//火龙气焰威力 20080131
    btHeroSkillMode_63: Boolean;//噬魂沼泽使用绿毒模式 20080911

    dwHeroUseBatterTick: Word;//英雄连击间隔 20091027
    dwKillMonHeroPulsExpMultiple: Word; //杀怪英雄经络修炼经验倍数
    nMakeGhostHeroTime:LongWord;//英雄尸体清理时间 20080418
    nRecallHeroTime:LongWord;//召唤英雄间隔 20071201
    nRecallDeputyHeroTime:LongWord;//召唤副将英雄间隔

    sHeroClothsMan: string;
    sHeroClothsWoman: string;
    sHeroWoodenSword: string;
    sHeroBasicDrug: string;

    dwDoCallTrollTick: Word;
    dwDoCallTrollTime: Word;
    nExplosion_97Range: Byte;//血魄一击(法)范围
    nExplosion_98Range: Byte;//血魄一击(道)范围
    dwUseBloodSoulTick: LongWord;//使用血魄一击间隔
    nBloodSoulHitRate: Word;//血魄一击暴击倍数
    dwBloodSoulRate: Byte;//血魄一击暴击机率
    dwNotGNDecHPRate: Byte;//无内力值减血比例

    dwBatterDecDamageRate: Byte;//道法固定的吸伤比例 20090808
    dwBatterRandDecDamageRate: Byte;//道法随机的吸伤比例 20090808
    dwUseBatterTick: LongWord;//使用连击间隔 20090618
    nStormsHitRate: array[1..5] of Word;//暴击伤害倍数 20090618
    nStormsHitAppearRate: array[0..4] of Byte;//暴击率 20090619
    nBatterSkillFireRange_82: Byte;//断岳斩攻击范围 20090706
    nBatterSkillFireRange_85: Byte;//横扫千军攻击范围 20090704
    nBatterSkillFireRange_86: Byte;//冰天雪地攻击范围 20090626
    nBatterSkillPoinson_86: Word;//冰天雪地持续掉血点数 20090727
    nBatterSkillFireRange_87: Byte;//万剑归宗攻击范围 20090626
    nBatterSkillPoinson_87: Word;//万剑归宗持续掉血点数 20090727
    nPoisonLength_87: Byte;//万剑归宗中毒时长
    dwMagChangXYTick: LongWord;//移行换位使用间隔 20080616

    nProtectionRate: Byte;//护体神盾减攻击百分比 20080504
    nProtectionOKRate: Byte;//护体神盾生效机率 20080929
    boUseNGItemIncExp: Boolean;//使用内功物品按等级增加额外经验
    boAutoCanHit: Boolean;//火符智能锁定 20080418
    boAutoCanHit59: Boolean;//噬血术智能锁定 20090521
    boAutoCanHit45: Boolean;//灭天火智能锁定
    boSlaveMoveMaster: Boolean;//宝宝是否飞到主人身边 20080713
    boMagLock : Boolean;
    nDeputyHeroExpRate: Word;//副将英雄经验倍数
    nHeroHPRate: Word;//战英雄HP为人物的倍数 20081219
    nHeroHPRate1: Word;//法英雄HP为人物的倍数 20090207
    nHeroHPRate2: Word;//道英雄HP为人物的倍数 20090207
    nDeathDecLoyal: Word{Integer};//死亡减少忠诚度 20080110
    nPKDecLoyal: Word{Integer};//PK值减少忠诚度 20080214
    nGuildIncLoyal: Word{Integer};//行会战增加忠诚度 20080214
    //nLevelOrderIncLoyal: Word{Integer};//人物等级排名上升增加忠诚度 20080214
    //nLevelOrderDecLoyal: Word{Integer};//人物等级排名下降减少忠诚度 20080214
    nWinExp:Integer;//获得经验->忠诚度 20080110
    nExpAddLoyal: Word{Integer};//经验加忠诚 20080110
    nGotoLV4: Word{Integer};//四级触发 20080110
    nPowerLV4:Byte{Integer};//四级技能杀伤力增加值 20080112
    dwHeroRunIntervalTime1: LongWord;//道法英雄移动间隔
    dwHeroRunIntervalTime: LongWord;//英雄跑步间隔 20090207
    dwHeroWalkIntervalTime: LongWord;//英雄走路间隔 20080213
    dwHeroTurnIntervalTime: LongWord;//英雄转向间隔 20080213
    dwHeroMagicHitIntervalTime: LongWord;//英雄魔法间隔 20080524
    btHeroSkillMode: Boolean;//英雄施毒术使用模式 20080604
    btHeroSkillMode50: Boolean;//英雄无极真气使用模式 20080827
    btHeroSkillMode46: Boolean;//英雄分身术模式 20081029
    btHeroSkillMode43: Boolean;//英雄开天斩重击模式 20081221
    nHeroSkill43HPRate: Byte;//英雄开天斩HP触发条件 20090213
//-----------------气血石相关配置----------------------------
    {$IF M2Version <> 2}
    nStartHPRock: Word;
    nRockAddHP: Byte;
    nHPRockSpell: LongWord;
    nHPRockDecDura: Integer;
    nStartMPRock: Word;
    nRockAddMP: Byte;
    nMPRockSpell: LongWord;
    nMPRockDecDura: Integer;
    nStartHPMPRock: Word;
    nRockAddHPMP: Byte;
    nHPMPRockSpell: LongWord;
    nHPMPRockDecDura: Integer;
    nStartHPMPRock1: Word;
    nRockAddHPMP1: Byte;
    nHPMPRockSpell1: LongWord;
    nHPMPRockDecDura1: Integer;
    {$IFEND}
    boCanBuyShopItemGive: Boolean;//是否允许赠送 By TasNat at: 2012-03-17 10:34:20
    g_boShopGamePoint: Boolean;//商铺使用游戏点购买
    g_boGameGird: Boolean;//开启兑换灵符功能
    g_nGameGold : Integer; //兑换灵符,元宝数量
    g_boCanShop: Boolean;//开启商铺功能 20100630
    g_boShopUseGold: Boolean;
    sAIHomeMap: string;
    nAIHomeX: Integer;
    nAIHomeY: Integer;
    boHPAutoMoveMap: Boolean;//低血回城
    boAutoRepairItem: Boolean;
    boAutoPickUpItem: Boolean;
    boRenewHealth: Boolean;
    nRenewPercent: Integer;
    nAIRunIntervalTime: Word;
    nAIWalkIntervalTime: Word;
    nAIWarrorAttackTime: Word;
    nAIWizardAttackTime: Word;
    nAITaoistAttackTime: Word;
    sAIConfigListFileName: string;
    sHeroAIConfigListFileName: String;
  end;

  TGameCommand = record
      Data,
      PRVMSG,
      ALLOWMSG,
      ReadMasterMsg,//允许收徒 20090209
      MarryMsg,//允许求婚
      LETSHOUT,
      BANGMMSG,//拒绝所有喊话信息 20080211
      LETTRADE,
      LETGUILD,
      ENDGUILD,
      BANGUILDCHAT,
      AUTHALLY,
      AUTH,
      AUTHCANCEL,
      //DIARY,//未使用 20080823
      USERMOVE,
      SEARCHING,
      ALLOWGROUPCALL,
      GROUPRECALLL,
      ALLOWGUILDRECALL,
      GUILDRECALLL,
      UNLOCKSTORAGE,
      UnLock,
      Lock,
      PASSWORDLOCK,
      SETPASSWORD,
      CHGPASSWORD,
      CLRPASSWORD,
      UNPASSWORD,
      MEMBERFUNCTION,
      MEMBERFUNCTIONEX,
      DEAR,
      ALLOWDEARRCALL,
      DEARRECALL,//夫妻传送
      MASTER,
      ALLOWMASTERRECALL,
      MASTERECALL,
      ATTACKMODE,
      REST,
      TAKEONHORSE,
      TAKEOFHORSE,
      HUMANLOCAL,
      Move,
      POSITIONMOVE,
      INFO,
      MOBLEVEL,
      MOBCOUNT,
      HUMANCOUNT,
      Map,
      KICK,
      TING,
      SUPERTING,
      MAPMOVE,
      SHUTUP,
      RELEASESHUTUP,
      SHUTUPLIST,
      GAMEMASTER,
      OBSERVER,
      SUEPRMAN,
      Level,
      SABUKWALLGOLD,
      RECALL,
      REGOTO,
      SHOWFLAG,
      //SHOWOPEN,//20080812 注释
      //SHOWUNIT,//20080812 注释
      //Attack,//20080812 注释
      MOB,
      MOBNPC,
      DELNPC,
      NPCSCRIPT,
      RECALLMOB,
      RECALLMOBEX,//20080122 召唤宝宝
      GIVEMINE,//20080403 给指定纯度的矿石
      MOVEMOBTO,//将指定坐标的怪物移动到新坐标 20080123
      CLEARITEMMAP,//清除地图物品 20080124
      LUCKYPOINT,
      LOTTERYTICKET,
      RELOADGUILD,
      RELOADLINENOTICE,
      RELOADABUSE,
      BACKSTEP,
      //BALL,//20080812 注释
      FREEPENALTY,
      PKPOINT,
      IncPkPoint,
      //CHANGELUCK,//20080812 注释
      HUNGER,
      HAIR,
      TRAINING,
      DELETESKILL,
      CHANGEJOB,
      CHANGEGENDER,
      //NAMECOLOR,//20080812 注释
      Mission,
      MobPlace,
      //TRANSPARECY,//20080812 注释
      DELETEITEM,
      //LEVEL0,//20080812 注释
      CLEARMISSION,
      SETFLAG,
      //SETOPEN,//20080812 注释
      //SETUNIT,//20080812 注释
      RECONNECTION,
      DISABLEFILTER,
      CHGUSERFULL,
      CHGZENFASTSTEP,
      CONTESTPOINT,
      STARTCONTEST,
      ENDCONTEST,
      ANNOUNCEMENT,
      //OXQUIZROOM,//20080812 注释
      //GSA,//20080812 注释
      CHANGEITEMNAME,
      DISABLESENDMSG,
      ENABLESENDMSG,
      DISABLESENDMSGLIST,
      KILL,
      MAKE,
      SMAKE,
      BonusPoint,
      DELBONUSPOINT,
      RESTBONUSPOINT,
      FIREBURN,
      TESTFIRE,
      TESTSTATUS,
      DELGOLD,
      ADDGOLD,
      DELGAMEGOLD,//删除游戏币
      ADDGAMEGOLD,//增加游戏币
      GAMEGOLD,//调整游戏币
      GAMEDIAMOND,//调整金刚石数量 20071226
      GAMEGIRD,//调整灵符数量 20071226
      GAMEGLORY, //调整荣誉数量 20080511
      HEROLOYAL,//调整英雄的忠诚度 20080109
      GAMEPOINT,
      CREDITPOINT,
      //TESTGOLDCHANGE,//20080812 注释
      REFINEWEAPON,
      RELOADADMIN,
      ReLoadNpc,
      RELOADMANAGE,
      RELOADROBOTMANAGE,
      RELOADROBOT,
      RELOADMONITEMS,
      //RELOADDIARY,//20080812 注释
      RELOADITEMDB,
      {$IF M2Version <> 2}
      RELOADHUMTITLEDB,//重载称号数据
      {$IFEND}
      RELOADMAGICDB,
      RELOADMONSTERDB,
      RELOADMINMAP,
      ReAlive,

      SysMsg,//千里传音 20071228

      HEROLEVEL,//调整英雄等级 20071227
      ADJUESTLEVEL,//调整人物等级
      NGLEVEL,//调整内功等级 20081221
      ADJUESTEXP,
      AddGuild,
      DELGUILD,
      CHANGESABUKLORD,
      FORCEDWALLCONQUESTWAR,
      {ADDTOITEMEVENT,//20080812 注释
      ADDTOITEMEVENTASPIECES,//20080812 注释
      ItemEventList,//20080812 注释
      STARTINGGIFTNO,//20080812 注释
      DELETEALLITEMEVENT,//20080812 注释
      STARTITEMEVENT,
      ITEMEVENTTERM,}
      ADJUESTTESTLEVEL,
      TRAININGSKILL,
      //OPDELETESKILL,//20080812 注释
      //CHANGEWEAPONDURA,//20080812 注释
      //RELOADGUILDALL,//20080812 注释
      WHO,
      TOTAL,
      //TESTGA,//20081014 注释
      MAPINFO,
      //SBKDOOR,//20080812 注释
      CHANGEDEARNAME,
      CHANGEMASTERNAME,
      STARTQUEST,
      SETPERMISSION,
      CLEARMON,
      RENEWLEVEL,
      DENYIPLOGON,
      DENYACCOUNTLOGON,
      DENYCHARNAMELOGON,
      DELDENYIPLOGON,
      DELDENYACCOUNTLOGON,
      DELDENYCHARNAMELOGON,
      SHOWDENYIPLOGON,
      SHOWDENYACCOUNTLOGON,
      SHOWDENYCHARNAMELOGON,
      VIEWWHISPER,
      SPIRIT,
      SPIRITSTOP,
      SetMapMode,
      SHOWMAPMODE,
      TESTSERVERCONFIG,
      SERVERSTATUS,
      TESTGETBAGITEM,
      CLEARBAG,
      SHOWUSEITEMINFO,
      BINDUSEITEM,
      MOBFIREBURN,
      TESTSPEEDMODE,
      REMTEMSG,
      COLORSAY,
      SETCOLORSAY,
      AllowReAlive,
      UserItem,//取玩家物品
      SIGNMOVE,
      SHOWEFFECT,//烟花
      LOCKLOGON,
      CLEARCOPYITEM{$IF M2Version <> 2},
      CLEARHUMTITLE{$IFEND}: TGameCmd;//清理复制品
  end;

  TGateObj = record//地图连接点
    DEnvir: TEnvirnoment;//地图场景
    nDMapX: Integer;//X
    nDMapY: Integer;//Y
  end;
  pTGateObj = ^TGateObj;

  TMapQuestInfo = record//任务地图
    sMapName: string[16];//地图名称
    nFlags: Integer;
    nFlag: Integer;
    nValue: Integer;
    boFlag: Boolean;
    sMonName: string[14];//怪物名称
    sNeedItem: string[14];
    sScriptName: string[14];
    boGroup: Boolean;
    s08: string;//怪物名
    s0C: string;
    bo10: Boolean;//是否组队
    NPC: TMerchant;
  end;
  pTMapQuestInfo = ^TMapQuestInfo;

  TMagicEvent = record
    BaseObjectList: TList;
    dwStartTick: LongWord;
    dwTime: LongWord;
    Events: array[0..7] of THolyCurtainEvent;
  end;
  pTMagicEvent = ^TMagicEvent;

{$IF OEMVER = OEM775}
  TLevelInfo = record
    wHP: Word;
    wMP: Word;
    dwExp: LongWord;
    wAC: Word;
    wMaxAC: Word;
    wACLimit: Word;
    w\MAC: Word;
    wMaxMAC: Word;
    wMACLimit: Word;
    wDC: Word;
    wMaxDC: Word;
    wDCLimit: Word;
    dwDCExp: LongWord;
    wMC: Word;
    wMaxMC: Word;
    wMCLimit: Word;
    dwMCExp: LongWord;
    wSC: Word;
    wMaxSC: Word;
    wSCLimit: Word;
    dwSCExp: LongWord;
  end;


{$IFEND}
  {
  TScriptACTMsg = record
    nCode      :Integer;  //0x00
    sParam1    :String;   //0x04
    nParam1    :Integer;  //0x08
    sParam2    :String;   //0x0C
    nParam2    :Integer;  //0x10
    sParam3    :String;   //0x14
    nParam3    :Integer;  //0x18
  end;
  }
//function GetPlayObjectOrderList(nType: Integer): TStringList;
function GetPlayObjectOrderList(nType: Integer): Integer;
function GetPageCount(ItemCount: Integer): Integer;
procedure CopyStdItemToOStdItem(StdItem: pTStdItem; OStdItem: pTOStdItem);

function AddToProcTable(ProcAddr: Pointer; sProcName: string; nCheckCode: Integer): Boolean;
function AddToPulgProcTable(sProcName: string; nCheckCode: Integer): Integer;
function AddToObjTable(Obj: TObject; sObjName: string; nCheckCode: Integer): Boolean;

function GetExVersionNO(nVersionDate: Integer; var nOldVerstionDate: Integer): Integer;
function GetNextDirection(sX, sY, dx, dy: Integer): Byte;
function LoadLineNotice(FileName: string): Boolean;//读取LineNotice.txt公告
function LoadHangAutoMsg(FileName: string): Boolean;//读取挂机自动回复文件 20100908
function LoadNotice(FileName: string): Boolean;//读取Notice.txt公告

procedure LoadUserCmdList();//加载自定义命令 20080729
procedure LoadCheckItemList();//加载禁止物品规则  20080729
function GetCheckItemList(nCode: Byte; ItemName: String): Boolean;//取禁止物品规则
procedure LoadMsgFilterList();//加载消息过滤 20080729
function IsFilterMsg(var sMsg: string): Boolean;
procedure LoadShopItemList();//加载商铺配置 20080730

function GetMultiServerAddrPort(btServerIndex: Byte; var sIPaddr: string; var nPort: Integer): Boolean;
procedure MainOutMessage(Msg: string);

function AddDateTimeOfDay(DateTime: TDateTime; nDay: Integer): TDateTime;
function GetGoldShape(nGold: Integer): Word; //金币在地上显示的外形ID
function GetRandomLook(nBaseLook, nRage: Integer): Integer;
function FilterShowName(sName: string): string;
function CheckGuildName(sGuildName: string): Boolean;
function CheckUserItems(nIdx: Integer; StdItem: pTStdItem): Boolean;
function GetItemNumber(): Integer;
function GetItemNumberEx(): Integer;
function GetFengHaoNumber(): Integer; //称号制造ID
function sub_4B2F80(nDir, nRage: Integer): Byte;
function GetValNameNo(sText: string): Integer;
function IsUpgradeWaponUseItem(nIndex: Integer): Boolean;
function GetMakeItemInfo(sItemName: string): TStringList;
function CanLimitItem(sItemName: string): Boolean;//检查是否为限时物品
function GetLimitItemTimeCount(sItemName: string): Integer;//取限时物品可用小时数
function LoadLimitItemList(): Boolean;//读取限时物品列表
function SaveLimitItemList(): Boolean;
{$IF M2Version <> 2}
function LoadHeartSkillName(): Boolean;
function IsOKHeratSkillName(sSkillName: string): Boolean;//判断自定义的名字是否在列表中
function GetRefineItemInfo(sItemName, sItemName1, sItemName2: string): TList;//取淬炼后的物品列表 20080502
function CanArmsExchangeItem(sItemName: string): Boolean;//检查是否可以兑换卷轴碎片 20100812
function GetArmsExchangeItemCount(sItemName: string): Integer;//取可兑换量
function LoadEnableArmsExchangeItem(): Boolean;//读取允许兑换卷轴碎片列表
function SaveEnableArmsExchangeItem(): Boolean;
{$IFEND}
procedure AddLogonCostLog(sMsg: string);
procedure AddGameDataLog(sMsg: string);
procedure TrimStringList(sList: TStringList);
function CanMakeItem(sItemName: string): Boolean;
function CanMoveMap(sMapName: string): Boolean;
function LoadMonSayMsg(): Boolean;
function LoadItemBindIPaddr(): Boolean;
function SaveItemBindIPaddr(): Boolean;
function LoadItemBindAccount(): Boolean;
function SaveItemBindAccount(): Boolean;
function LoadItemBindCharName(): Boolean;
function SaveItemBindCharName(): Boolean;
function LoadItemBindDieNoDropName(): Boolean;//读取人物装备死亡不爆列表 20081127
function SaveItemBindDieNoDropName(): Boolean;//保存人物装备死亡不爆列表 20081127
function LoadDisableMakeItem(): Boolean;
function SaveDisableMakeItem(): Boolean;
function SaveAdminList(): Boolean;
function LoadUnMasterList(): Boolean;
function SaveUnMasterList(): Boolean;
function LoadUnForceMasterList(): Boolean;
function SaveUnForceMasterList(): Boolean;
function LoadEnableMakeItem(): Boolean;
function SaveEnableMakeItem(): Boolean;
function LoadDisableMoveMap(): Boolean;
function SaveDisableMoveMap(): Boolean;
function LoadItemDblClickList(): Boolean; //加载物品事件触发列表
function SaveItemDblClickList(): Boolean; //保存物品事件触发列表

//function CanSellOffItem(sItemName: string): Boolean; //20080416 去掉拍卖功能

function GetUseItemName(nIndex: Integer): string;
function GetUseItemIdx(sName: string): Integer;
function LoadMonDropLimitList(): Boolean;
function SaveMonDropLimitList(): Boolean;
function LoadDisableTakeOffList(): Boolean;
function SaveDisableTakeOffList(): Boolean;
function InDisableTakeOffList(nItemIdx: Integer): Boolean;
function LoadDisableSendMsgList(): Boolean;
function SaveDisableSendMsgList(): Boolean;
function GetDisableSendMsgList(sHumanName: string): Boolean;
function LoadGameLogItemNameList(): Boolean;
function GetGameLogItemNameList(sItemName: string): Byte;
function SaveGameLogItemNameList(): Boolean;
function LoadDenyIPAddrList(): Boolean;
function GetDenyIPaddrList(sIPaddr: string): Boolean;
function SaveDenyIPAddrList(): Boolean;
function LoadDenyAccountList(): Boolean;
function GetDenyAccountList(sAccount: string): Boolean;
function SaveDenyAccountList(): Boolean;
function LoadDenyChrNameList(): Boolean;
function GetDenyChrNameList(sChrName: string): Boolean;
function SaveDenyChrNameList(): Boolean;
function LoadNoClearMonList(): Boolean;
function GetNoClearMonList(sMonName: string): Boolean;
function SaveNoClearMonList(): Boolean;
procedure LoadGlobalVal(boReload:Boolean);//读取全局变量值 20110713
procedure LoadExp(boReload:Boolean);
procedure LoadGameCommand();
procedure LoadString();
procedure LoadConfig(boReload: Boolean);
function GetRGB(c256: Byte): TColor; stdcall;
procedure SendGameCenterMsg(wIdent: Word; sSENDMSG: string);
function GetIPAddr: string;
function GetIPLocal(sIPaddr: string): string;
//function IsCheapStuff(tByte: Byte): Boolean;
function CompareIPaddr(sIPaddr, dIPaddr: string): Boolean;
function GetStartPointInfo(nIndex: Integer; var nX, nY: Integer): string;
function GetStartTime(nTime: LongWord): string;
procedure StartFixExp(boReload:Boolean);

function GetBindItemType(nShape: Integer): Integer;
function GetBindItemName(nShape: Integer): String;//查找指定解包分类能解出的物品名称  20080927
procedure LoadBindItemTypeFromUnbindList();
function IsAllowPickUpItem(sItemName: string): Boolean;
procedure LoadAllowPickUpItemList();
procedure LoadAllowAIPickUpItemList();
function IsAllowAIPickUpItem(sItemName: string): Boolean;
procedure LoadDisableGamePointShopItemList();
function IsDisableGamePointShopItem(sItemName: string): Boolean;
//function GetFilesSize(FileName: string): Integer; //获取文件大小
Function addStringList(sSrc: String): String;//字符串加解密函数,脚本解密函数,SystemModule.dll输出 20080603
procedure RegGetStatusFailExitApp(sHeroName: String; nTpye: Byte);//判断M2标题是否被破解修改 20080603
procedure HeroAddSkillToHum(var sStr0,sStr1,sStr2,sStr3,sStr4,sStr5: String);//20081018 判断是否需要显示指定的文本
//procedure HeroAddSkillToHum1(var sStr0: String);//访问指定网站文本,取广告

function LoadAICharNameList(): Boolean;
function GetAICharNameList(sName: string): Boolean;
function SaveAICharNameList(): Boolean;
function LoadAIHeroNameList(): Boolean;

function GetAIHeroName(sCharName: string): string;
procedure LoadEffecItemList();//加载物品特效规则
function GetEffecItemList(ItemName: String): pTEffecItem;//取物品特效

var
  sCaptionExtText: string;//M2标题
  sSoftVersionType: string;
  g_dwGameCenterHandle: THandle;
  //IsDebuggerPresent: function(): Boolean; stdcall;
{$IF OEMVER = OEM775}
  Level775: TIniFile;
{$IFEND}
  Config: TIniFile;
  CommandConf: TIniFile;
  StringConf: TIniFile;
  Memo: TMemo;
  ProcArray: TProcArray;
  ObjectArray: TObjectArray;
  PlugProcArray: TProcArray;
  PlugInEngine: TPlugInManage;
  nServerIndex: Integer = 0;
  RunSocket: TRunSocket;
  MainLogMsgList: TStringList;//程序的提示列表
  LogStringList: TStringList;
  LogonCostLogList: TStringList;//充值角色耗时日志
  g_MapManager: TMapManager;//地图管理类
  ItemUnit: TItemUnit;
  MagicManager: TMagicManager;
  g_GuildManager: TGuildManager;//行会管理类
  g_EventManager: TEventManager;
  g_CastleManager: TCastleManager;//城堡管理类
  TBaseObjectCount : DWord;//测试用By TasNat at: 2012-06-06 12:37:19 
  FrontEngine: TFrontEngine;
  UserEngine: TUserEngine;
  RobotManage: TRobotManage;
  g_MakeItemList: TStringList;//制造物品列表
  g_LimitItemList: TGStringList;//限时物品列表
{$IF M2Version <> 2}
  g_DivisionManager: TDivisionManager;//师门管理类
  g_RefineItemList: TStringList;//淬炼配置列表 20080502
  g_DominatSendList: TStringList;//主宰令传送坐标列表
  g_EnableArmsExchangeList: TGStringList;//允许装备兑换卷轴碎片列表 20100812
  g_DigJewelItemList1: TList;//挖宝物品类型1 20100905
  g_DigJewelItemList2: TList;//挖宝物品类型2 20100905
  g_DigJewelItemList3: TList;//挖宝物品类型3 20100905
  g_DigJewelItemList4: TList;//挖宝物品类型4 20100905
  g_MissionNPC: TMerchant;//QMission-0.txt脚本触发NPC 20100801
  g_HeartSkillNameList: TStringList;//自定义心法名称列表(用于判断是否自定义的字在列表中)
{$IFEND}
  g_RefineDrumItemList:TStringList; //淬炼军鼓配置列表 20080502
  g_StartPointList: TGStringList;
  g_AutoFindRout: TGStringList;//自动寻路怪目标点列表
  //ServerTableList: TList;//20090512 注释，没有地方使用此列表
  g_DenySayMsgList: TQuickList;
  MiniMapList: TStringList;//小地图列表
  g_UnbindList: TStringList;//解包列表
  LineNoticeList: TStringList;//公告信息列表 LineNotice.txt
  HangAutoMsgList: TStringList;//挂机自动回复信息列表
  NoticeList: TStringList;//公告信息列表 Notice.txt
  g_UserCmdList: TStringList;//自定义命令列表 20080729
  g_CheckItemList: TStringList;//禁止物品规则 20090704
  g_EffecItemtList: TStringList;//物品特效
  g_MsgFilterList: TList;//消息过滤规则 20080729
  g_ShopItemList: TList;//商铺物品列表 20080730
  g_QuestDiaryList: TList;
  ItemEventList: TStringList;
  g_MonSayMsgList: TStringList; //怪物说明信息列表
  g_DisableMakeItemList: TGStringList; //禁止制造物品列表
  g_EnableMakeItemList: TGStringList; //制造物品列表
  g_DisableMoveMapList: TGStringList; //禁止移动地图列表
  g_ItemNameList: TGList; //物品别名列表
  g_DisableSendMsgList: TGStringList; //禁止发信息名称列表
  g_MonDropLimitLIst: TGStringList; //怪物爆物品限制
  g_DisableTakeOffList: TGStringList; //禁止取下物品列表

  BoxsList: TStringList;//宝箱物品列表 20100511

  g_SuitItemList: TList;//套装装备列表 20080225
  sSellOffItemList: TList;//元宝寄售列表 20080316

  //g_AllowSellOffItemList: TGStringList; //允许寄售物品列表 新增 //20080416 去掉拍卖功能
  //g_SellOffGoodList: TSellOffGoodList;//拍卖 //20080416 去掉拍卖功能
  //g_SellOffGoldList: TSellOffGoldList;//拍卖 //20080416 去掉拍卖功能

  g_Storage: TStorage; //无限仓库
  g_StorageFileName: string;
  dwSaveDataTick: LongWord;

  g_MapEventListOfDropItem: TGList;//地图触发掉物品
  g_MapEventListOfPickUpItem: TGList;//地图捡物品触发
  g_MapEventListOfMine: TGList;
  g_MapEventListOfWalk: TGList;
  g_MapEventListOfRun: TGList;

  g_AllowPickUpItemList: TGStringList; //分身允许捡取物品列表
  g_AllowAIPickUpItemList: TGStringList; //假人允许捡取物品列表
  g_DisableGamePointShopItemList: TGStringList;//禁止荣耀点购买物品列表
  g_ItemDblClickList: TGList = nil; //物品事件触发列表

  g_BindItemTypeList: TGList;

  g_ItemBindIPaddr: TGList;
  g_ItemBindAccount: TGList;
  g_ItemBindCharName: TGList;//物品人物绑定表(对应的玩家才能戴物品)
  g_ItemBindDieNoDropName: TGList;//人物装备死亡不爆列表 20081127
  g_UnMasterList: TGStringList; //出师记录表
  g_UnForceMasterList: TGStringList; //强行出师记录表
  g_GameLogItemNameList: TGStringList; //游戏日志物品名
  g_boGameLogGold: Boolean;//是否写入日志(金币)
  g_boGameLogGameGold: Boolean;//是否写入日志(调整游戏币)

  g_boGameLogGameDiaMond: Boolean;//是否写入日志(调整金刚石) 20071226
  g_boGameLogGameGird: Boolean;//是否写入日志(调整灵符) 20071226
  g_boGameLogGameGlory: Boolean; //是否写入日志(调整荣誉值) 20080511

  g_boGameLogGamePoint: Boolean;//是否写入日志(调整游戏点)
  g_boGameLogHumanDie: Boolean;
  g_DenyIPAddrList: TGStringList; //IP过滤列表
  g_DenyChrNameList: TGStringList; //角色过滤列表
  g_DenyAccountList: TGStringList; //登录帐号过滤列表
  g_NoClearMonList: TGStringList; //不清除怪物列表
  n4EBBD0: Integer;
  g_CheckCode: TCheckCode;
  g_nIdent: Integer;
  g_ProcessMsg: TProcessMessage;
  LogMsgCriticalSection: TRTLCriticalSection;
  ProcessMsgCriticalSection: TRTLCriticalSection;
  UserDBSection: TRTLCriticalSection;
  ProcessHumanCriticalSection: TRTLCriticalSection;
  HumanSortCriticalSection: TRTLCriticalSection;

  g_nTotalHumCount: Integer;

  g_boMission: Boolean;//是否设置怪物集中点
  g_sMissionMap: string;//怪物集中点 地图
  g_nMissionX: Integer;//怪物集中点X
  g_nMissionY: Integer;//怪物集中点Y

  boStartReady: Boolean;
  g_boExitServer: Boolean;
  boFilterWord: Boolean;
  
  sLogFileName: string;
  nRunTimeMin: Integer;
  nRunTimeMax: Integer;

  g_nBaseObjTimeMin: Integer;
  g_nBaseObjTimeMax: Integer;
  g_nSockCountMin: Integer;
  g_nSockCountMax: Integer;
  g_nUsrTimeMin: Integer;
  g_nUsrTimeMax: Integer;
  g_nHumCountMin: Integer;
  g_nHumCountMax: Integer;
  g_nMonTimeMin: Integer;
  g_nMonTimeMax: Integer;
  g_nMonGenTime: Integer;
  g_nMonGenTimeMin: Integer;
  g_nMonGenTimeMax: Integer;
  g_nMonProcTime: Integer;
  g_nMonProcTimeMin: Integer;
  g_nMonProcTimeMax: Integer;
  dwUsrRotCountMin: Integer;
  dwUsrRotCountMax: Integer;

  g_dwUsrRotCountTick: LongWord; //0x4EBD48          :LongWord;
  g_nProcessHumanLoopTime: Integer; //0x004EBD54    //处理人物列表循环次数
  g_dwHumLimit: LongWord = 30; //0x4EBD98
  g_dwMonLimit: LongWord = 30; //0x4EBD9C
  g_dwZenLimit: LongWord = 5; //0x4EBDA0
  g_dwNpcLimit: LongWord = 5; //0x4EBDA4
  g_dwSocLimit: LongWord = 10; //0x4EBDA8
  g_dwSocCheckTimeOut: LongWord = 50; //2 * 1000;
  nDecLimit: Integer = 20; //0x4EBDAC
  nShiftUsrDataNameNo: Integer;
{$IF OEMVER = OEM775}
  sConfig775FileName: string = '.\775.txt';
{$IFEND}
  sConfigFileName: string = '.\!Setup.txt';
  sExpConfigFileName: string = '.\Exps.ini';
  sCommandFileName: string = '.\Command.ini';
  sStringFileName: string = '.\String.ini';
  //dwRunDBTimeMax: LongWord; //20080728 注释
  g_dwStartTick: LongWord; //启动间隔

  g_dwRunTick: LongWord; //运行间隔
  n4EBD1C: Integer;

  g_nGameTime: Integer;

  g_sMonGenInfo1: string; //0x4EBD58
  g_sMonGenInfo2: string; //0x4EBD78
  //g_sOldProcessName: string;
  g_ManageNPC: TNormNpc;
  g_RobotNPC: TNormNpc;
  g_FunctionNPC: TMerchant;//脚本触发NPC
(*{$IF M2Version <> 0}
  sBUYHINTINF03: string = 'www.3KM2.com';
{$IFEND}*)
{$IF M2Version = 1}
  g_BatterNPC: TMerchant;//连击触发NPC
{$IFEND}
  g_DynamicVarList: TList;
  nCurrentMonthly: Integer;
  nTotalTimeUsage: Integer;
  nLastMonthlyTotalUsage: Integer;
  nGrossTotalCnt: Integer;
  nGrossResetCnt: Integer;
  //n4EBB6C: Integer;//20080728 注释

  nDeCryptString: Integer = -1;
  nGetIPString: Integer = -1;//检测脚本插件是商业版 20100918
{$IF UserMode1 = 1}
  g_nGetLicenseInfo: Integer = -1;//获取许可信息 20080630(注册)
{$IFEND}
  nCrackedLevel: Integer = 0;
  nErrorLevel: Integer = 0;

  g_boMinimize: Boolean = True;

  g_TempGlobalVal: array[0..999] of Integer; //G  //20101020 增加
  g_TempGlobalAVal: array[0..999] of string; //A

  g_AICharNameList: TGStringList;//假人列表
  g_AIHeroNameList: TGStringList;
  
  g_FindPath: TFindPath;//寻路类

  ColorTable: array[0..255] of TRGBQuad;
  ColorArray: array[0..1023] of Byte = (
    $00, $00, $00, $00, $00, $00, $80, $00, $00, $80, $00, $00, $00, $80, $80, $00,
    $80, $00, $00, $00, $80, $00, $80, $00, $80, $80, $00, $00, $C0, $C0, $C0, $00,
    $97, $80, $55, $00, $C8, $B9, $9D, $00, $73, $73, $7B, $00, $29, $29, $2D, $00,
    $52, $52, $5A, $00, $5A, $5A, $63, $00, $39, $39, $42, $00, $18, $18, $1D, $00,
    $10, $10, $18, $00, $18, $18, $29, $00, $08, $08, $10, $00, $71, $79, $F2, $00,
    $5F, $67, $E1, $00, $5A, $5A, $FF, $00, $31, $31, $FF, $00, $52, $5A, $D6, $00,
    $00, $10, $94, $00, $18, $29, $94, $00, $00, $08, $39, $00, $00, $10, $73, $00,
    $00, $18, $B5, $00, $52, $63, $BD, $00, $10, $18, $42, $00, $99, $AA, $FF, $00,
    $00, $10, $5A, $00, $29, $39, $73, $00, $31, $4A, $A5, $00, $73, $7B, $94, $00,
    $31, $52, $BD, $00, $10, $21, $52, $00, $18, $31, $7B, $00, $10, $18, $2D, $00,
    $31, $4A, $8C, $00, $00, $29, $94, $00, $00, $31, $BD, $00, $52, $73, $C6, $00,
    $18, $31, $6B, $00, $42, $6B, $C6, $00, $00, $4A, $CE, $00, $39, $63, $A5, $00,
    $18, $31, $5A, $00, $00, $10, $2A, $00, $00, $08, $15, $00, $00, $18, $3A, $00,
    $00, $00, $08, $00, $00, $00, $29, $00, $00, $00, $4A, $00, $00, $00, $9D, $00,
    $00, $00, $DC, $00, $00, $00, $DE, $00, $00, $00, $FB, $00, $52, $73, $9C, $00,
    $4A, $6B, $94, $00, $29, $4A, $73, $00, $18, $31, $52, $00, $18, $4A, $8C, $00,
    $11, $44, $88, $00, $00, $21, $4A, $00, $10, $18, $21, $00, $5A, $94, $D6, $00,
    $21, $6B, $C6, $00, $00, $6B, $EF, $00, $00, $77, $FF, $00, $84, $94, $A5, $00,
    $21, $31, $42, $00, $08, $10, $18, $00, $08, $18, $29, $00, $00, $10, $21, $00,
    $18, $29, $39, $00, $39, $63, $8C, $00, $10, $29, $42, $00, $18, $42, $6B, $00,
    $18, $4A, $7B, $00, $00, $4A, $94, $00, $7B, $84, $8C, $00, $5A, $63, $6B, $00,
    $39, $42, $4A, $00, $18, $21, $29, $00, $29, $39, $46, $00, $94, $A5, $B5, $00,
    $5A, $6B, $7B, $00, $94, $B1, $CE, $00, $73, $8C, $A5, $00, $5A, $73, $8C, $00,
    $73, $94, $B5, $00, $73, $A5, $D6, $00, $4A, $A5, $EF, $00, $8C, $C6, $EF, $00,
    $42, $63, $7B, $00, $39, $56, $6B, $00, $5A, $94, $BD, $00, $00, $39, $63, $00,
    $AD, $C6, $D6, $00, $29, $42, $52, $00, $18, $63, $94, $00, $AD, $D6, $EF, $00,
    $63, $8C, $A5, $00, $4A, $5A, $63, $00, $7B, $A5, $BD, $00, $18, $42, $5A, $00,
    $31, $8C, $BD, $00, $29, $31, $35, $00, $63, $84, $94, $00, $4A, $6B, $7B, $00,
    $5A, $8C, $A5, $00, $29, $4A, $5A, $00, $39, $7B, $9C, $00, $10, $31, $42, $00,
    $21, $AD, $EF, $00, $00, $10, $18, $00, $00, $21, $29, $00, $00, $6B, $9C, $00,
    $5A, $84, $94, $00, $18, $42, $52, $00, $29, $5A, $6B, $00, $21, $63, $7B, $00,
    $21, $7B, $9C, $00, $00, $A5, $DE, $00, $39, $52, $5A, $00, $10, $29, $31, $00,
    $7B, $BD, $CE, $00, $39, $5A, $63, $00, $4A, $84, $94, $00, $29, $A5, $C6, $00,
    $18, $9C, $10, $00, $4A, $8C, $42, $00, $42, $8C, $31, $00, $29, $94, $10, $00,
    $10, $18, $08, $00, $18, $18, $08, $00, $10, $29, $08, $00, $29, $42, $18, $00,
    $AD, $B5, $A5, $00, $73, $73, $6B, $00, $29, $29, $18, $00, $4A, $42, $18, $00,
    $4A, $42, $31, $00, $DE, $C6, $63, $00, $FF, $DD, $44, $00, $EF, $D6, $8C, $00,
    $39, $6B, $73, $00, $39, $DE, $F7, $00, $8C, $EF, $F7, $00, $00, $E7, $F7, $00,
    $5A, $6B, $6B, $00, $A5, $8C, $5A, $00, $EF, $B5, $39, $00, $CE, $9C, $4A, $00,
    $B5, $84, $31, $00, $6B, $52, $31, $00, $D6, $DE, $DE, $00, $B5, $BD, $BD, $00,
    $84, $8C, $8C, $00, $DE, $F7, $F7, $00, $18, $08, $00, $00, $39, $18, $08, $00,
    $29, $10, $08, $00, $00, $18, $08, $00, $00, $29, $08, $00, $A5, $52, $00, $00,
    $DE, $7B, $00, $00, $4A, $29, $10, $00, $6B, $39, $10, $00, $8C, $52, $10, $00,
    $A5, $5A, $21, $00, $5A, $31, $10, $00, $84, $42, $10, $00, $84, $52, $31, $00,
    $31, $21, $18, $00, $7B, $5A, $4A, $00, $A5, $6B, $52, $00, $63, $39, $29, $00,
    $DE, $4A, $10, $00, $21, $29, $29, $00, $39, $4A, $4A, $00, $18, $29, $29, $00,
    $29, $4A, $4A, $00, $42, $7B, $7B, $00, $4A, $9C, $9C, $00, $29, $5A, $5A, $00,
    $14, $42, $42, $00, $00, $39, $39, $00, $00, $59, $59, $00, $2C, $35, $CA, $00,
    $21, $73, $6B, $00, $00, $31, $29, $00, $10, $39, $31, $00, $18, $39, $31, $00,
    $00, $4A, $42, $00, $18, $63, $52, $00, $29, $73, $5A, $00, $18, $4A, $31, $00,
    $00, $21, $18, $00, $00, $31, $18, $00, $10, $39, $18, $00, $4A, $84, $63, $00,
    $4A, $BD, $6B, $00, $4A, $B5, $63, $00, $4A, $BD, $63, $00, $4A, $9C, $5A, $00,
    $39, $8C, $4A, $00, $4A, $C6, $63, $00, $4A, $D6, $63, $00, $4A, $84, $52, $00,
    $29, $73, $31, $00, $5A, $C6, $63, $00, $4A, $BD, $52, $00, $00, $FF, $10, $00,
    $18, $29, $18, $00, $4A, $88, $4A, $00, $4A, $E7, $4A, $00, $00, $5A, $00, $00,
    $00, $88, $00, $00, $00, $94, $00, $00, $00, $DE, $00, $00, $00, $EE, $00, $00,
    $00, $FB, $00, $00, $94, $5A, $4A, $00, $B5, $73, $63, $00, $D6, $8C, $7B, $00,
    $D6, $7B, $6B, $00, $FF, $88, $77, $00, $CE, $C6, $C6, $00, $9C, $94, $94, $00,
    $C6, $94, $9C, $00, $39, $31, $31, $00, $84, $18, $29, $00, $84, $00, $18, $00,
    $52, $42, $4A, $00, $7B, $42, $52, $00, $73, $5A, $63, $00, $F7, $B5, $CE, $00,
    $9C, $7B, $8C, $00, $CC, $22, $77, $00, $FF, $AA, $DD, $00, $2A, $B4, $F0, $00,
    $9F, $00, $DF, $00, $B3, $17, $E3, $00, $F0, $FB, $FF, $00, $A4, $A0, $A0, $00,
    $80, $80, $80, $00, $00, $00, $FF, $00, $00, $FF, $00, $00, $00, $FF, $FF, $00,
    $FF, $00, $00, $00, $FF, $00, $FF, $00, $FF, $FF, $00, $00, $FF, $FF, $FF, $00
    );

  g_GMRedMsgCmd: Char = '!';
  g_nGMREDMSGCMD: Integer = 6;
  g_dwSendOnlineTick: LongWord;



  g_dwSpiritMutinyTick: LongWord;
  //排行榜
  g_TaxisAllList: THumSort;
  g_TaxisWarrList: THumSort;
  g_TaxisWaidList: THumSort;
  g_TaxisTaosList: THumSort;
  g_MasterList: THumSort;
{$IF HEROVERSION = 1}
  g_HeroAllList: THeroSort;
  g_HeroWarrList: THeroSort;
  g_HeroWaidList: THeroSort;
  g_HeroTaosList: THeroSort;
{$IFEND}
{$IF M2Version <> 2}
  g_mSortIndx: Integer;//保存索引
  g_boArmsSortChange: Boolean;//判断排行榜是否改变
  g_boRingSortChange: Boolean;
  g_boDreSortChange: Boolean;
  g_boShoesSortChange: Boolean;
  g_boHelmeSortChange: Boolean;
  g_boBootsSortChange: Boolean;
  g_boNecklaceSortChange: Boolean;
  g_boMedalSortChange: Boolean;
  g_boBraceletSortChange: Boolean;
  g_boZhuLiSortChange: Boolean;
  g_ArmsSortList: TList;//武器榜
  g_RingSortList: TList;//戒指榜
  g_DreSortList: TList;//衣甲榜
  g_ShoesSortList: TList;//靴子榜
  g_HelmeSortList: TList;//头盔榜
  g_BootsSortList: TList;//腰带榜
  g_NecklaceSortList: TList;//项链榜
  g_MedalSortList: TList;//勋章榜
  g_BraceletSortList: TList;//护腕榜
  g_ZhuLiSortList: TList;//斗笠面巾榜
{$IFEND}
  g_Config: TConfig = (
    sServerName: '3K科技';
    sServerIPaddr: '127.0.0.1';
    //sRegServerAddr: '127.0.0.1';
    //nRegServerPort: 63000;
    //sRegKey: '';
    sWebSite: 'http://www.3KM2.com';
    sBbsSite: 'http://www.3KM2.net';
    sClientDownload: 'http://www.3KM2.net';
    sQQ: '88888888';
    sPhone: '123456789';
    sBankAccount0: '银行信息';
    sBankAccount1: '银行信息';
    sBankAccount2: '银行信息';
    sBankAccount3: '银行信息';
    sBankAccount4: '银行信息';
    sBankAccount5: '银行信息';
    sBankAccount6: '银行信息';
    sBankAccount7: '银行信息';
    sBankAccount8: '银行信息';
    sBankAccount9: '银行信息';
    nServerNumber: 0;
    boVentureServer: False;
    boTestServer: True;
    boServiceMode: False;
    boNonPKServer: False;
    nTestLevel: 1;
    nTestGold: 0;
    nTestUserLimit: 1000;
    nSendBlock: 1024;
    nCheckBlock: 9500;
    nAvailableBlock: 8000;
    nGateLoad: 0;
    nUserFull: 1000;
    nZenFastStep: 300;
    sGateAddr: '127.0.0.1';
    nGatePort: 5000;
    sDBAddr: '127.0.0.1';
    nDBPort: 6000;
    sIDSAddr: '127.0.0.1';
    nIDSPort: 5600;
    sMsgSrvAddr: '127.0.0.1';
    nMsgSrvPort: 4900;
    sLogServerAddr: '127.0.0.1';
    nLogServerPort: 10000;
    boDiscountForNightTime: False;
    nHalfFeeStart: 2;
    nHalfFeeEnd: 10;
    boViewHackMessage: False;
    boViewAdmissionFailure: False;
    sBaseDir: '.\BaseDir\';
    sDivisionDir: '.\DivisionDir\Divisions\';
    sDivisionFile: '.\DivisionDir\DivisionList.txt';
    sApplyDivisionFile: '.\DivisionDir\ApplyDivisionList.txt';
    sGuildDir: '.\GuildDir\List\';
    sGuildFile: '.\GuildDir\List.txt';
    sVentureDir: '.\VentureDir\';
    sConLogDir: '.\ConLog\';//20081219
    sCastleDir: '.\Castle\';//20081219
    sCastleFile: '.\Castle\List.txt';//20081219
    sSortDir: '.\Sort\';//排行榜路径 20080220
    sBoxsDir: '.\Envir\Boxs\'; //宝箱路径 20080114
    sBoxsFile: '.\Envir\Boxs\BoxsList.txt';//宝箱文件 20080114
    sEnvirDir: '.\Envir\';
    sMapDir: '.\Map\';
    sNoticeDir: '.\Notice\';
    sLogDir: '.\Log\';
    sPlugDir: '.\';
    sClientFile1: 'mir.dat';//20080302  客户端文件名
    //sClientFile2: 'mir.2';//20080302  20080831 注释
    //sClientFile3: 'mir.3';//20080302  20080831 注释

    sClothsMan: '布衣(男)';
    sClothsWoman: '布衣(女)';
    sWoodenSword: '木剑';
    sCandle: '蜡烛';
    sBasicDrug: '金创药(小量)';
    sGoldStone: '金矿';
    sSilverStone: '银矿';
    sSteelStone: '铁矿';
    sCopperStone: '铜矿';
    sBlackStone: '黑铁矿石';//20080322
    sZuma: ('祖玛卫士', '祖玛雕像', '祖玛弓箭手', '楔蛾');
    sBee: '小角蝇';
    sZhuFire: '朱火弹';
    sFoxBeads: '九尾魂石';
    sSpider: '小蜘蛛';
    sWomaHorn: '沃玛号角';
    sZumaPiece: '祖玛头像';
    sGameGoldName: '元宝';
    sGameDiaMond:'金刚石';
    sGameGird:'灵符';
    sGameGlory:'荣誉';
    sGamePointName: '荣耀点';
    sPayMentPointName: '秒卡点';
    DBSocket: INVALID_SOCKET;
    nHealthFillTime: 300;
    nSpellFillTime: 800;
    nMonUpLvNeedKillBase: 100;
    nMonUpLvRate: 16;
    MonUpLvNeedKillCount: (0, 0, 50, 100, 200, 300, 600, 1200);
    SlaveColor: ($FF, $FE, $93, $9A, $E5, $A8, $B4, $FC, 249);//宝宝各等级名字颜色
    dwCattleGasvalueNeedExps: 5000;//牛气管升级经验 20090520
    WideAttack: (7, 1, 2);
    CrsAttack: (7, 1, 2, 3, 5, 6, 4);//20090115 修正：抱月后面的目标也能打中
    SpitMap: (
    ((0, 0, 1, 0, 0), //DR_UP
    (0, 0, 1, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0)),
    ((0, 0, 0, 0, 1), //DR_UPRIGHT
    (0, 0, 0, 1, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0)),
    ((0, 0, 0, 0, 0), //DR_RIGHT
    (0, 0, 0, 0, 0),
    (0, 0, 0, 1, 1),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0)),
    ((0, 0, 0, 0, 0), //DR_DOWNRIGHT
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 1, 0),
    (0, 0, 0, 0, 1)),
    ((0, 0, 0, 0, 0), //DR_DOWN
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 1, 0, 0),
    (0, 0, 1, 0, 0)),
    ((0, 0, 0, 0, 0), //DR_DOWNLEFT
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 1, 0, 0, 0),
    (1, 0, 0, 0, 0)),
    ((0, 0, 0, 0, 0), //DR_LEFT
    (0, 0, 0, 0, 0),
    (1, 1, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0)),
    ((1, 0, 0, 0, 0), //DR_UPLEFT
    (0, 1, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0))
    );

    sHomeMap: '0';
    nHomeX: 289;
    nHomeY: 618;
    sRedHomeMap: '3';
    nRedHomeX: 845;
    nRedHomeY: 674;
    sRedDieHomeMap: '3';
    nRedDieHomeX: 839;
    nRedDieHomeY: 668;
    dwDecPkPointTime: 120000{2 * 60 * 1000};
    nDecPkPointCount: 1;
    dwPKFlagTime: 60000{60 * 1000};
    nKillHumanWeaponUnlockRate: 5;//杀人武器被诅咒机率
    nKillHumanAddPKPoint: 100;
    nKillHumanDecLuckPoint: 500;
    dwDecLightItemDrugTime: 1000;//照明物使用间隔
    nSafeZoneSize: 10;
    nStartPointSize: 2;
    dwHumanGetMsgTime: 200;
    nGuildMemberCount: 400;//新建行会成员上限
    nGroupMembersMax: 10;
    sFireBallSkill: '火球术';
    sHealSkill: '治愈术';
    sMeteorSKill: '流星';
    sHeavenSKill: '倚天辟地';
    sDragonSkill: '神龙附体';
    sCallTrollSkill: '召唤巨魔';
    dwPulsePointNGLevel: (5,7,10,13,15,19,23,25,27,33,36,39,45,48,52,56,62,72,81,95);//脉穴打通所需内功等级 20090618
    ReNewNameColor: ($FF, $FE, $93, $9A, $E5, $A8, $B4, $FC, $B4, $FC);
    dwReNewNameColorTime: 2000;
    boReNewChangeColor: True;
    boReNewLevelClearExp: True;
    BonusAbilofWarr: (DC: 17; MC: 20; SC: 20; AC: 20; MAC: 20; HP: 1; MP: 3; Hit: 20; Speed: 35; X2: 0);
    BonusAbilofWizard: (DC: 17; MC: 25; SC: 30; AC: 20; MAC: 15; HP: 2; MP: 1; Hit: 25; Speed: 35; X2: 0);
    BonusAbilofTaos: (DC: 20; MC: 30; SC: 17; AC: 20; MAC: 15; HP: 2; MP: 1; Hit: 30; Speed: 30; X2: 0);
    NakedAbilofWarr: (DC: 512; MC: 2560; SC: 20; AC: 768; MAC: 1280; HP: 0; MP: 0; Hit: 0; Speed: 0; X2: 0);
    NakedAbilofWizard: (DC: 512; MC: 512; SC: 2560; AC: 1280; MAC: 768; HP: 0; MP: 0; Hit: 5; Speed: 0; X2: 0);
    NakedAbilofTaos: (DC: 20; MC: 30; SC: 17; AC: 20; MAC: 15; HP: 2; MP: 1; Hit: 30; Speed: 30; X2: 0);
    {$IF M2Version <> 2}
    nArmsTearPriceType: 0;//拆分赤炎石费用类型 0-元宝 1-金币 2-灵符 3-金刚石
    nArmsTearPriceRate: 1;//拆分武器赤炎石费用倍数 20100709
    nArmsCritRate: 20;//武器暴击等级出现暴击机率参数 20100709
    nMaxHeapStruckDamage: 10000;//武器暴击累积上限
    sArmsExchangeItme: '卷轴碎片';//装备交换卷轴 20100812
    {$IFEND}
    nUpgradeWeaponMaxPoint: 20;
    nUpgradeWeaponPrice: 10000;
    dwUPgradeWeaponGetBackTime: 3600000{60 * 60 * 1000};
    nClearExpireUpgradeWeaponDays: 8;
    nUpgradeWeaponDCRate: 100;
    nUpgradeWeaponDCTwoPointRate: 30;
    nUpgradeWeaponDCThreePointRate: 200;
    nUpgradeWeaponSCRate: 100;
    nUpgradeWeaponSCTwoPointRate: 30;
    nUpgradeWeaponSCThreePointRate: 200;
    nUpgradeWeaponMCRate: 100;
    nUpgradeWeaponMCTwoPointRate: 30;
    nUpgradeWeaponMCThreePointRate: 200;
    dwProcessMonstersTime: 14;
    dwRegenMonstersTime: 200;
    nMonGenRate: 10;
    //nProcessMonRandRate: 5;//未使用变量 20080504
    //nProcessMonLimitCount: 5;//未使用变量 20080504
    nSoftVersionDate: 20080501;
    boCanOldClientLogon: True;//是否允许普通登录器进入
    dwConsoleShowUserCountTime: 600000{10 * 60 * 1000};
    dwShowLineNoticeTime: 300000{5 * 60 * 1000};
    nLineNoticeColor: 2;
    nStartCastleWarDays: 4;
    nStartCastlewarTime: 20;
    dwShowCastleWarEndMsgTime: 900000{10 * 60 * 1000};
    dwCastleWarTime: 10800000{3 * 60 * 60 * 1000};
    dwGetCastleTime: 600000{10 * 60 * 1000};
    dwGuildWarTime: 10800000{3 * 60 * 60 * 1000};
    nBuildGuildPrice: 1000000;
    nGuildWarPrice: 30000;
    nMakeDurgPrice: 100;
    nHumanMaxGold: 10000000;
    nHumanTryModeMaxGold: 100000;
    nTryModeLevel: 7;
    boTryModeUseStorage: False;
    nCanShoutMsgLevel: 7;
    boShowMakeItemMsg: False;
    boShutRedMsgShowGMName: False;
    nSayMsgMaxLen: 80;
    dwSayMsgTime: 3000{3 * 1000};
    nSayMsgCount: 2;
    dwDisableSayMsgTime: 60000{60 * 1000};
    nSayRedMsgMaxLen: 255;
    boShowGuildName: True;
    boShowRankLevelName: True;
    boMonSayMsg: False;
    nStartPermission: 0;
    boKillHumanWinLevel: False;
    boKilledLostLevel: False;
    boKillHumanWinExp: False;
    boKilledLostExp: False;
    nKillHumanWinLevel: 1;
    nKilledLostLevel: 1;
    nKillHumanWinExp: 100000;
    nKillHumanLostExp: 100000;
    nHumanLevelDiffer: 10;
    nMonsterPowerRate: 10;
    nItemsPowerRate: 10;
    nItemsACPowerRate: 10;
    boSendOnlineCount: True;
    nSendOnlineCountRate: 10;
    dwSendOnlineTime: 300000{5 * 60 * 1000};
    dwSaveHumanRcdTime: 600000{10 * 60 * 1000};
    dwHumanFreeDelayTime: 300000{5 * 60 * 1000};
    dwMakeGhostTime: 180000{3 * 60 * 1000};
    dwMakeGhostPlayMosterTime: 180000{3 * 60 * 1000};//人形怪尸体清理时间 20080418
    dwClearDropOnFloorItemTime: 3600000{60 * 60 * 1000};
    dwFloorItemCanPickUpTime: 120000{2 * 60 * 1000};
    boPasswordLockSystem: False; //是否启用密码保护系统
    boLockDealAction: False; //是否锁定交易操作
    boLockDropAction: False; //是否锁定扔物品操作
    boLockGetBackItemAction: False; //是否锁定取仓库操作
    boLockHumanLogin: False; //是否锁定走操作
    boLockWalkAction: False; //是否锁定走操作
    boLockRunAction: False; //是否锁定跑操作
    boLockHitAction: False; //是否锁定攻击操作
    boLockSpellAction: False; //是否锁定魔法操作
    boLockCallHeroAction: False; //是否锁定召唤英雄操作  20080529
    boLockSendMsgAction: False; //是否锁定发信息操作
    boLockUserItemAction: False; //是否锁定使用物品操作
    boLockInObModeAction: False; //锁定时进入隐身状态
    nPasswordErrorCountLock: 3; //输入密码错误超过 指定次数则锁定密码
    boPasswordErrorKick: False; //输入密码错误超过限制则踢下线
    nSendRefMsgRange: 12;
    boDecLampDura: True;
    boHungerSystem: False;
    {$IF M2Version <> 2}
    boUseFengHaoAbil: False;//只有启用的称号才有属性
    {$IFEND}
    boClearGamePoint: False;//定时清空游戏点
    boHungerDecHP: False;
    boHungerDecPower: False;
    boDiableHumanRun: True;
    boRUNHUMAN: False;
    boRUNMON: False;
    boRunNpc: False;
    boRunGuard: False;
    boWarDisHumRun: False;
    boSkill31Effect: False;//魔法盾效果 T-特色效果 F-盛大效果 20080808
    nSkill66Rate: 75;//四级魔法盾抵御伤害百分率 20080829
    nOrdinarySkill66Rate: 15;//普通魔法盾抵御伤害百分率 20081226
    nSkill69NG: 10;//内力值参数 20081001
    nSkill69NGExp: 55330;//主体内功经验参数 20081001
    nSkill69NGExp1: 13940;//主体内功经验参数2 20090727
    nHeroSkill69NGExp: 62400;//英雄内功经验参数 20081001
    nHeroSkill69NGExp1: 14240;//英雄内功经验参数2 20090727
    nLimitExpNGLevel: 255;//内功等级限制
    dwIncNHTime: 8000;//增加内力值间隔 20081002
    nDrinkIncNHExp: 100;//饮酒增加内功经验 20081003
    nHitStruckDecNH: 1;//内功抵御普通攻击消耗内力值 20081003
    boGMRunAll: False;
    boSafeAreaLimited: False;
    boItmeAutoOver: True;//装备持久0时自动消失
    boShowMoveHP: False;//装备持久0时自动消失
    {$If M2Version = 2}
    boShowNewItem: False;
    {$ifend}
    {$If M2Version = 0}
    boUses176StateWin: False;
    {$ifend}
    boNoCanUseProtection: False;//内挂禁用主体保护
    boNoCanUseHeroProtection: False;//内挂禁用英雄保护
    boNoCanUseComparThrust: True;//内挂隔位刺杀是否可用
    dwTryDealTime: 3000;
    dwDealOKTime: 1000;
    boCanNotGetBackDeal: True;
    boDisableDeal: False;
    nMasterCount: 5;//可收徒弟数 20080530
    nMasterOKLevel: 500;
    nMasterOKCreditPoint: 0;
    nMasterOKBonusPoint: 0;
    boLevelLessNotIncPKPoint: False;//等级小于指定值不增加PK点
    nNotIncPKPointLevel: 10;////等级小于时，不增加PK点
    boPKLevelProtect: False;
    boPKHeroDieAddBodyLuck: True;//杀英雄增加诅咒值 20090414
    nPKProtectLevel: 10;
    nRedPKProtectLevel: 10;
    nItemPowerRate: 10000;
    nItemExpRate: 10000;
    nScriptGotoCountLimit: 30;
    btHearMsgFColor1: $FA; //玄绿 文字颜色 20090222
    btHearMsgFColor2: $F5; //玄紫 文字颜色 20090222
    btHearMsgFColor3: $01; //玄褐 文字颜色 20090222
    btHearMsgFColor: $00; //前景
    btHearMsgBColor: $FF; //背景
    btWhisperMsgFColor: $FC; //前景
    btWhisperMsgBColor: $FF; //背景
    btGMWhisperMsgFColor: $FF; //前景
    btGMWhisperMsgBColor: $38; //背景
    btCryMsgFColor: $0; //前景
    btCryMsgBColor: $97; //背景
    btGreenMsgFColor: $DB; //前景
    btGreenMsgBColor: $FF; //背景
    btBlueMsgFColor: $FF; //前景
    btBlueMsgBColor: $FC; //背景
    btSayMsgFColor: $FF; //前景  千里传音 20080309
    btSayeMsgBColor: $FC; //背景 千里传音 20080309
    btSayMsgFColor1: $97; //前景 传音筒
    btSayeMsgBColor1: $EA; //背景 传音筒
    {$IF M2Version <> 2}
    btDivisionMsgFColor: $FD; //前景 师门聊天
    btDivisionMsgBColor: $FF; //背景 师门聊天
    nDivisionMemberCount: 21;//新建师门人数上限
    nBuildDivisionLevel: 999;//创建师门所需等级
    nApplyDivisionLevel: 100;//申请入门所需等级
    {$IFEND}
    btItemMsgFColor: $FF;
    btItemMsgBColor: $38;
    btRedMsgFColor: $FF; //前景
    btRedMsgBColor: $38; //背景
    btGuildMsgFColor: $DB; //前景
    btGuildMsgBColor: $FF; //背景
    btGroupMsgFColor: $C4; //前景
    btGroupMsgBColor: $FF; //背景
    btCustMsgFColor: $FC; //前景
    btCustMsgBColor: $FF; //背景
    nMonRandomAddValue: 10;
    nMakeRandomAddValue: 10;
    nPlayMonRandomAddValue: 10;//人形身上装备极品机率 20080716
    nWeaponDCAddValueMaxLimit: 12;
    nWeaponDCAddValueRate: 15;
    nWeaponMCAddValueMaxLimit: 12;
    nWeaponMCAddValueRate: 15;
    nWeaponSCAddValueMaxLimit: 12;
    nWeaponSCAddValueRate: 15;
    nWeaponDCAddRate: 40;
    nWeaponSCAddRate: 40;
    nWeaponMCAddRate: 40;

    nDressDCAddRate: 40;
    nDressDCAddValueMaxLimit: 6;
    nDressDCAddValueRate: 20;
    nDressMCAddRate: 40;
    nDressMCAddValueMaxLimit: 6;
    nDressMCAddValueRate: 20;
    nDressSCAddRate: 40;
    nDressSCAddValueMaxLimit: 6;
    nDressSCAddValueRate: 20;
    nDressACAddValueMaxLimit: 6;
    nDressACAddValueRate: 20;
    nDressACAddRate: 40;
    nDressMACAddValueMaxLimit: 6;
    nDressMACAddValueRate: 20;
    nDressMACAddRate: 40;
    nNeckLace202124DCAddRate: 40;
    nNeckLace202124DCAddValueMaxLimit: 6;
    nNeckLace202124DCAddValueRate: 20;
    nNeckLace202124MCAddRate: 40;
    nNeckLace202124MCAddValueMaxLimit: 6;
    nNeckLace202124MCAddValueRate: 20;
    nNeckLace202124SCAddRate: 40;
    nNeckLace202124SCAddValueMaxLimit: 6;
    nNeckLace202124SCAddValueRate: 20;
    nNeckLace202124ACAddValueMaxLimit: 6;
    nNeckLace202124ACAddValueRate: 20;
    nNeckLace202124ACAddRate: 40;
    nNeckLace202124MACAddValueMaxLimit: 6;
    nNeckLace202124MACAddValueRate: 20;
    nNeckLace202124MACAddRate: 40;
    nNeckLace19DCAddRate: 30;
    nNeckLace19DCAddValueMaxLimit: 6;
    nNeckLace19DCAddValueRate: 20;
    nNeckLace19MCAddRate: 30;
    nNeckLace19MCAddValueMaxLimit: 6;
    nNeckLace19MCAddValueRate: 20;
    nNeckLace19SCAddRate: 30;
    nNeckLace19SCAddValueMaxLimit: 6;
    nNeckLace19SCAddValueRate: 20;
    nNeckLace19ACAddValueMaxLimit: 6;
    nNeckLace19ACAddValueRate: 20;
    nNeckLace19ACAddRate: 30;
    nNeckLace19MACAddValueMaxLimit: 6;
    nNeckLace19MACAddValueRate: 20;
    nNeckLace19MACAddRate: 30;
    nArmRing26DCAddRate: 30;
    nArmRing26DCAddValueMaxLimit: 6;
    nArmRing26DCAddValueRate: 20;
    nArmRing26MCAddRate: 30;
    nArmRing26MCAddValueMaxLimit: 6;
    nArmRing26MCAddValueRate: 20;
    nArmRing26SCAddRate: 30;
    nArmRing26SCAddValueMaxLimit: 6;
    nArmRing26SCAddValueRate: 20;
    nArmRing26ACAddValueMaxLimit: 6;
    nArmRing26ACAddValueRate: 20;
    nArmRing26ACAddRate: 30;
    nArmRing26MACAddValueMaxLimit: 6;
    nArmRing26MACAddValueRate: 20;
    nArmRing26MACAddRate: 30;
    nRing22DCAddRate: 30;
    nRing22DCAddValueMaxLimit: 6;
    nRing22DCAddValueRate: 20;
    nRing22MCAddRate: 30;
    nRing22MCAddValueMaxLimit: 6;
    nRing22MCAddValueRate: 20;
    nRing22SCAddRate: 30;
    nRing22SCAddValueMaxLimit: 6;
    nRing22SCAddValueRate: 20;
    nRing23DCAddRate: 30;
    nRing23DCAddValueMaxLimit: 6;
    nRing23DCAddValueRate: 20;
    nRing23MCAddRate: 30;
    nRing23MCAddValueMaxLimit: 6;
    nRing23MCAddValueRate: 20;
    nRing23SCAddRate: 30;
    nRing23SCAddValueMaxLimit: 6;
    nRing23SCAddValueRate: 20;
    nRing23ACAddValueMaxLimit: 6;
    nRing23ACAddValueRate: 20;
    nRing23ACAddRate: 30;
    nRing23MACAddValueMaxLimit: 6;
    nRing23MACAddValueRate: 20;
    nRing23MACAddRate: 30;

    nBootsDCAddValueMaxLimit: 6;//20080503 极品鞋子加攻最高点
    nBootsDCAddValueRate: 20;
    nBootsDCAddRate: 30;
    nBootsSCAddValueMaxLimit: 6;
    nBootsSCAddValueRate: 20;
    nBootsSCAddRate: 30;
    //魔法
    nBootsMCAddValueMaxLimit: 6;
    nBootsMCAddValueRate: 20;
    nBootsMCAddRate: 30;
    //防御
    nBootsACAddValueMaxLimit: 6;
    nBootsACAddValueRate: 20;
    nBootsACAddRate: 30;
    //魔御
    nBootsMACAddValueMaxLimit: 6;
    nBootsMACAddValueRate: 20;
    nBootsMACAddRate: 30;

    nHelMetDCAddRate: 30;
    nHelMetDCAddValueMaxLimit: 6;
    nHelMetDCAddValueRate: 20;
    nHelMetMCAddRate: 30;
    nHelMetMCAddValueMaxLimit: 6;
    nHelMetMCAddValueRate: 20;
    nHelMetSCAddRate: 30;
    nHelMetSCAddValueMaxLimit: 6;
    nHelMetSCAddValueRate: 20;
    nHelMetACAddValueMaxLimit: 6;
    nHelMetACAddValueRate: 20;
    nHelMetACAddRate: 30;
    nHelMetMACAddValueMaxLimit: 6;
    nHelMetMACAddValueRate: 20;
    nHelMetMACAddRate: 30;

    nUnknowHelMetACAddRate: 20;
    nUnknowHelMetACAddValueMaxLimit: 4;
    nUnknowHelMetMACAddRate: 20;
    nUnknowHelMetMACAddValueMaxLimit: 4;
    nUnknowHelMetDCAddRate: 30;
    nUnknowHelMetDCAddValueMaxLimit: 3;
    nUnknowHelMetMCAddRate: 30;
    nUnknowHelMetMCAddValueMaxLimit: 3;
    nUnknowHelMetSCAddRate: 30;
    nUnknowHelMetSCAddValueMaxLimit: 3;
    nUnknowRingACAddRate: 20;
    nUnknowRingACAddValueMaxLimit: 4;
    nUnknowRingMACAddRate: 20;
    nUnknowRingMACAddValueMaxLimit: 4;
    nUnknowRingDCAddRate: 20;
    nUnknowRingDCAddValueMaxLimit: 6;
    nUnknowRingMCAddRate: 20;
    nUnknowRingMCAddValueMaxLimit: 6;
    nUnknowRingSCAddRate: 20;
    nUnknowRingSCAddValueMaxLimit: 6;
    nUnknowNecklaceACAddRate: 20;
    nUnknowNecklaceACAddValueMaxLimit: 5;
    nUnknowNecklaceMACAddRate: 20;
    nUnknowNecklaceMACAddValueMaxLimit: 5;
    nUnknowNecklaceDCAddRate: 30;
    nUnknowNecklaceDCAddValueMaxLimit: 5;
    nUnknowNecklaceMCAddRate: 30;
    nUnknowNecklaceMCAddValueMaxLimit: 5;
    nUnknowNecklaceSCAddRate: 30;
    nUnknowNecklaceSCAddValueMaxLimit: 5;
    nMonOneDropGoldCount: 2000;
    nMakeMineHitRate: 4; //挖矿命中率
    nMakeMineRate: 12; //挖矿率
    nStoneTypeRate: 120;
    nStoneTypeRateMin: 56;
    nGoldStoneMin: 1;
    nGoldStoneMax: 2;
    nSilverStoneMin: 3;
    nSilverStoneMax: 20;
    nSteelStoneMin: 21;
    nSteelStoneMax: 45;
    nBlackStoneMin: 46;
    nBlackStoneMax: 56;
    nStoneMinDura: 3000;
    nStoneGeneralDuraRate: 13000;
    nStoneAddDuraRate: 20;
    nStoneAddDuraMax: 10000;
    nWinLottery6Min: 1;
    nWinLottery6Max: 4999;
    nWinLottery5Min: 14000;
    nWinLottery5Max: 15999;
    nWinLottery4Min: 16000;
    nWinLottery4Max: 16149;
    nWinLottery3Min: 16150;
    nWinLottery3Max: 16169;
    nWinLottery2Min: 16170;
    nWinLottery2Max: 16179;
    nWinLottery1Min: 16180;
    nWinLottery1Max: 16185; //16180 + 1820;
    nWinLottery1Gold: 1000000;
    nWinLottery2Gold: 200000;
    nWinLottery3Gold: 100000;
    nWinLottery4Gold: 10000;
    nWinLottery5Gold: 1000;
    nWinLottery6Gold: 500;
    nWinLotteryRate: 30000;
    nWinLotteryCount: 0;
    nNoWinLotteryCount: 0;
    nWinLotteryLevel1: 0;
    nWinLotteryLevel2: 0;
    nWinLotteryLevel3: 0;
    nWinLotteryLevel4: 0;
    nWinLotteryLevel5: 0;
    nWinLotteryLevel6: 0;
    nSaveGlobalValIdx: 0;
    {//20080903注释
    GlobalVal: (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); }
    nItemNumber: 0;
    nItemNumberEx: High(Integer) div 2;
    nFengHaoNumber: 0;//称号制造ID
    nGuildRecallTime: 180;
    nGroupRecallTime: 180;
    boControlDropItem: False;
    boInSafeDisableDrop: False;
    nCanDropGold: 1000;
    nCanDropPrice: 500;
    boSendCustemMsg: True;
    boSubkMasterSendMsg: True;
    nSuperRepairPriceRate: 3; //特修价格倍数
    nRepairItemDecDura: 3; //普通修理掉持久数*100,为每次修理掉的持久值
    boDieScatterBag: True;
    nDieScatterBagRate: 3;
    boDieRedScatterBagAll: True;
    nDieDropUseItemRate: 30;
    nDieRedDropUseItemRate: 15;
    boDieDropGold: False;
    boKillByHumanDropUseItem: False;
    boKillByMonstDropUseItem: True;
    boKickExpireHuman: False;
    nGuildRankNameLen: 16;
    nGuildMemberMaxLimit: 200;
    nGuildNameLen: 16;
    nFree9YearsBoxID: 1;//免费奖励箱子ID
    nFirstOpen9Years: 1;
    nSecondOpen9Years: 2;
    nThreeOpen9Years: 4;
    nFourOpen9Years: 8;
    nAttackPosionRate: 5;
    nAttackPosionTime: 5;
    nAttackPosionRate1: 3;//麻痹成功机率(战意麻痹戒指)
    nAttackPosionTime1: 2;//麻痹时间(战意麻痹戒指)
    nAttackPosionRate2: 5;//麻痹成功机率(魔道麻痹戒指)
    nAttackPosionTime2: 2;//麻痹时间(魔道麻痹戒指)
    nAttackPosionRate3: 5;//麻痹成功机率(魔意麻痹戒指)
    nAttackPosionTime3: 3;//麻痹时间(魔意麻痹戒指)
    dwRevivalTime: 60000{60 * 1000}; //复活间隔时间
    dwRebirthTime: 300000;//重生间隔时间 20100720
    boUserMoveCanDupObj: False;
    boUserMoveCanOnItem: False;
    dwUserMoveTime: 10;
    dwPKDieLostExpRate: 1000;
    nPKDieLostLevelRate: 20000;
    nChallengeTime: 300;//挑战时间 20080706
    btNPCNameColor: $FF;//NPC名字颜色 20081218
    btPKFlagNameColor: $2F;
    btPKLevel1NameColor: $FB;
    btPKLevel2NameColor: $F9;
    btAllyAndGuildNameColor: $B4;
    btWarGuildNameColor: $45;
    btInFreePKAreaNameColor: $DD;
    boSpiritMutiny: False;
    dwSpiritMutinyTime: 1800000{30 * 60 * 1000};
    boHeroMutinyDie: False;
    boMasterTimeRoyalty: False;//宝宝叛变控制By TasNat at: 2012-11-03 14:25:55
    dwMasterTimeRoyaltyTime: 1000000000;
    boMasterDieMutiny: False;
    nMasterDieMutinyRate: 5;
    nMasterDieMutinyPower: 10;
    nMasterDieMutinySpeed: 5;
    boBBMonAutoChangeColor: False;
    dwBBMonAutoChangeColorTime: 3000;
    dwPetsMonDecMaxHapp: 10;//宠物日可减快乐度上限
    dwPetsMonIncMaxHapp: 150;//宠物日可加快乐度上限
    boOldClientShowHiLevel: True;
    boShowScriptActionMsg: True;
    boThreadRun: False;
    boShowExceptionMsg: False;//异常错误信息 默认关闭
    boShowPreFixMsg: True;
    boGMShowFailMsg: True;//GM命令错误是否提示 20080602
    boRecordClientMsg: False;//记录人物私聊，行会聊天信息 20081213
    nMagicAttackRage: 8; //魔法锁定范围
    nMagicAttackPassRage: 1; //魔法锁定范围
    sBoneFamm: '变异骷髅';
    nBoneFammCount: 1;
    sDogz: '神兽';
    nDogzCount: 1;
    sSacredName: '圣兽';//召唤圣兽怪物名
    nSacredCount: 1;//召唤圣兽数量
    sCallTroll: '冰眼巨魔';//0级召唤巨魔 迷你型巨魔
    sCallTroll1: '冰眼巨魔1';//1-2级召唤巨魔 中号迷你型巨魔
    sCallTroll2: '冰眼巨魔2';//3-4级召唤巨魔 大型巨魔
    sFireFairy: '火灵';//火灵名称
    nFireFairyCount: 1;//火灵数量(255)
    nFireFairyDuntRate: 6;//火灵重击几率(100),等级高于目标的几率
    nFireFairyDuntRateBelow: 4;//火灵重击次数,达到次数时按等级出重击
    nFireFairyAttackRate: 150;//火灵重击倍数(10)
    boFireFairyShareMasterMP: False;//火灵与主体共用蓝
    boFireFairyNeglectACMAC: True;//火灵无视防和魔防
    sFairy: '月灵';
    nFairyCount: 1;
    nFairyDuntRate :6;
    nFairyDuntRateBelow: 4;//月灵重击次数,达到次数时按等级出重击 20090105
    nFairyAttackRate :2;
    n43KillHitRate: 5; //开天斩重击几率   20080213
    n43KillAttackRate: 100; //开天斩重击倍数  20080213
    nAttackRate_43: 100;//开天斩威力 20080213
    nAttackRate_26: 100;//烈火剑法威力倍数 20081208
    nAttackRate_74: 100;//逐日剑法威力倍数 20080511
    nAmyOunsulPoint: 10;
    nMaxMakePosionTime : 36;
    boDisableInSafeZoneFireCross: False;
    boGroupMbAttackPlayObject: True;
    boGroupMbAttackPlayMon: False;//狮子吼是否对人形有效 20090413
    dwPosionDecHealthTime: 2500;
    sDiyMedicine: '';//自定义内挂药品
    nPosionDamagarmor: 12; //中红毒着持久及减防量（实际大小为 12 / 10）
    boLimitSwordLong: False;
    {$IF M2Version <> 2}
    sSkillStrongBoneFamm: '变异骷髅1';//强化召唤骷髅所召唤的怪物名
    sSkillStrongSacred: '圣兽2';//强化召唤圣兽怪物名
    boLimitSwordLongNG: False;
    {$IFEND}
    nSwordLongPowerRate: 100;
    nFireBoomRage: 1;
    nSnowWindRange: 1;
    nMeteorFireRainRage: 3;//流星火雨攻击范围 20080510
    nMagFireCharmTreatment: 10;//噬血术加血百分率 20080511
    nHeroNameColor: 6;//英雄名字颜色 20080315
    sHeroName: '英雄';//英雄名字 20080315
    sHeroNameSuffix: '的英雄';//英雄名后缀  20080315
    boNameSuffix: False;//是否显示后缀  20080315
    boProtectPickUpItem: False;//守护时可捡物品 20090723
    boStopProtectOnChangMap: False;//主人换地图停止守护By TasNat at: 2012-06-24 15:49:17
    boNoSafeProtect: False;//禁止安全区守护 20080603
    boHeroAttackTarget: False;//道法22前是否物理攻击 20081218
    boHeroAttackTao: False;//道22后是否物理攻击 20090108
    boHeroAttackNoFollow: False;//英雄攻击时不与主人切换地图 20090723
    boRestNoFollow: False;//英雄休息不跟随主人切换地图 20081209
    nElecBlizzardRange: 2;//地狱雷光攻击范围
    nHeroAttackRange_60: 5;//破魂斩 攻击范围 20080406
    nHeroAttackRange_63: 3;//噬魂沼泽 攻击范围 20080131
    nHeroAttackRange_64: 3;//末日审判 攻击范围 20081216
    nHeroAttackRange_65: 3;//火龙气焰 攻击范围 20080131
    nMagTurnUndeadLevel: 50; //圣言怪物等级限制
    nMagTammingLevel: 50; //诱惑之光怪物等级限制
    nMagTammingTargetLevel: 10; //诱惑怪物相差等级机率，此数字越小机率越大；
    nMagTammingHPRate: 100; //成功机率=怪物最高HP 除以 此倍率，此倍率越大诱惑机率越高
    nMagTammingCount: 5;
    boMagTammingHitNew: False;//诱惑之光怪物攻击速度算法
    nMabMabeHitRandRate: 100;
    nMabMabeHitMinLvLimit: 10;
    nMabMabeHitSucessRate: 21;
    nMabMabeHitMabeTimeRate: 20;
    sCASTLENAME: '沙巴克';
    sCastleHomeMap: '3';
    nCastleHomeX: 644;
    nCastleHomeY: 290;
    nCastleWarRangeX: 100;
    nCastleWarRangeY: 100;
    nCastleTaxRate: 5;
    boGetAllNpcTax: False;
    nHireGuardPrice: 300000;
    nHireArcherPrice: 300000;
    nCastleGoldMax: 10000000;
    nCastleOneDayGold: 2000000;
    nRepairDoorPrice: 2000000;
    nRepairWallPrice: 500000;
    nCastleMemberPriceRate: 80;
    nMaxHitMsgCount: 1;
    nMaxSpellMsgCount: 1;
    nMaxRunMsgCount: 1;
    nMaxWalkMsgCount: 1;
    nMaxTurnMsgCount: 1;
    nMaxSitDonwMsgCount: 1;
    nMaxDigUpMsgCount: 2;
    boSpellSendUpdateMsg: False;
    boActionSendActionMsg: False;
    boKickOverSpeed: False;
    btSpeedControlMode: 0;
    nOverSpeedKickCount: 4;
    dwDropOverSpeed: 10;
    dwHitIntervalTime: 900; //攻击间隔
    dwMagicHitIntervalTime: 800; //魔法间隔
    dwRunIntervalTime: 100; //跑步间隔
    dwWalkIntervalTime: 100; //走路间隔
    dwEatHPItemsIntervalTime: 300; //吃药间隔 20090301
    dwTurnIntervalTime: 100; //换方向间隔
    boControlActionInterval: True;
    boControlWalkHit: True;
    boControlRunLongHit: True;
    boControlRunHit: True;
    boControlRunMagic: True;
    dwActionIntervalTime: 350; //组合操作间隔
    dwRunLongHitIntervalTime: 800; //跑位刺杀间隔
    dwRunHitIntervalTime: 800; //跑位攻击间隔
    dwWalkHitIntervalTime: 800; //走位攻击间隔
    dwRunMagicIntervalTime: 900; //跑位魔法间隔
    boDisableStruck: False; //不显示人物弯腰动作
    boDisableSelfStruck: False; //自己不显示人物弯腰动作
    dwStruckTime: 100; //人物弯腰停留时间
    dwKillMonExpMultiple: 1; //杀怪经验倍数
    dwKillMonNGExpMultiple: 40; //杀怪内功经验倍数 20090104
    nNGSkillRate: 0;//内功技能增强的攻防比率
    nWarrNGLevelIncDC: 7;//战内功等级+攻 200990812
    nWarrNGLevelIncAC: 11;//战内功等级+防 200990812
    nWizardNGLevelIncDC: 8;//法内功等级+攻 200990812
    nWizardNGLevelIncAC: 14;//法内功等级+防 200990812
    nTaosNGLevelIncDC: 8;//道内功等级+攻
    nTaosNGLevelIncAC: 14;//道内功等级+防
{$IF SoftVersion = VERENT}
    dwRequestVersion: 98;
{$ELSE}
    dwRequestVersion: RequestVersion;
{$IFEND}
    boHighLevelKillMonFixExp: False;
    boAddUserItemNewValue: True;
    sLineNoticePreFix: '【公告】';
    sSysMsgPreFix: '【系统】';
    sGuildMsgPreFix: '【行会】';
    sGroupMsgPreFix: '【组队】';
    sHintMsgPreFix: '【提示】';
    sGMRedMsgpreFix: '【ＧＭ】';
    sMonSayMsgpreFix: '【怪物】';
    sCustMsgpreFix: '【祝福】';
    sCastleMsgpreFix: '【城主】';
    {$IF M2Version <> 2}
    sDivisionMsgPreFix: '【师门】';
    sDivisionNotice: '公告';
    sDivisionChief: '掌门';
    sDivisionMember: '师门成员';
    sApplyDivision: '申请入门';
    {$IFEND}
    sGuildNotice: '公告';
    sGuildWar: '敌对行会';
    sGuildAll: '联盟行会';
    sGuildMember: '行会成员';
    sGuildMemberRank: '行会成员';
    sGuildChief: '掌门人';
    boKickAllUser: False;
    boTestSpeedMode: False;

    nWeaponMakeUnLuckRate: 20;
    nWeaponMakeLuckPoint1: 1;
    nWeaponMakeLuckPoint2: 3;
    nWeaponMakeLuckPoint3: 7;
    nWeaponMakeLuckPoint2Rate: 6;
    nWeaponMakeLuckPoint3Rate: 10 + 30;
    boCheckUserItemPlace: True;
{$IF DEMOCLIENT = 1}
    nClientKey: 6534;
{$ELSE}
    nClientKey: 500;
{$IFEND}
    nLevelValueOfTaosHP: 6;
    nLevelValueOfTaosHPRate: 2;
    nLevelValueOfTaosMP: 8;
    nLevelValueOfWizardHP: 15;
    nLevelValueOfWizardHPRate: 1;
    nLevelValueOfWarrHP: 4;
    nLevelValueOfWarrHPRate: 4;

    nProcessMonsterInterval: {2}13;//20090423 修改，此参数控制，怪看不到人时，是否执行RUN过程
    //nUserSellOffCount: 5; //拍卖数量  //20080504 去掉拍卖功能
    //nUserSellOffTax: 10; //征收税率    //20080504 去掉拍卖功能
    nDecUserGameGold: 1;//每次扣多少元宝(元宝寄售) 20080319
    boOpenSelfShop: True;//是否开放个人商店
    boSafeZoneShop: True;//只允许安全区使用个人商店
    boMapShop: False;//只允许指定地图使用个人商店
    boSafeOffShop: False;//禁止挂机摆摊
    nCanShopLevel: 0;//可摆摊所需的等级
    nMakeWineTime: 300;//酿普通酒等待时间 20080621
    nMakeWineTime1: 900;//酿药酒等待时间 20080621
    nMakeWineRate: 10;//酿酒获得酒曲机率 20080621
    nMakeWineLevelRate: 30;//酿酒获得酒等级机率 20091117
    nIncAlcoholTick: 30;//增加酒量进度的间隔时间 20080623
    nDesDrinkTick: 25;//减少醉酒度的间隔时间 20080623
    nMaxAlcoholValue: 2000;//酒量上限初始值 20080623
    nIncAlcoholValue: 10;//升级后增加酒量上限值 20080623
    nDesMedicineValue: 1;//长时间不使用酒,减药力值 20080623
    nDesMedicineTick: 43200;//减药力值时间间隔 20080624
{$IF M2Version = 1}
    nDesAlcoholValue: 1;//长时间使用酒，减酒量
    nDesAlcoholTick: 1440;//减酒量时间间隔
    nDesMaxAlcoholValue: 3500;//超过指定酒量时才减酒量
    boAssignmentCryst: False;//启用天地结等级赋值功能
    nCRYSTALLEVEL1: 1;//天地结晶1等级时，<$CRYSTALLEVEL>对应的值
    nCRYSTALLEVEL2: 2;//天地结晶2等级时，<$CRYSTALLEVEL>对应的值
    nCRYSTALLEVEL3: 3;//天地结晶3等级时，<$CRYSTALLEVEL>对应的值
    nCRYSTALLEVEL4: 4;//天地结晶4等级时，<$CRYSTALLEVEL>对应的值
    nSkill95EffectPowerWarror: 50;//斗转星移生效伤害值(战)
    nSkill95EffectRateWarror: 4;//斗转星移生效机率(战)
    nSkill95DecInjuryWarror: 10;//斗转星移减伤害比例(战)
    nSkill95EffectPowerWizard: 40;//斗转星移生效伤害值(法)
    nSkill95EffectRateWizard: 4;//斗转星移生效机率(法)
    nSkill95DecInjuryWizard: 10;//斗转星移减伤害比例(法)
    nSkill95EffectPowerTaoist: 40;//斗转星移生效伤害值(道)
    nSkill95EffectRateTaoist: 4;//斗转星移生效机率(道)
    nSkill95DecInjuryTaoist: 10;//斗转星移减伤害比例(道)
    nSkill95LevelDecInjury: 0;//斗转星移每X级减伤害比例1%
    nJingYuanValue: 10000;//精元值上限
    nIncJingYuanValueTime: 1800;//增加精元值间隔
    nIncTransferValueTime: 15000;//恢复斗转值间隔
    nLianqiGold: 10000;//炼气所需金币数
    nLianqiGameGird: 1;//强化炼气所需灵符数
    nAutoExpSkill95: 30;//自动修炼斗转星移时，一次所得的经验，单位万
{$IFEND}
    boFairyShareMasterMP: False;//月灵与主体共用蓝
    boFairyUseDBHitTime: False;//月灵使用DB攻击速度 20110729
    nInFountainTime: 10;//站在泉眼上的累积时间(秒) 20080624
    nMinGuildFountain: 50;//行会酒泉蓄量少于时,不能领取 20080627
    nDecGuildFountain: 50;//行会成员领取酒泉,蓄量减少 20080627
    nHeroCrystalExpRate: 12;//天地结晶英雄分配比例 20090202
    nUseItmeToMonRate: 5;//攻击富贵兽触发脚本段的机率 20090518
    nMonGameGird: 10;//富贵兽初始灵符数 20090518
    boShowMonSysHint: True;//富贵兽累积灵符是否提示 20090603
    nIncMonGameGird: 1;//攻击狂暴状态富贵兽累计灵符数 20090519
    nMon79CrazyRate: 20;//富贵兽狂暴机率
    nMon79CrazyTime: 180;//富贵兽狂暴时长
    nGetCattleGasvalue: 100;//攻击富贵兽所取得牛气值 20090519
    nAutoOpenBoxID1: 0;//牛气管升1级后自动打开箱子的编号 20090520
    nAutoOpenBoxID2: 0;//牛气管升级2级后自动打开箱子的编号 20090524
    nAutoOpenBoxID3: 0;//牛气管升级3级后自动打开箱子的编号 20090524
    nAutoOpenBoxID4: 0;//牛气管升级4级后自动打开箱子的编号 20090524
{$IF M2Version <> 2}
    nArmsDCAddValueMaxLimit: 5;
    nArmsDCAddValueRate: 15;
    nArmsDCAddRate: 20;

    nArmsMCAddValueMaxLimit: 5;//武器+魔最高点
    nArmsMCAddValueRate: 15;//武器+魔点数机率
    nArmsMCAddRate: 20;//武器+魔机率

    nArmsSCAddValueMaxLimit: 5;//武器+道最高点
    nArmsSCAddValueRate: 15;//武器+道点数机率
    nArmsSCAddRate: 20;//武器+道机率

    nArmsMainAddValueMaxLimit: 10;//武器+主属性最高点
    nArmsMainAddValueRate: 20;//武器+主属性点数机率
    nArmsMainAddRate: 25;//武器+主属性机率

    nArmsQSAddValueMaxLimit: 5;//武器+强身最高点
    nArmsQSAddValueRate: 15;//武器+强身点数机率
    nArmsQSAddRate: 20;//武器+强身机率

    nArmsJMAddValueMaxLimit: 20;//武器+聚魔最高点
    nArmsJMAddValueRate: 15;//武器+聚魔点数机率
    nArmsJMAddRate: 20;//武器+聚魔机率

    nArmsNSAddValueMaxLimit: 5;//武器+内伤最高点
    nArmsNSAddValueRate: 15;//武器+内伤点数机率
    nArmsNSAddRate: 20;//武器+内伤机率

    nArmsBJAddValueMaxLimit: 5;//武器+暴击最高点
    nArmsBJAddValueRate: 15;//武器+暴击点数机率
    nArmsBJAddRate: 20;//武器+暴击机率

    nArmsHJAddValueMaxLimit: 50;//武器+合击最高点
    nArmsHJAddValueRate: 15;//武器+合击点数机率
    nArmsHJAddRate: 20;//武器+合击机率

    nArmsMBAddValueMaxLimit: 20;//武器+麻痹最高点
    nArmsMBAddValueRate: 15;//武器+麻痹点数机率
    nArmsMBAddRate: 20;//武器+麻痹机率

    nArmsFBAddValueMaxLimit: 10;//武器+防暴最高点
    nArmsFBAddValueRate: 15;//武器+防暴点数机率
    nArmsFBAddRate: 20;//武器+防暴机率

    nArmsZQAddValueMaxLimit: 10;//武器+准确最高点
    nArmsZQAddValueRate: 15;//武器+准确点数机率
    nArmsZQAddRate: 20;//武器+准确机率

    nDreDCAddValueMaxLimit: 10;//衣服+攻最高点
    nDreDCAddValueRate: 15;//衣服+攻点数机率
    nDreDCAddRate: 20;//衣服+攻机率

    nDreMCAddValueMaxLimit: 10;//衣服+魔最高点
    nDreMCAddValueRate: 15;//衣服+魔点数机率
    nDreMCAddRate: 20;//衣服+魔机率

    nDreSCAddValueMaxLimit: 10;//衣服+道最高点
    nDreSCAddValueRate: 15;//衣服+道点数机率
    nDreSCAddRate: 20;//衣服+道机率

    nDreMainAddValueMaxLimit: 10;//衣服+主属性最高点
    nDreMainAddValueRate: 15;//衣服+主属性点数机率
    nDreMainAddRate: 20;//衣服+主属性机率

    nDreQSAddValueMaxLimit: 10;//衣服+强身最高点
    nDreQSAddValueRate: 15;//衣服+强身点数机率
    nDreQSAddRate: 20;//衣服+强身机率

    nDreJMAddValueMaxLimit: 10;//衣服+聚魔最高点
    nDreJMAddValueRate: 15;//衣服+聚魔点数机率
    nDreJMAddRate: 20;//衣服+聚魔机率

    nDreXXAddValueMaxLimit: 10;//衣服+吸血最高点
    nDreXXAddValueRate: 15;//衣服+吸血点数机率
    nDreXXAddRate: 20;//衣服+吸血机率

    nDreBJAddValueMaxLimit: 10;//衣服+暴击最高点
    nDreBJAddValueRate: 15;//衣服+暴击点数机率
    nDreBJAddRate: 20;//衣服+暴击机率

    nDreHJAddValueMaxLimit: 50;//衣服+合击最高点
    nDreHJAddValueRate: 15;//衣服+合击点数机率
    nDreHJAddRate: 20;//衣服+合击机率

    nDreMBAddValueMaxLimit: 20;//衣服+麻痹最高点
    nDreMBAddValueRate: 15;//衣服+麻痹点数机率
    nDreMBAddRate: 20;//衣服+麻痹机率

    nDreNLAddValueMaxLimit: 10;//衣服+内力恢复最高点
    nDreNLAddValueRate: 15;//衣服+内力恢复点数机率
    nDreNLAddRate: 20;//衣服+内力恢复机率

    nDreWFAddValueMaxLimit: 10;//衣服+物防最高点
    nDreWFAddValueRate: 15;//衣服+物防点数机率
    nDreWFAddRate: 20;//衣服+物防机率

    nNecklaceDCAddValueMaxLimit: 10;//项链+攻最高点
    nNecklaceDCAddValueRate: 15;//项链+攻点数机率
    nNecklaceDCAddRate: 20;//项链+攻机率

    nNecklaceMCAddValueMaxLimit: 10;//项链+魔最高点
    nNecklaceMCAddValueRate: 15;//项链+魔点数机率
    nNecklaceMCAddRate: 20;//项链+魔机率

    nNecklaceSCAddValueMaxLimit: 10;//项链+道最高点
    nNecklaceSCAddValueRate: 15;//项链+道点数机率
    nNecklaceSCAddRate: 20;//项链+道机率

    nNecklaceMainAddValueMaxLimit: 10;//项链+主属性最高点
    nNecklaceMainAddValueRate: 15;//项链+主属性点数机率
    nNecklaceMainAddRate: 25;//项链+主属性机率

    nNecklaceQSAddValueMaxLimit: 10;//项链+强身最高点
    nNecklaceQSAddValueRate: 15;//项链+强身点数机率
    nNecklaceQSAddRate: 20;//项链+强身机率

    nNecklaceXXAddValueMaxLimit: 10;//项链+吸血最高点
    nNecklaceXXAddValueRate: 15;//项链+吸血点数机率
    nNecklaceXXAddRate: 20;//项链+吸血机率

    nNecklaceNLAddValueMaxLimit: 10;//项链+内力恢复最高点
    nNecklaceNLAddValueRate: 15;//项链+内力恢复点数机率
    nNecklaceNLAddRate: 20;//项链+内力恢复机率

    nNecklaceMFAddValueMaxLimit: 10;//项链+魔防最高点
    nNecklaceMFAddValueRate: 15;//项链+魔防点数机率
    nNecklaceMFAddRate: 20;//项链+魔防机率

    nNecklaceHJAddValueMaxLimit: 50;//项链+合击威力最高点
    nNecklaceHJAddValueRate: 15;//项链+合击威力点数机率
    nNecklaceHJAddRate: 20;//项链+合击威力机率

    nBraceletDCAddValueMaxLimit: 10;//手镯+攻最高点
    nBraceletDCAddValueRate: 15;//手镯+攻点数机率
    nBraceletDCAddRate: 20;//手镯+攻机率

    nBraceletMCAddValueMaxLimit: 10;//手镯+魔最高点
    nBraceletMCAddValueRate: 15;//手镯+魔点数机率
    nBraceletMCAddRate: 20;//手镯+魔机率

    nBraceletSCAddValueMaxLimit: 10;//手镯+道最高点
    nBraceletSCAddValueRate: 15;//手镯+道点数机率
    nBraceletSCAddRate: 20;//手镯+道机率

    nBraceletMainAddValueMaxLimit: 10;//手镯+主属性最高点
    nBraceletMainAddValueRate: 15;//手镯+主属性点数机率
    nBraceletMainAddRate: 20;//手镯+主属性机率

    nBraceletQSAddValueMaxLimit: 10;//手镯+强身最高点
    nBraceletQSAddValueRate: 15;//手镯+强身点数机率
    nBraceletQSAddRate: 20;//手镯+强身机率

    nBraceletXXAddValueMaxLimit: 10;//手镯+吸血最高点
    nBraceletXXAddValueRate: 15;//手镯+吸血点数机率
    nBraceletXXAddRate: 20;//手镯+吸血机率

    nBraceletNLAddValueMaxLimit: 10;//手镯+内力恢复最高点
    nBraceletNLAddValueRate: 15;//手镯+内力恢复点数机率
    nBraceletNLAddRate: 20;//手镯+内力恢复机率

    nBraceletMFAddValueMaxLimit: 10;//手镯+魔防最高点
    nBraceletMFAddValueRate: 15;//手镯+魔防点数机率
    nBraceletMFAddRate: 20;//手镯+魔防机率

    nBraceletHJAddValueMaxLimit: 50;//手镯+合击威力最高点
    nBraceletHJAddValueRate: 15;//手镯+合击威力点数机率
    nBraceletHJAddRate: 20;//手镯+合击威力机率

    nRingDCAddValueMaxLimit: 5;//戒指+攻最高点
    nRingDCAddValueRate: 10;//戒指+攻点数机率
    nRingDCAddRate: 15;//戒指+攻机率

    nRingMCAddValueMaxLimit: 5;//戒指+魔最高点
    nRingMCAddValueRate: 10;//戒指+魔点数机率
    nRingMCAddRate: 15;//戒指+魔机率

    nRingSCAddValueMaxLimit: 5;//戒指+道最高点
    nRingSCAddValueRate: 10;//戒指+道点数机率
    nRingSCAddRate: 15;//戒指+道机率

    nRingMainAddValueMaxLimit: 5;//戒指+主属性最高点
    nRingMainAddValueRate: 10;//戒指+主属性点数机率
    nRingMainAddRate: 15;//戒指+主属性机率

    nRingQSAddValueMaxLimit: 4;//戒指+强身最高点
    nRingQSAddValueRate: 10;//戒指+强身点数机率
    nRingQSAddRate: 15;//戒指+强身点机率

    nRingJMAddValueMaxLimit: 5;//戒指+聚魔最高点
    nRingJMAddValueRate: 10;//戒指+聚魔点数机率
    nRingJMAddRate: 15;//戒指+聚魔机率

    nRingXXAddValueMaxLimit: 5;//戒指+吸血最高点
    nRingXXAddValueRate: 10;//戒指+吸血点数机率
    nRingXXAddRate: 15;//戒指+吸血机率

    nRingFBAddValueMaxLimit: 5;//戒指+防爆最高点
    nRingFBAddValueRate: 10;//戒指+防爆点数机率
    nRingFBAddRate: 14;//戒指+防爆机率

    nRingHJAddValueMaxLimit: 20;//戒指+合击威力最高点
    nRingHJAddValueRate: 15;//戒指+合击威力点数机率
    nRingHJAddRate: 20;//戒指+合击威力机率

    nRingMBAddValueMaxLimit: 5;//戒指+麻痹最高点
    nRingMBAddValueRate: 10;//戒指+麻痹点数机率
    nRingMBAddRate: 15;//戒指+麻痹机率

    nRingNLAddValueMaxLimit: 5;//戒指+内力恢复最高点
    nRingNLAddValueRate: 10;//戒指+内力恢复点数机率
    nRingNLAddRate: 15;//戒指+内力恢复机率

    nRingWFAddValueMaxLimit: 4;//戒指+物防最高点
    nRingWFAddValueRate: 10;//戒指+物防点数机率
    nRingWFAddRate: 10;//戒指+物防机率

    nHelmeDCAddValueMaxLimit: 4;//头盔+攻最高点
    nHelmeDCAddValueRate: 10;//头盔+攻点数机率
    nHelmeDCAddRate:10;//头盔+攻机率

    nHelmeMCAddValueMaxLimit: 4;//头盔+魔最高点
    nHelmeMCAddValueRate: 10;//头盔+魔点数机率
    nHelmeMCAddRate: 10;//头盔+魔机率

    nHelmeSCAddValueMaxLimit: 4;//头盔+道最高点
    nHelmeSCAddValueRate: 10;//头盔+道点数机率
    nHelmeSCAddRate: 10;//头盔+道机率

    nHelmeMainAddValueMaxLimit: 4;//头盔+主属性最高点
    nHelmeMainAddValueRate: 10;//头盔+主属性点数机率
    nHelmeMainAddRate: 10;//头盔+主属性机率

    nHelmeQSAddValueMaxLimit: 4;//头盔+强身最高点
    nHelmeQSAddValueRate: 10;//头盔+强身点数机率
    nHelmeQSAddRate: 10;//头盔+强身点机率

    nHelmeXXAddValueMaxLimit: 4;//头盔+吸血最高点
    nHelmeXXAddValueRate: 10;//头盔+吸血点数机率
    nHelmeXXAddRate: 10;//头盔+吸血机率

    nHelmeHJAddValueMaxLimit: 5;//头盔+合击威力最高点
    nHelmeHJAddValueRate: 10;//头盔+合击威力点数机率
    nHelmeHJAddRate: 10;//头盔+合击威力机率

    nShoesDCAddValueMaxLimit: 4;//鞋子+攻最高点
    nShoesDCAddValueRate: 10;//鞋子+攻点数机率
    nShoesDCAddRate: 10;//鞋子+攻机率

    nShoesMCAddValueMaxLimit: 4;//鞋子+魔最高点
    nShoesMCAddValueRate: 10;//鞋子+魔点数机率
    nShoesMCAddRate: 10;//鞋子+魔机率

    nShoesSCAddValueMaxLimit: 4;//鞋子+道最高点
    nShoesSCAddValueRate: 10;//鞋子+道点数机率
    nShoesSCAddRate: 10;//鞋子+道机率

    nShoesMainAddValueMaxLimit: 4;//鞋子+主属性最高点
    nShoesMainAddValueRate: 10;//鞋子+主属性点数机率
    nShoesMainAddRate: 10;//鞋子+主属性机率

    nShoesQSAddValueMaxLimit: 4;//鞋子+强身最高点
    nShoesQSAddValueRate: 10;//鞋子+强身点数机率
    nShoesQSAddRate: 10;//鞋子+强身点机率

    nShoesJMAddValueMaxLimit: 4;//鞋子+聚魔最高点
    nShoesJMAddValueRate: 10;//鞋子+聚魔点数机率
    nShoesJMAddRate: 10;//鞋子+聚魔机率

    nShoesHJAddValueMaxLimit: 4;//鞋子+合击威力最高点
    nShoesHJAddValueRate: 10;//鞋子+合击威力点数机率
    nShoesHJAddRate: 10;//鞋子+合击威力机率

    nMedalDCAddValueMaxLimit: 4;//勋章+攻最高点
    nMedalDCAddValueRate: 10;//勋章+攻点数机率
    nMedalDCAddRate: 10;//勋章+攻机率

    nMedalMCAddValueMaxLimit: 4;//勋章+魔最高点
    nMedalMCAddValueRate: 10;//勋章+魔点数机率
    nMedalMCAddRate: 10;//勋章+魔机率

    nMedalSCAddValueMaxLimit: 4;//勋章+道最高点
    nMedalSCAddValueRate: 10;//勋章+道点数机率
    nMedalSCAddRate: 10;//勋章+道机率

    nMedalMainAddValueMaxLimit: 4;//勋章+主属性最高点
    nMedalMainAddValueRate: 10;//勋章+主属性点数机率
    nMedalMainAddRate: 10;//勋章+主属性机率

    nMedalQSAddValueMaxLimit: 4;//勋章+强身等级最高点
    nMedalQSAddValueRate: 10;//勋章+强身等级点数机率
    nMedalQSAddRate: 10;//勋章+强身等级机率

    nMedalJMAddValueMaxLimit: 4;//勋章+聚魔最高点
    nMedalJMAddValueRate: 10;//勋章+聚魔点数机率
    nMedalJMAddRate: 10;//勋章+聚魔机率

    nMedalFBAddValueMaxLimit: 4;//勋章+防爆最高点
    nMedalFBAddValueRate: 10;//勋章+防爆点数机率
    nMedalFBAddRate: 10;//勋章+防爆机率

    nMedalBJAddValueMaxLimit: 4;//勋章+暴击最高点
    nMedalBJAddValueRate: 10;//勋章+暴击点数机率
    nMedalBJAddRate: 10;//勋章+暴击机率

    nMedalHJAddValueMaxLimit: 4;//勋章+合击威力最高点
    nMedalHJAddValueRate: 10;//勋章+合击威力点数机率
    nMedalHJAddRate: 10;//勋章+合击威力机率

    nMedalMBAddValueMaxLimit: 4;//勋章+麻痹抗性最高点
    nMedalMBAddValueRate: 10;//勋章+麻痹抗性点数机率
    nMedalMBAddRate: 10;//勋章+麻痹抗性机率

    nMedalNLAddValueMaxLimit: 4;//勋章+内力恢复最高点
    nMedalNLAddValueRate: 10;//勋章+内力恢复点数机率
    nMedalNLAddRate: 10;//勋章+内力恢复机率

    nMedalNSAddValueMaxLimit: 4;//勋章+内伤等级最高点
    nMedalNSAddValueRate: 10;//勋章+内伤等级点数机率
    nMedalNSAddRate: 10;//勋章+内伤等级机率

    nMysteryAddValueMaxLimit: 4;//神秘属性最高点
    nMysteryAddValueRate: 10;//神秘属性点数机率
    nMysteryAddRate: 20;//神秘属性机率

    nReadRate:(100, 150, 200, 250);//解读属性机率
    nRebirthRate: 110;//重生技能机率
    nMagicShieldRate: 110;//八卦护身技能机率
    nParalysisRate: 130;//麻痹技能机率
    nParalysis2Rate: 130;//魔道麻痹技能机率
    nParalysis1Rate: 130;//战意麻痹技能机率
    nProbeNecklaceRate: 100;//探测技能机率
    nTeleportRate: 120;//传送技能机率
    nSpiritMediaAddValueRate: 5;//宝物灵媒点数机率
    nSpiritMediaAddRate: 10;//宝物灵媒机率
    nMaxAuraValue: 20;//属性灵气值上限
    nFindJewelRave: 3;//使用灵媒探索宝物成功率
    nDigJewelHitRate: 3;//挖宝命中机率
    nGetDigJewelRave: 5;//得宝机率
    nDecDigJewelDuraRate: 65535;//得宝减装备品质机率
    boUseCanKamPo: True;//是否开启鉴定系统
    boOffLineEnergy: False;//禁止挂机增加精力值
    nEnergyValueTime: 3600;//增加精力值间隔 
    nJudgePrice: 100000;//品评价格
    boJudgeUseGold: True;//品评价使用金币
    nMakeScrollRate: (15,18,23,28);//制造神秘卷轴机率
    nAdvancedKamPo: 200;//高级鉴定成功机率
    sDreReplaceMan: '主宰神甲(男)';//衣服(男)替换
    sDreReplaceWoman: '主宰神甲(女)';//衣服(女)替换
    sArmsReplace: '主宰神剑';//武器替换
    sNecklaceReplace: '主宰项链';//项链替换
    sBraceletReplace: '主宰护腕';//手镯替换
    sRingReplace: '主宰之戒';//戒指替换
    sHelmeReplace: '主宰之冠';//头盔替换
    sBeltReplace: '主宰腰带';//腰带替换
    sShoesReplace: '主宰之靴';//鞋子替换
    sHatsReplace: '主宰斗笠';//斗笠替换
    sWashclothReplace: '主宰面巾';//面巾替换
    sMedalReplace: '主宰勋章';//勋章替换
{$IFEND}
    dwNewKamPoLockNeed1 : 10;
    dwNewKamPoLockNeed2 : 1;

    dwNewKamPoNeed1 : 10;
    dwNewKamPoNeed2 : 1;
    boPlayObjectReduceMP: True;
    boGroupMbAttackSlave: False;
    nBigStorageLimitCount: 100;
    boDropGoldToPlayBag: True;
    boChangeUseItemNameByPlayName: True;
    sChangeUseItemName: '〖改〗';
    boUseFixExp: True;
    nBaseExp: 100000000;
    nAddExp: 1000000;
    nKill55UseTime: 1;//擒龙手使用间隔
    nKill43UseTime: 10;//开天斩使用间隔 20080204
    nDedingUseTime: 10;
    nAbilityUpTick: 15;//无极真气使用间隔 20080603
    boAbilityUpFixMode: False;//无极真气使用时长模式 20081109
    boAbilityAddMode: True;//无极真气是否同时增加上下限
    boDecSuitItemMode: False;//无极真气不考虑套装所增加的道术
    boDecMag105SC: True;//无极真气不考虑套装所增加的道术
    nAbilityUpFixUseTime: 6;//无极真气使用固定时长 20081109
    nAbilityUpUseTime: 0;//无极真气使用时长 20080603
    nMinDrinkValue67: 5;//先天元力失效酒量下限比例 20080626
    nMinDrinkValue68: 5;//酒气护体失效酒量下限比例 20080626
    nHPUpTick: 0;//酒气护体使用间隔 20080625
    nHPUpUseTime: 0;//酒气护体增加使用时长 20080625
    boMon109AutoTrun: False;//押镖怪遇目标挡路自动转向
    boMon109ShowHint: True;//押镖怪提示开启
    nShowHintMon109: 300;//押镖怪提示时长
    nLimitItemTime: 48;//限时绑定时长
    boDedingAllowPK: True;
    boRegenMonsters: True;

    nMakeSelfTick: 60;//分身使用时长 20080404
    nCopyHumanTick: 10;//召唤分身的间隔 20080204
    nCopyHumanBagCount: 40;
    nCopyHumNameColor: 6;//分身名字颜色 20080404
    nAllowCopyHumanCount: 1;
    boAttackMasterTarget: False;//分身与主体攻击同一目标 20100408
    boAddMasterName: True;
    sCopyHumName: '的分身';
    nCopyHumAddHPRate: 60;
    nCopyHumAddMPRate: 60;
    sCopyHumBagItems1: '超级金创药,超级魔法药';
    sCopyHumBagItems2: '超级金创药,超级魔法药';
    sCopyHumBagItems3: '超级金创药,超级魔法药,灰色药粉(大量),黄色药粉(大量),护身符(大)';
    boAllowGuardAttack: False;
    dwWarrorAttackTime: 1200;
    dwWizardAttackTime: 1200;
    dwTaoistAttackTime: 1200;
    boAllowReCallMobOtherHum: True;
    boNeedLevelHighTarget: True;

    dwGetDBSockMsgTime: 5000;
    boPullCrossInSafeZone: True;
    boHighLevelGroupFixExp: True;
    boStartMapEvent: False;
    boStartRevivalTick: False;//是否登陆时初始复活计数 20100704
    boStartRebirthTick: False;//是否登陆时初始重生戒指计数 20100720
    boUnderWarMove: False;//攻城期复活传送回攻方复活点
    boUseNewAttackFFT_96: False;//是否使用新算法计算血魄技能威力 20100704
    boUnKnowHum: True;//带上斗笠是否显示神秘人 20080424
    boOneRingXiXue: True;//带上斗笠是否显示神秘人 20080424
    boSaveExpRate: True;//是否保存双倍经验时间 20080412
    boSaveHighLevelKillMonFixExp: True;//是否保存真视经验时间 20090213
    boContinuousUpLevel: False;//是否使用连续升级
    nLimitExpLevel: 1000;
    nLimitExpLevelHero: 200;//限制英雄等级 20110113
    nLimitExpValue: 1;

    boChangeMapFireExtinguish: True;
    nFireDelayTimeRate: 100;
    nFirePowerRate: 100;
    nFireMaxTime  : 10*60;
    nDidingPowerRate: 100;

    nStrength1DecGold: 50;//低强度减金币
    nStrength1DecGameGird: 0;//低强度减灵符
    nStrength1Exp: 5;//低强度每秒经验
    nStrength2DecGold:  50;//中强度减金币
    nStrength2DecGameGird: 1;//中强度减灵符
    nStrength2Exp: 10;//中强度每秒经验
    nStrength3DecGold:  50;//高强度减金币
    nStrength3DecGameGird: 10;//高强度减灵符
    nStrength3Exp: 15;//高强度每秒经验
    boUseCanHero: True;//是否开放英雄系统
    boUseCanDivision: True;//是否开放师门系统
    
    nHeroProtectLevel: 1;//英雄守护需等级
    nHeroStartLevel: 1;
    nDrinkHeroStartLevel: 7;//卧龙英雄开始等级 20080514
    nHeroKillMonExpRate: 40;
    nHeroNoKillMonExpRate: 10;//20080803 非杀怪分配经验比例
    nHeroBagItemCount: (1, 20, 30, 35 , 40);
    dwHeroWarrorAttackTime: 660;
    dwHeroWizardAttackTime: 880;
    dwHeroTaoistAttackTime: 880;

    boHeroKillByMonstDropUseItem: True;
    boHeroKillByHumanDropUseItem: False;
    boHeroDieScatterBag: True;
    boHeroNoTargetCall: False;//英雄无目标下可召唤宝宝 20080615
    boHeroDieExp: False;//英雄死亡掉经验 20080605
    nHeroDieExpRate: 1000;//英雄死亡掉经验比率 20080605
    boHeroDieRedScatterBagAll: True;
    nHeroDieDropUseItemRate: 30;
    nHeroDieRedDropUseItemRate: 15;
    nHeroDieScatterBagRate: 3;

    boAutoHeroUseEat: False;//英雄自动吃药
    nHeroAddHPRate: 60;
    nHeroAddMPRate: 60;
    nHeroAddHPMPTick: 2000;//战普通药速度 20080601
    nHeroAddHPRate1: 60;//20080910
    nHeroAddMPRate1: 60;//20080910
    nHeroAddHPMPTick1: 2000;//战特殊药速度 20080910
    nHeroAddHPMPTickA: 2000;//道法普通药速度
    nHeroAddHPMPTickB: 2000;//道法特殊药速度
{$IF M2Version <> 2}
    nSKILL_7Strong: (2,7,15,21,32,42,52,62,83);//强化攻杀剑术所需心法等级
    nSKILL_90Strong:(3,9,17,23,34,44,54,64,89);//强化圆月弯刀所需心法等级
    nSKILL_89Strong:(5,11,19,25,36,46,56,66,92);//强化刺杀剑术所需心法等级
    nSKILL_26Strong:(13,27,38,48,58,68,74,76,96);//强化烈火剑法所需心法等级
    nSKILL_74Strong:(30,40,50,60,70,72,78,86,100);//强化逐日剑法所需心法等级

    nSKILL_91Strong: (2,7,15,21,32,42,52,62,83);//强化雷电术所需心法等级
    nSKILL_10Strong: (3,9,17,23,34,44,54,64,89);//强化疾光电影所需心法等级
    nSKILL_22Strong: (5,11,19,25,36,46,56,66,92);//强化火墙所需心法等级
    nSKILL_45Strong: (13,27,38,48,58,68,74,76,96);//强化灭天火所需心法等级
    nSKILL_92Strong: (30,40,50,60,70,72,78,86,100);//强化流星火雨所需心法等级

    nSKILL_93Strong: (2,7,15,21,32,42,52,62,83);//强化施毒术所需心法等级
    nSKILL_13Strong: (3,9,17,23,34,44,54,64,89);//强化灵魂火符所需心法等级
    nSKILL_17Strong: (5,11,19,25,36,46,56,66,92);//强化召唤骷髅所需心法等级
    nSKILL_71Strong: (13,27,38,48,58,68,74,76,96);//强化召唤圣兽所需心法等级
    nSKILL_94Strong: (30,40,50,60,70,72,78,86,100);//强化噬血术所需心法等级
    
    nSKILL_FIREBOOMStrong: (3,9,17,23,34,44,54,64,89);//强化爆裂火焰所需心法等级
    nSKILL_SNOWWINDStrong: (3,9,17,23,34,44,54,64,89);//强化冰咆哮所需心法等级
    nSKILL_HANGMAJINBUBStrong: (3,9,17,23,34,44,54,64,89);//强化幽灵盾所需心法等级
    nSKILL_DEJIWONHOStrong: (3,9,17,23,34,44,54,64,89);//强化神圣战甲术所需心法等级
    nSKILL_107NeedHeart: (3,9,17,23,34,44,54,64,89);//纵横剑术升级所需心法等级
    nSKILL_108NeedHeart: (3,9,17,23,34,44,54,64,89);//冰霜雪雨升级所需心法等级
    nSKILL_109NeedHeart: (3,9,17,23,34,44,54,64,89);//裂神符升级所需心法等级

    nSKILLStrongRate:(10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10);//强化技能威力比例
    nUpHeartNeedLevel:(100,100,100,120,150,190,240,300,370);//升级传承心法所需要的等级条件

    nMemberUseHeartTime: 180;//弟子心法激活可用时长
    nActivMemberHeartRate: 5;//激活弟子心法(255为不激活)
    nHeartArrValueRate: 15;//心法增加属性比例
    nHeartIncDamageRate: 5;//心法压制增加伤害比例
    nDivisionSavvyRate: 8;//触发领悟脚本段@Savvy机率
    nPublicHeartLevel: 3;//公共心法传承等级
    nSavvyHeartNeedLevel: 999;//领悟心法所需等级
    nActivHeartNH: 20000;//激活心法所需内力值
    nIncHeartPointNeedExp: 50000;//吸收心法经验所需经验
    boHeratPowerNeed: False;//神圣属性需龙卫状态下生效
    boHeratPowerNeed2: False;//心法技能需龙卫状态下生效
    nKill69UseTime: 300;//倚天辟地使用间隔
    nKill102UseTime: 300;//唯我独尊使用间隔
    nSill102TargetDecACTime: 10;//3级唯我独尊目标减防时长
    nSkill101Point: 125;//神龙附体威力
    nKill101UseTime: 45;//神龙附体使用间隔(45)
    nKill101UseLogTime: 6;//神龙附体持续时长(6)
    nHeartSkilltime: 180;//主动神技使用间隔(180)
    nMagicAttackRage_107: 1;//纵横剑术范围
    boMag113LockCanFly     : False;
    sNGStrongItem: '绿宝石';//内功技能强化所需物品
    nNGSkillMaxLevel: 30;//强化内功技能最高等级
    nSKILL_200NGStrong: (94, 10, 15, 25);//怒之攻杀强化
    nSkill_202NGStrong: (98, 10, 15, 25);//怒之半月强化
    nSkill_236NGStrong: (106, 10, 50, 25);//怒之内功剑法强化
    nSkill_204NGStrong: (118, 10, 50, 25);//怒之烈火强化
    nSkill_206NGStrong: (120, 10, 50, 25);//怒之逐日强化
    nSkill_239NGStrong: (98, 10, 15, 25);//怒之施毒术强化
    nSkill_230NGStrong: (106, 10, 50, 25);//怒之火符强化
    nSkill_232NGStrong: (120, 10, 50, 25);//怒之噬血强化
    nSkill_241NGStrong: (118, 10, 50, 25);//怒之月灵强化
    nSkill_228NGStrong: (116, 10, 50, 25);//怒之灭天火强化
    nSkill_234NGStrong: (120, 10, 50, 25);//怒之流星火雨强化

    nSkill_208NGStrong: (90, 10, 15, 25);//怒之火球强化
    nSkill_214NGStrong: (92, 10, 15, 25);//怒之地狱火强化
    nSkill_218NGStrong: (94, 10, 15, 25);//怒之爆裂火焰强化
    nSkill_222NGStrong: (98, 10, 15, 25);//怒之雷电强化
    nSkill_210NGStrong: (101, 10, 15, 25);//怒之大火球强化
    nSkill_212NGStrong: (106, 10, 50, 25);//怒之火墙强化
    nSkill_216NGStrong: (108, 10, 50, 25);//怒之疾光电影强化
    nSkill_224NGStrong: (110, 10, 50, 25);//怒之地狱雷光强化
    nSkill_226NGStrong: (112, 10, 50, 25);//怒之寒冰掌强化
    nSkill_220NGStrong: (114, 10, 50, 25);//怒之冰咆哮强化
{$IFEND}
    nKill42UseTime: 10;//龙影剑法使用间隔(100) 20080619
    nAttackRate_42: 100;//龙影剑法威力 20080213
    nMagicAttackRage_42: 4;//龙影剑法范围 20080218

    nMaxFirDragonPoint: 200;
    nAddFirDragonPoint: 40;
    nDecFirDragonPoint: 40;
    nIncDragonPointTick: 3000;//加怒气时间间隔 20080606
    nHeroSkill46MaxHP_0: 70;//0级 英雄召唤分身HP的比率 20080907
    nHeroSkill46MaxHP_1: 80;//1级 英雄召唤分身HP的比率 20081217
    nHeroSkill46MaxHP_2: 90;//2级 英雄召唤分身HP的比率 20081217
    nHeroSkill46MaxHP_3: 100;//3级 英雄召唤分身HP的比率 20081217
    nHeroMakeSelfTick: 60;//英雄分身0级使用时间 20081217
    nHeroMakeSelfTick1: 60;//英雄分身1级使用时间 20090817
    nHeroMakeSelfTick2: 60;//英雄分身1级使用时间 20090817
    nHeroMakeSelfTick3: 60;//英雄分身1级使用时间 20090817
    nDecDragonHitPoint: 5;//饮酒减少合击伤害 20080626
    nDecDragonRate: 100;//合击对人物的伤害比例 20080803
    n4SKillDecNHRate: 5;//四级合击减目标内力值比例 20100719
    n4SKillDecMPRate: 5;//四级合击减目标MP值比例 20100719
    nHeroAttackRate_60: 100;//破魂斩威力 20080131
    nHeroAttackRate_61: 100;//劈星斩威力 20080131
    nHeroAttackRate_62: 100;//雷霆一击威力 20080131
    nHeroAttackRate_63: 100;//噬魂沼泽威力 20080131
    nHeroAttackRate_64: 100;//末日审判威力 20080131
    nHeroAttackRate_65: 100;//火龙气焰威力 20080131
    btHeroSkillMode_63: True;//噬魂沼泽使用绿毒模式 20080911
    dwHeroUseBatterTick: 60000;//英雄连击间隔 20091027
    dwKillMonHeroPulsExpMultiple: 10; //杀怪英雄经络修炼经验倍数
    
    nMakeGhostHeroTime: 3000;//英雄尸体清理时间 20080418
    nRecallHeroTime: 10000;  //召唤英雄间隔 20071201
    nRecallDeputyHeroTime: 120000;//召唤副将英雄间隔

    sHeroClothsMan: '布衣(男)';
    sHeroClothsWoman: '布衣(女)'; sHeroWoodenSword: '木剑'; sHeroBasicDrug: '金创药(小量)';

    dwDoCallTrollTick: 600;
    dwDoCallTrollTime: 300;
    nExplosion_97Range: 1;//血魄一击(法)范围
    nExplosion_98Range: 0;//血魄一击(道)范围
    dwUseBloodSoulTick: 45000;//使用血魄一击间隔
    nBloodSoulHitRate: 200;//血魄一击暴击倍数
    dwBloodSoulRate: 6;//血魄一击暴击机率
    dwNotGNDecHPRate: 10;//无内力值减血比例

    dwBatterDecDamageRate: 30;//道法固定的吸伤比例 20090808
    dwBatterRandDecDamageRate: 70;//道法随机的吸伤比例 20090808
    dwUseBatterTick: 30000;//使用连击间隔 20090618
    nStormsHitRate: (150,150,150,150,150);//暴击伤害倍数 20090618
    nStormsHitAppearRate: (5,10,20,30,50);//暴击率 20090619
    nBatterSkillFireRange_82: 3;//断岳斩攻击范围 20090706
    nBatterSkillFireRange_85: 2;//横扫千军攻击范围 20090704
    nBatterSkillFireRange_86: 2;//冰天雪地攻击范围 20090626
    nBatterSkillPoinson_86: 0;//冰天雪地持续掉血点数 20090727
    nBatterSkillFireRange_87: 2;//万剑归宗攻击范围 20090626
    nBatterSkillPoinson_87: 10;//万剑归宗持续掉血点数 20090727
    nPoisonLength_87: 0;//万剑归宗中毒时长
    dwMagChangXYTick: 1000;//移行换位使用间隔 20080616

    nProtectionRate: 20;//护体神盾减攻击百分比 20080504
    nProtectionOKRate: 10;//护体神盾生效机率 20080929
    boUseNGItemIncExp: True;//使用内功物品按等级增加额外经验
    boAutoCanHit: False;//火符智能锁定 20080418
    boAutoCanHit59: False;//噬血术智能锁定 20090521
    boAutoCanHit45: False;//灭天火智能锁定
    boSlaveMoveMaster: False;//宝宝是否飞到主人身边 20080713
    boMagLock : True;
    nDeputyHeroExpRate: 200;//副将英雄经验倍数
    nHeroHPRate: 1965;//英雄HP为人物的倍数 20081219
    nHeroHPRate1: 1832;//法英雄HP为人物的倍数 20090207
    nHeroHPRate2: 1832;//道英雄HP为人物的倍数 20090207
    nDeathDecLoyal: 100;//死亡减少忠诚度 20080110
    nPKDecLoyal: 100;//PK值减少忠诚度 20080214
    nGuildIncLoyal:100;//行会战增加忠诚度 20080214
    //nLevelOrderIncLoyal:100;//人物等级排名上升增加忠诚度 20080214
    //nLevelOrderDecLoyal:100;//人物等级排名下降减少忠诚度 20080214
    nWinExp: 10000;//获得经验->忠诚度 20080110
    nExpAddLoyal: 100;//经验加忠诚 20080110
    nGotoLV4: 30000;//四级触发 20080110
    nPowerLV4:10;//四级技能杀伤力增加值 20080112
    dwHeroRunIntervalTime1: 1100;//道法英雄移动间隔
    dwHeroRunIntervalTime: 600;//英雄跑步间隔 20090207
    dwHeroWalkIntervalTime: 100;//英雄走路间隔 20080213
    dwHeroTurnIntervalTime: 100;//英雄转向间隔 20080213
    dwHeroMagicHitIntervalTime: 800;//英雄魔法间隔 20080524
    btHeroSkillMode: True;//英雄施毒术使用模式 20080604
    btHeroSkillMode50: True;//英雄无极真气使用模式 20080827
    btHeroSkillMode46: False;//英雄分身术模式 20081029
    btHeroSkillMode43: False;//英雄开天斩重击模式 20081221
    nHeroSkill43HPRate: 100;//英雄开天斩HP触发条件 20090213
//-----------------气血石相关配置----------------------------
    {$IF M2Version <> 2}
    nStartHPRock: 10;
    nRockAddHP: 10;
    nHPRockSpell: 700;
    nHPRockDecDura: 100;
    nStartMPRock: 10;
    nRockAddMP: 10;
    nMPRockSpell: 700;
    nMPRockDecDura: 100;
    nStartHPMPRock: 10;
    nRockAddHPMP: 10;
    nHPMPRockSpell: 700;
    nHPMPRockDecDura: 100;
    nStartHPMPRock1: 10;
    nRockAddHPMP1: 10;
    nHPMPRockSpell1: 700;
    nHPMPRockDecDura1: 100;
    {$IFEND}
    boCanBuyShopItemGive : True;
    g_boShopGamePoint: False;//商铺使用游戏点购买
    g_boGameGird: True;//开启兑换灵符功能
    g_nGameGold : 1; //兑换灵符,元宝数量
    g_boCanShop: True;//开启商铺功能 20100630
    g_boShopUseGold: False;//商铺使用金币交易 20100630
    sAIHomeMap: '3';
    nAIHomeX: 330;
    nAIHomeY: 330;
    boHPAutoMoveMap: False;//低血回城
    boAutoRepairItem: True;
    boAutoPickUpItem: False;
    boRenewHealth: True;
    nRenewPercent: 60;
    nAIRunIntervalTime: 550;
    nAIWalkIntervalTime: 400;
    nAIWarrorAttackTime: 780;
    nAIWizardAttackTime: 850;
    nAITaoistAttackTime: 850;
    sAIConfigListFileName: '';
    sHeroAIConfigListFileName:'';
    );
  g_ClientConf: TClientConf = (
      boRUNHUMAN: True;
      boRUNMON: True;
      boRunNpc: True;
      boWarRunAll: True;
      btDieColor: 5;
      wSpellTime: 500;
      wHitIime: 1400;
      wItemFlashTime: 500 {5 * 100};
      btItemSpeed: 25; {60}
      boParalyCanRun: False;
      boParalyCanWalk: False;
      boParalyCanHit: False;
      boParalyCanSpell: False;
      boShowJobLevel: True;
      boDuraAlert: True;
    ); //客户端配置信息
  //===============================================================
{$IF DBTYPE = ADO}
  g_sSQLDatabase:String = 'mir2';
  g_sSQLHost:String = '.';
  g_sSQLUserName:String = 'sa';
  g_sSQLPassword:String = 'mir2';
  g_sADODBString: string = 'Provider=SQLOLEDB.1;Password=%s;Persist Security Info=True;User ID=%s;Initial '
                          +'Catalog=%s;Data Source=%s'+''; //ADO 数据源名称
{$ELSE}
  sDBName: string = 'HeroDB'; //BDE 数据源名称
{$IFEND}

{$IF OEMVER = OEM775}
  g_LevelInfo: array[0..MAXLEVEL] of TLevelInfo;
{$IFEND}
  g_dwOldNeedExps, g_dwHeroNeedExps : TLevelNeedExp;
  g_dwExpCrystalNeedExps, g_dwNGExpCrystalNeedExps: TExpCrystalLevelNeedExp;//天地结晶内功升级经验 20090131
{$IF HEROVERSION = 1}
  g_dwExpHeroPulsNeedExps0, g_dwExpHeroPulsNeedExps1, g_dwExpHeroPulsNeedExps2, g_dwExpHeroPulsNeedExps3: TExpHeroPulsLevelNeedExp;//英雄任脉经络升级所需的经络经验
{$IFEND}
  g_dwMedicineExps: TLevelNeedExp1;//20080623
  g_dwSkill68Exps: TLevelNeedExp2;//20080625 酒气护体
  g_dwLevelToExpRate: TLevelNeedExp3;//等级经验分配比例 20090323
  {$IF M2Version = 1}
  g_dwSkill95Exps: TLevelNeedExp4;//斗转星移
  {$IFEND}
  //===============================================================
  //游戏命令方面参数
  g_GameCommand: TGameCommand = (
    Data: (sCmd: 'Date'; nPermissionMin: 0; nPermissionMax: 10);
    PRVMSG: (sCmd: 'PrvMsg'; nPermissionMin: 0; nPermissionMax: 10);//拒绝某个人私聊
    ALLOWMSG: (sCmd: 'AllowMsg'; nPermissionMin: 0; nPermissionMax: 10);//禁止私聊
    ReadMasterMsg: (sCmd: '收徒'; nPermissionMin: 0; nPermissionMax: 10);//允许收徒 20090209
    MarryMsg: (sCmd: '求婚'; nPermissionMin: 0; nPermissionMax: 10);
    LETSHOUT: (sCmd: 'LetShout'; nPermissionMin: 0; nPermissionMax: 10);
{    BANGMMSG: (sCmd: 'BanGmMsg'; nPermissionMin: 0; nPermissionMax: 10);//拒绝所有喊话信息 20080211 }
    LETTRADE: (sCmd: 'LetTrade'; nPermissionMin: 0; nPermissionMax: 10);
    LETGUILD: (sCmd: 'LetGuild'; nPermissionMin: 0; nPermissionMax: 10);
    ENDGUILD: (sCmd: 'EndGuild'; nPermissionMin: 0; nPermissionMax: 10);
    BANGUILDCHAT: (sCmd: 'BanGuildChat'; nPermissionMin: 0; nPermissionMax: 10);
    AUTHALLY: (sCmd: 'AuthAlly'; nPermissionMin: 0; nPermissionMax: 10);
    AUTH: (sCmd: {'联盟'}'Alliance'; nPermissionMin: 0; nPermissionMax: 10);
    AUTHCANCEL: (sCmd: {'取消联盟'}'CancelAlliance'; nPermissionMin: 0; nPermissionMax: 10);
    //DIARY: (sCmd: 'Diary'; nPermissionMin: 0; nPermissionMax: 10);//未使用 20080823
    USERMOVE: (sCmd: 'Move'; nPermissionMin: 0; nPermissionMax: 10);
    SEARCHING: (sCmd: 'Searching'; nPermissionMin: 0; nPermissionMax: 10);
    ALLOWGROUPCALL: (sCmd: 'AllowGroupRecall'; nPermissionMin: 0; nPermissionMax: 10);
    GROUPRECALLL: (sCmd: 'GroupRecall'; nPermissionMin: 0; nPermissionMax: 10);
    ALLOWGUILDRECALL: (sCmd: 'AllowGuildRecall'; nPermissionMin: 0; nPermissionMax: 10);
    GUILDRECALLL: (sCmd: 'GuildRecall'; nPermissionMin: 0; nPermissionMax: 10);
    UNLOCKSTORAGE: (sCmd: 'UnLockStorage'; nPermissionMin: 0; nPermissionMax: 10);
    UnLock: (sCmd: 'UnLock'; nPermissionMin: 0; nPermissionMax: 10);
    Lock: (sCmd: 'Lock'; nPermissionMin: 0; nPermissionMax: 10);
    PASSWORDLOCK: (sCmd: 'PasswordLock'; nPermissionMin: 0; nPermissionMax: 10);
    SETPASSWORD: (sCmd: 'SetPassword'; nPermissionMin: 0; nPermissionMax: 10);
    CHGPASSWORD: (sCmd: 'ChgPassword'; nPermissionMin: 0; nPermissionMax: 10);
    CLRPASSWORD: (sCmd: 'ClrPassword'; nPermissionMin: 10; nPermissionMax: 10);
    UNPASSWORD: (sCmd: 'UnPassword'; nPermissionMin: 0; nPermissionMax: 10);
    MEMBERFUNCTION: (sCmd: 'MemberFunc'; nPermissionMin: 0; nPermissionMax: 10);
    MEMBERFUNCTIONEX: (sCmd: 'MemberFuncEx'; nPermissionMin: 0; nPermissionMax: 10);
    DEAR: (sCmd: 'Dear'; nPermissionMin: 0; nPermissionMax: 10);
    ALLOWDEARRCALL: (sCmd: 'AllowDearRecall'; nPermissionMin: 0; nPermissionMax: 10);
    DEARRECALL: (sCmd: 'DearRecall'; nPermissionMin: 0; nPermissionMax: 10);
    MASTER: (sCmd: 'Master'; nPermissionMin: 0; nPermissionMax: 10);
    ALLOWMASTERRECALL: (sCmd: 'AllowMasterRecall'; nPermissionMin: 0; nPermissionMax: 10);
    MASTERECALL: (sCmd: 'MasterRecall'; nPermissionMin: 0; nPermissionMax: 10);
    ATTACKMODE: (sCmd: 'AttackMode'; nPermissionMin: 0; nPermissionMax: 10);
    REST: (sCmd: 'Rest'; nPermissionMin: 0; nPermissionMax: 10);
    TAKEONHORSE: (sCmd: '骑马'; nPermissionMin: 0; nPermissionMax: 10);
    TAKEOFHORSE: (sCmd: '下马'; nPermissionMin: 0; nPermissionMax: 10);
    HUMANLOCAL: (sCmd: 'HumanLocal'; nPermissionMin: 3; nPermissionMax: 10);
    Move: (sCmd: 'Move'; nPermissionMin: 3; nPermissionMax: 6);
    POSITIONMOVE: (sCmd: 'PositionMove'; nPermissionMin: 3; nPermissionMax: 6);
    INFO: (sCmd: 'Info'; nPermissionMin: 3; nPermissionMax: 10);
    MOBLEVEL: (sCmd: 'MobLevel'; nPermissionMin: 3; nPermissionMax: 10);
    MOBCOUNT: (sCmd: 'MobCount'; nPermissionMin: 3; nPermissionMax: 10);
    HUMANCOUNT: (sCmd: 'HumanCount'; nPermissionMin: 3; nPermissionMax: 10);
    Map: (sCmd: 'Map'; nPermissionMin: 3; nPermissionMax: 10);
    KICK: (sCmd: 'Kick'; nPermissionMin: 10; nPermissionMax: 10);
    TING: (sCmd: 'Ting'; nPermissionMin: 10; nPermissionMax: 10);
    SUPERTING: (sCmd: 'SuperTing'; nPermissionMin: 10; nPermissionMax: 10);
    MAPMOVE: (sCmd: 'MapMove'; nPermissionMin: 10; nPermissionMax: 10);
    SHUTUP: (sCmd: 'Shutup'; nPermissionMin: 10; nPermissionMax: 10);
    RELEASESHUTUP: (sCmd: 'ReleaseShutup'; nPermissionMin: 10; nPermissionMax: 10);
    SHUTUPLIST: (sCmd: 'ShutupList'; nPermissionMin: 10; nPermissionMax: 10);
    GAMEMASTER: (sCmd: 'GameMaster'; nPermissionMin: 10; nPermissionMax: 10);
    OBSERVER: (sCmd: 'Observer'; nPermissionMin: 10; nPermissionMax: 10);
    SUEPRMAN: (sCmd: 'Superman'; nPermissionMin: 10; nPermissionMax: 10);
    Level: (sCmd: 'Level'; nPermissionMin: 10; nPermissionMax: 10);
    SABUKWALLGOLD: (sCmd: 'SabukWallGold'; nPermissionMin: 10; nPermissionMax: 10);
    RECALL: (sCmd: 'Recall'; nPermissionMin: 10; nPermissionMax: 10);
    REGOTO: (sCmd: 'ReGoto'; nPermissionMin: 10; nPermissionMax: 10);
    SHOWFLAG: (sCmd: 'showflag'; nPermissionMin: 10; nPermissionMax: 10);
    //SHOWOPEN: (sCmd: 'showopen'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    //SHOWUNIT: (sCmd: 'showunit'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    //Attack: (sCmd: 'Attack'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    MOB: (sCmd: 'Mob'; nPermissionMin: 10; nPermissionMax: 10);
    MOBNPC: (sCmd: 'MobNpc'; nPermissionMin: 10; nPermissionMax: 10);
    DELNPC: (sCmd: 'DelNpc'; nPermissionMin: 10; nPermissionMax: 10);
    NPCSCRIPT: (sCmd: 'NpcScript'; nPermissionMin: 10; nPermissionMax: 10);
    RECALLMOB: (sCmd: 'RecallMob'; nPermissionMin: 10; nPermissionMax: 10);
    RECALLMOBEX: (sCmd: 'RECALLMOBEX'; nPermissionMin: 10; nPermissionMax: 10);//20080122 召唤宝宝
    GIVEMINE: (sCmd: 'GIVEMINE'; nPermissionMin: 10; nPermissionMax: 10);//20080403 给指定纯度的矿石
    MOVEMOBTO: (sCmd: 'MOVEMOBTO'; nPermissionMin: 10; nPermissionMax: 10);//20080123 将指定坐标的怪物移动到新坐标
    CLEARITEMMAP: (sCmd: 'CLEARITEMMAP'; nPermissionMin: 10; nPermissionMax: 10);//20080124 清除地图物品
    LUCKYPOINT: (sCmd: 'LuckyPoint'; nPermissionMin: 10; nPermissionMax: 10);
    LOTTERYTICKET: (sCmd: 'LotteryTicket'; nPermissionMin: 10; nPermissionMax: 10);
    RELOADGUILD: (sCmd: 'ReloadGuild'; nPermissionMin: 10; nPermissionMax: 10);
    RELOADLINENOTICE: (sCmd: 'ReloadLineNotice'; nPermissionMin: 10; nPermissionMax: 10);
    RELOADABUSE: (sCmd: 'ReloadAbuse'; nPermissionMin: 10; nPermissionMax: 10);
    BACKSTEP: (sCmd: 'Backstep'; nPermissionMin: 10; nPermissionMax: 10);
    //BALL: (sCmd: 'Ball'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    FREEPENALTY: (sCmd: 'FreePK'; nPermissionMin: 10; nPermissionMax: 10);
    PKPOINT: (sCmd: 'PKpoint'; nPermissionMin: 10; nPermissionMax: 10);
    IncPkPoint: (sCmd: 'IncPkPoint'; nPermissionMin: 10; nPermissionMax: 10);
    //CHANGELUCK: (sCmd: 'ChangeLuck'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    HUNGER: (sCmd: 'Hunger'; nPermissionMin: 10; nPermissionMax: 10);
    HAIR: (sCmd: 'hair'; nPermissionMin: 10; nPermissionMax: 10);
    TRAINING: (sCmd: 'Training'; nPermissionMin: 10; nPermissionMax: 10);
    DELETESKILL: (sCmd: 'DeleteSkill'; nPermissionMin: 10; nPermissionMax: 10);
    CHANGEJOB: (sCmd: 'ChangeJob'; nPermissionMin: 10; nPermissionMax: 10);
    CHANGEGENDER: (sCmd: 'ChangeGender'; nPermissionMin: 10; nPermissionMax: 10);
    //NAMECOLOR: (sCmd: 'NameColor'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    Mission: (sCmd: 'Mission'; nPermissionMin: 10; nPermissionMax: 10);
    MobPlace: (sCmd: 'MobPlace'; nPermissionMin: 10; nPermissionMax: 10);
    //TRANSPARECY: (sCmd: 'Transparency'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    DELETEITEM: (sCmd: 'DeleteItem'; nPermissionMin: 10; nPermissionMax: 10);
    //LEVEL0: (sCmd: 'Level0'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    CLEARMISSION: (sCmd: 'ClearMission'; nPermissionMin: 10; nPermissionMax: 10);
    SETFLAG: (sCmd: 'setflag'; nPermissionMin: 10; nPermissionMax: 10);
    //SETOPEN: (sCmd: 'setopen'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    //SETUNIT: (sCmd: 'setunit'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    RECONNECTION: (sCmd: 'Reconnection'; nPermissionMin: 10; nPermissionMax: 10);
    DISABLEFILTER: (sCmd: 'DisableFilter'; nPermissionMin: 10; nPermissionMax: 10);
    CHGUSERFULL: (sCmd: 'CHGUSERFULL'; nPermissionMin: 10; nPermissionMax: 10);
    CHGZENFASTSTEP: (sCmd: 'CHGZENFASTSTEP'; nPermissionMin: 10; nPermissionMax: 10);
    CONTESTPOINT: (sCmd: 'ContestPoint'; nPermissionMin: 10; nPermissionMax: 10);
    STARTCONTEST: (sCmd: 'StartContest'; nPermissionMin: 10; nPermissionMax: 10);
    ENDCONTEST: (sCmd: 'EndContest'; nPermissionMin: 10; nPermissionMax: 10);
    ANNOUNCEMENT: (sCmd: 'Announcement'; nPermissionMin: 10; nPermissionMax: 10);
    //OXQUIZROOM: (sCmd: 'OXQuizRoom'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    //GSA: (sCmd: 'gsa'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    CHANGEITEMNAME: (sCmd: 'ChangeItemName'; nPermissionMin: 10; nPermissionMax: 10);
    DISABLESENDMSG: (sCmd: 'DisableSendMsg'; nPermissionMin: 10; nPermissionMax: 10);
    ENABLESENDMSG: (sCmd: 'EnableSendMsg'; nPermissionMin: 10; nPermissionMax: 10);
    DISABLESENDMSGLIST: (sCmd: 'DisableSendMsgList'; nPermissionMin: 10; nPermissionMax: 10);
    KILL: (sCmd: 'Kill'; nPermissionMin: 10; nPermissionMax: 10);
    MAKE: (sCmd: 'make'; nPermissionMin: 10; nPermissionMax: 10);
    SMAKE: (sCmd: 'Supermake'; nPermissionMin: 10; nPermissionMax: 10);
    BonusPoint: (sCmd: 'BonusPoint'; nPermissionMin: 10; nPermissionMax: 10);
    DELBONUSPOINT: (sCmd: 'DelBonusPoint'; nPermissionMin: 10; nPermissionMax: 10);
    RESTBONUSPOINT: (sCmd: 'RestBonusPoint'; nPermissionMin: 10; nPermissionMax: 10);
    FIREBURN: (sCmd: 'FireBurn'; nPermissionMin: 10; nPermissionMax: 10);
    TESTFIRE: (sCmd: 'TestFire'; nPermissionMin: 10; nPermissionMax: 10);
    TESTSTATUS: (sCmd: 'TestStatus'; nPermissionMin: 10; nPermissionMax: 10);
    DELGOLD: (sCmd: 'DelGold'; nPermissionMin: 10; nPermissionMax: 10);
    ADDGOLD: (sCmd: 'AddGold'; nPermissionMin: 10; nPermissionMax: 10);
    DELGAMEGOLD: (sCmd: 'DelGamePoint'; nPermissionMin: 10; nPermissionMax: 10);
    ADDGAMEGOLD: (sCmd: 'AddGamePoint'; nPermissionMin: 10; nPermissionMax: 10);
    GAMEGOLD: (sCmd: 'GameGold'; nPermissionMin: 10; nPermissionMax: 10); //调整游戏币
    GAMEDIAMOND: (sCmd: 'GAMEDIAMOND'; nPermissionMin: 10; nPermissionMax: 10);//调整金刚石 20071226
    GAMEGIRD: (sCmd: 'GAMEGIRD'; nPermissionMin: 10; nPermissionMax: 10); //调整灵符 20071226
    GAMEGLORY: (sCmd: 'GAMEGLORY'; nPermissionMin: 10; nPermissionMax: 10); //调整荣誉 20080511
    HEROLOYAL: (sCmd: 'HEROLOYAL'; nPermissionMin: 10; nPermissionMax: 10); //调整英雄的忠诚度 20080109
    GAMEPOINT: (sCmd: 'GamePoint'; nPermissionMin: 10; nPermissionMax: 10);
    CREDITPOINT: (sCmd: 'CreditPoint'; nPermissionMin: 10; nPermissionMax: 10);
    //TESTGOLDCHANGE: (sCmd: 'Test_GOLD_Change'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    REFINEWEAPON: (sCmd: 'RefineWeapon'; nPermissionMin: 10; nPermissionMax: 10);
    RELOADADMIN: (sCmd: 'ReloadAdmin'; nPermissionMin: 10; nPermissionMax: 10);
    ReLoadNpc: (sCmd: 'ReloadNpc'; nPermissionMin: 10; nPermissionMax: 10);
    RELOADMANAGE: (sCmd: 'ReloadManage'; nPermissionMin: 10; nPermissionMax: 10);
    RELOADROBOTMANAGE: (sCmd: 'ReloadRobotManage'; nPermissionMin: 10; nPermissionMax: 10);
    RELOADROBOT: (sCmd: 'ReloadRobot'; nPermissionMin: 10; nPermissionMax: 10);
    RELOADMONITEMS: (sCmd: 'ReloadMonItems'; nPermissionMin: 10; nPermissionMax: 10);
    //RELOADDIARY: (sCmd: 'ReloadDiary'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    RELOADITEMDB: (sCmd: 'ReloadItemDB'; nPermissionMin: 10; nPermissionMax: 10);
    {$IF M2Version <> 2}
    RELOADHUMTITLEDB: (sCmd: 'ReloadHumTitleDB'; nPermissionMin: 10; nPermissionMax: 10);//重载称号数据
    {$IFEND}
    RELOADMAGICDB: (sCmd: 'ReloadMagicDB'; nPermissionMin: 10; nPermissionMax: 10);
    RELOADMONSTERDB: (sCmd: 'ReloadMonsterDB'; nPermissionMin: 10; nPermissionMax: 10);
    RELOADMINMAP: (sCmd: 'ReLoadMinMap'; nPermissionMin: 10; nPermissionMax: 10);
    ReAlive: (sCmd: 'ReAlive'; nPermissionMin: 10; nPermissionMax: 10);
    {$IF M2Version <> 2}
    SysMsg: (sCmd: 'SysMsg'; nPermissionMin: 10; nPermissionMax: 10); //千里传音 20071228
    {$IFEND}
    HEROLEVEL: (sCmd: 'HEROLEVEL'; nPermissionMin: 10; nPermissionMax: 10); //调整英雄等级 20071227
    ADJUESTLEVEL: (sCmd: 'AdjustLevel'; nPermissionMin: 10; nPermissionMax: 10);//调整人物等级
    NGLEVEL: (sCmd: 'NGLEVEL'; nPermissionMin: 10; nPermissionMax: 10);//调整内功等级 20081221
    ADJUESTEXP: (sCmd: 'AdjustExp'; nPermissionMin: 10; nPermissionMax: 10);
    AddGuild: (sCmd: 'AddGuild'; nPermissionMin: 10; nPermissionMax: 10);
    DELGUILD: (sCmd: 'DelGuild'; nPermissionMin: 10; nPermissionMax: 10);
    CHANGESABUKLORD: (sCmd: 'ChangeSabukLord'; nPermissionMin: 10; nPermissionMax: 10);
    FORCEDWALLCONQUESTWAR: (sCmd: 'ForcedWallconquestWar'; nPermissionMin: 10; nPermissionMax: 10);
    {ADDTOITEMEVENT: (sCmd: 'AddToItemEvent'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    ADDTOITEMEVENTASPIECES: (sCmd: 'AddToItemEventAsPieces'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    ItemEventList: (sCmd: 'ItemEventList'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    STARTINGGIFTNO: (sCmd: 'StartingGiftNo'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    DELETEALLITEMEVENT: (sCmd: 'DeleteAllItemEvent'; nPermissionMin: 10; nPermissionMax: 10);
    STARTITEMEVENT: (sCmd: 'StartItemEvent'; nPermissionMin: 10; nPermissionMax: 10); 
    ITEMEVENTTERM: (sCmd: 'ItemEventTerm'; nPermissionMin: 10; nPermissionMax: 10);}
    ADJUESTTESTLEVEL: (sCmd: 'AdjustTestLevel'; nPermissionMin: 10; nPermissionMax: 10);
    TRAININGSKILL: (sCmd: 'TrainingSkill'; nPermissionMin: 10; nPermissionMax: 10);
    //OPDELETESKILL: (sCmd: 'OPDeleteSkill'; nPermissionMin: 10; nPermissionMax: 10); //20080812 注释
    //CHANGEWEAPONDURA: (sCmd: 'ChangeWeaponDura'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    //RELOADGUILDALL: (sCmd: 'ReloadGuildAll'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    WHO: (sCmd: 'Who '; nPermissionMin: 3; nPermissionMax: 10);
    TOTAL: (sCmd: 'Total '; nPermissionMin: 5; nPermissionMax: 10);
    //TESTGA: (sCmd: 'Testga'; nPermissionMin: 10; nPermissionMax: 10);//20081014 注释
    MAPINFO: (sCmd: 'MapInfo'; nPermissionMin: 10; nPermissionMax: 10);
    //SBKDOOR: (sCmd: 'SbkDoor'; nPermissionMin: 10; nPermissionMax: 10);//20080812 注释
    CHANGEDEARNAME: (sCmd: 'DearName'; nPermissionMin: 10; nPermissionMax: 10);
    CHANGEMASTERNAME: (sCmd: 'MasterName'; nPermissionMin: 10; nPermissionMax: 10);
    STARTQUEST: (sCmd: 'StartQuest'; nPermissionMin: 10; nPermissionMax: 10);
    SETPERMISSION: (sCmd: 'SetPermission'; nPermissionMin: 10; nPermissionMax: 10);
    CLEARMON: (sCmd: 'ClearMon'; nPermissionMin: 10; nPermissionMax: 10);
    RENEWLEVEL: (sCmd: 'ReNewLevel'; nPermissionMin: 10; nPermissionMax: 10);
    DENYIPLOGON: (sCmd: 'DenyIPLogon'; nPermissionMin: 10; nPermissionMax: 10);
    DENYACCOUNTLOGON: (sCmd: 'DenyAccountLogon'; nPermissionMin: 10; nPermissionMax: 10);
    DENYCHARNAMELOGON: (sCmd: 'DenyCharNameLogon'; nPermissionMin: 10; nPermissionMax: 10);
    DELDENYIPLOGON: (sCmd: 'DelDenyIPLogon'; nPermissionMin: 10; nPermissionMax: 10);
    DELDENYACCOUNTLOGON: (sCmd: 'DelDenyAccountLogon'; nPermissionMin: 10; nPermissionMax: 10);
    DELDENYCHARNAMELOGON: (sCmd: 'DelDenyCharNameLogon'; nPermissionMin: 10; nPermissionMax: 10);
    SHOWDENYIPLOGON: (sCmd: 'ShowDenyIPLogon'; nPermissionMin: 10; nPermissionMax: 10);
    SHOWDENYACCOUNTLOGON: (sCmd: 'ShowDenyAccountLogon'; nPermissionMin: 10; nPermissionMax: 10);
    SHOWDENYCHARNAMELOGON: (sCmd: 'ShowDenyCharNameLogon'; nPermissionMin: 10; nPermissionMax: 10);
    VIEWWHISPER: (sCmd: 'ViewWhisper'; nPermissionMin: 10; nPermissionMax: 10);
    SPIRIT: (sCmd: '祈祷生效'; nPermissionMin: 10; nPermissionMax: 10);
    SPIRITSTOP: (sCmd: '停止叛变'; nPermissionMin: 10; nPermissionMax: 10);
    SetMapMode: (sCmd: 'SetMapMode'; nPermissionMin: 10; nPermissionMax: 10);
    SHOWMAPMODE: (sCmd: 'ShowMapMode'; nPermissionMin: 10; nPermissionMax: 10);
    TESTSERVERCONFIG: (sCmd: 'TestServerConfig'; nPermissionMin: 10; nPermissionMax: 10);
    SERVERSTATUS: (sCmd: 'ServerStatus'; nPermissionMin: 10; nPermissionMax: 10);
    TESTGETBAGITEM: (sCmd: 'TestGetBagItem'; nPermissionMin: 10; nPermissionMax: 10);
    CLEARBAG: (sCmd: 'ClearBag'; nPermissionMin: 10; nPermissionMax: 10);
    SHOWUSEITEMINFO: (sCmd: 'ShowUseItemInfo'; nPermissionMin: 10; nPermissionMax: 10);
    BINDUSEITEM: (sCmd: 'BindUseItem'; nPermissionMin: 10; nPermissionMax: 10);
    MOBFIREBURN: (sCmd: 'MobFireBurn'; nPermissionMin: 10; nPermissionMax: 10);
    TESTSPEEDMODE: (sCmd: 'TestSpeedMode'; nPermissionMin: 10; nPermissionMax: 10);//测速模式
    REMTEMSG: (sCmd: 'RemoteMsg'; nPermissionMin: 10; nPermissionMax: 10);
    COLORSAY: (sCmd: '允许彩色字体聊天'; nPermissionMin: 10; nPermissionMax: 10);
    SETCOLORSAY: (sCmd: '设置聊天字体颜色'; nPermissionMin: 0; nPermissionMax: 0);
    AllowReAlive: (sCmd: '允许复活'; nPermissionMin: 0; nPermissionMax: 0);
    UserItem: (sCmd: 'USERITEM'; nPermissionMin: 10; nPermissionMax: 10);
    SIGNMOVE: (sCmd: 'SIGNMOVE'; nPermissionMin: 10; nPermissionMax: 10);
    SHOWEFFECT: (sCmd: 'SHOWEFFECT'; nPermissionMin: 10; nPermissionMax: 10);//烟花
    LOCKLOGON: (sCmd: 'LockLogin'; nPermissionMin: 0; nPermissionMax: 0);
    CLEARCOPYITEM:(sCmd: 'ClearCopyItem'; nPermissionMin: 10; nPermissionMax: 10);//20080816 清理指定玩家复制品
    {$IF M2Version <> 2}
    CLEARHUMTITLE:(sCmd: 'ClearHumTitle'; nPermissionMin: 10; nPermissionMax: 10);//回收指定称号
    {$IFEND}
    );
  //===============================================================
  //游戏显示文字内容参数
  sClientSoftVersionError: string = '游戏版本错误！';
  sDownLoadNewClientSoft: string = '请到网站上下载最新版本游戏客户端软件。';
  sForceDisConnect: string = '连接被强行中断！';
(*  {$IF M2Version = 2}
  sPayMentPointOver: String ='秒点已用完,连接被强行中断,请充值后再继续游戏！';
  {$IFEND}  *)
  sClientSoftVersionTooOld: string = '您现在使用的客户端软件版本太老了，大量的游戏效果新将无法使用。';
  sDownLoadAndUseNewClient: string = '为了更好的进行游戏，请下载最新的客户端软件！';
  sOnlineUserFull: string = '可允许的玩家数量已满';
  sYouNowIsTryPlayMode: string = '您现在处于测试中，您可以在七级以前使用，但是会限制您的一些功能.';
  g_sNowIsFreePlayMode: string = '当前服务器运行于测试模式.';
  sAttackModeOfAll: string = '[全体攻击模式]';
  sAttackModeOfPeaceful: string = '[和平攻击模式]';
  sAttackModeOfDear: string = '[夫妻攻击模式]';
  sAttackModeOfMaster: string = '[师徒攻击模式]';
  sAttackModeOfGroup: string = '[编组攻击模式]';
  sAttackModeOfGuild: string = '[行会攻击模式]';
  sAttackModeOfRedWhite: string = '[红名攻击模式]';
  {$IF M2Version <> 2}
  sAttackModeOfDivision: string = '[师门攻击模式]';
  {$IFEND}
  sStartChangeAttackModeHelp: string = '更改攻击模式: CTRL-H ';
  sStartNoticeMsg: string = '欢迎进入本服务器进行游戏...';

  sThrustingOn: string = '启用刺杀剑法';
  sThrustingOff: string = '关闭刺杀剑法';
  sHalfMoonOn: string = '开启半月弯刀';
  sHalfMoonOff: string = '关闭半月弯刀';
  sHalfMoonOn4: string = '开启圆月弯刀';
  sHalfMoonOff4: string = '关闭圆月弯刀';
  sCrsHitOn: string = '开启光风斩';
  sCrsHitOff: string = '关闭光风斩';

  sSkill43On: string = '开启龙影剑法';//20080426
  sSkill43Off: string = '关闭龙影剑法';//20080426
  sSkill42On: string = '开天斩召唤成功';//20080426
  sSkill42Off: string = '召唤开天斩结束！';//20080426
{$IF M2Version <> 2}
  sHeartUpLevelHit: String = '勇士%s的%s心法提升到%d级，从此纵横玛法，傲视群雄！';
  sIncreaseSkillLevel: String = '恭喜你在日积月累的战斗和修炼中加强了对精神的掌握，领悟了：强化%s%d重';
  sSavvyHeartOK: String = '你感到内心一阵悸动，一股力量由外而内，突破重重障碍，融入血脉，师门传承心法成功';
  sActivMemberHeart: string = '您的师门心法被师傅激活，在短时间内突破瓶颈，进入龙卫境界，属性得到大幅提升！';
  sSkill105Fail: string = '内力不足%d,不能激活%s';
  sSkill69On: string = '倚天辟地召唤成功';
  sSkill69Off: string = '倚天辟地冷却时间还有%d';

  sSkill101On : string = '神龙附体召唤成功';
  sSkill101Off: string = '神龙附体冷却时间还有%d秒';
  sSkill101Off1: string = '召唤神龙附体结束';

  sSkill102On : string = '唯我独尊召唤成功,效果持久%d秒';
  sSkill102Off: string = '唯我独尊冷却时间还有%d秒';
  sSkill102Off1: string = '召唤唯我独尊结束';
{$IFEND}
  sFireSpiritsSummoned: string = '召唤烈火精灵成功...';
  sFireSpiritsFail: string = '召唤烈火精灵失败';
  sSpiritsGone: string = '召唤烈火结束！';

  sDailySuSlaveFail: string = '圣兽收回不足30秒，元气尚未回复';
  sDailySkillSummoned: string = '逐日凝聚力成功...';
  sDailySkillFail: string = '逐日凝聚力失败';
  sDailySpiritsGone: string = '逐日凝聚力结束！';

  sBloodSoulSkillSummoned: string = '血魄一击凝聚力成功...';
  sBloodSoulSkillFail: string = '血魄一击凝聚力失败';
  sBloodSoulSpiritsGone: string = '血魄一击凝聚力结束！';

  sMateDoTooweak: string = '冲撞力不够！';

  g_sTheWeaponBroke: string = '武器破碎！';
  sTheWeaponRefineSuccessfull: string = '升级成功！';

  sAutoSendMsg: string ='您好，我正在离线泡点中......';
  sYouPoisoned: string = '中毒了！%d秒 %d点';
  sDecRunTime: string = '减速状态，移动变慢！';
  sYouPoisonedSpider: string = '中蛛网了,不能跑动！';
  sYouPoisonedFreeze: string = '你被冰冻了！';
  sGetSellOffGlod: string = '%d 元宝增加';
  sButchEnoughBagHintMsg: string = '您的包裹已没有办法装下任何物品!';
  sHumLevelOrderDropMsg: string ='您的个人排行目前在玛法群英榜中名列第%d名,和上一次您在榜中的排名相比,你下降了%d位';
{$IF M2Version <> 2}
  sRefineItemSuccessMsg: string ='恭喜[%name],淬练%s成功[%v]';
  sRefineItemFailMsg: string ='淬练装备失败!';
  sRefineItemErrorMsg: string ='这次无法控制火云石的力量，淬炼失败了';
  sJudgeItemsMsg: string = '%s的%item历经磨砺，晋升兵器排行第%d名';
  sDigJewelItemMsg:string ='%s在%map挥动铲子，挖出了宝物：%item:%d';
  sMapIncCritMsg:string ='凭借地下城守卫的力量，你在此地图临时获得%d点暴击等级!';
  sMapPaekMsg:string='您在此地图临时获得巅峰勇士状态,攻击能力提升!';
  sMapPaekMsg1:string='您在此地图临时获得巅峰战神状态,攻击能力大幅提升!';
{$IFEND}
  sAutoFindMonMsg: string = '%GuildName行会行进至%map(%x,%y)，%name贵重，闲人回避！';
  sAutoFindMonMsg1: string = '%name行进至%map(%x,%y)，闲人回避！';
  sNEEDLEVELToXYErrorMsg: string ='进入雪域等级需达到%d级才可进入';

  sPetRest: string = '下属：休息';
  sPetAttack: string = '下属：攻击';

  sWearNotOfWoMan: string = '非女性用品！';
  sWearNotOfMan: string = '非男性用品！';
  sHandWeightNot: string = '腕力不够！';
  sWearWeightNot: string = '负重力不够！';
  g_sItemIsNotThisAccount: string = '此物品不为此帐号所有！';
  g_sItemIsNotThisIPaddr: string = '此物品不为此IP所有！';
  g_sItemIsNotThisCharName: string = '此物品不为您所有！';
  g_sLevelNot: string = '等级不够！';
  g_sJobOrLevelNot: string = '职业不对或等级不够！';
  g_sJobOrDCNot: string = '职业不对或攻击力不够！';
  g_sJobOrMCNot: string = '职业不对或魔法力不够！';
  g_sJobOrSCNot: string = '职业不对或道术不够！';
  g_sDCNot: string = '攻击力不够！';
  g_sMCNot: string = '魔法力不够！';
  g_sSCNot: string = '道术不够！';
  g_sCreditPointNot: string = '声望点不够！';
  g_sReNewLevelNot: string = '转生等级不够！';
  g_sGuildNot: string = '加入了行会才可以使用此物品！';
  g_sGuildMasterNot: string = '行会掌门才可以使用此物品！';
  g_sSabukHumanNot: string = '沙城成员才可以使用此物品！';
  g_sSabukMasterManNot: string = '沙城城主才可以使用此物品！';
  g_sMemberNot: string = '会员才可以使用此物品！';
  g_sMemberTypeNot: string = '指定类型的会员可以使用此物品！';
  g_sHeroCanUse: string = '英雄才可以使用此物品！';

  sCanotUseDrugOnThisMap: string = '此地图不允许使用任何药品！';
  sGameMasterMode: string = '已进入管理员模式';
  sReleaseGameMasterMode: string = '已退出管理员模式';
  sObserverMode: string = '已进入隐身模式';
  g_sReleaseObserverMode: string = '已退出隐身模式';
  sSupermanMode: string = '已进入无敌模式';
  sReleaseSupermanMode: string = '已退出无敌模式';
  sYouFoundNothing: string = '未获取任何物品！';

  g_sNoPasswordLockSystemMsg: string = '游戏密码保护系统还没有启用！';
  g_sAlreadySetPasswordMsg: string = '仓库早已设置了一个密码，如需要修改密码请使用修改密码命令！';
  g_sReSetPasswordMsg: string = '请重复输入一次仓库密码：';
  g_sPasswordOverLongMsg: string = '输入的密码长度不正确！，密码长度必须在 4 - 7 的范围内，请重新设置密码。';
  g_sReSetPasswordOKMsg: string = '密码设置成功！，仓库已经自动上锁，请记好您的仓库密码，在取仓库时需要使用此密码开锁。';
  g_sReSetPasswordNotMatchMsg: string = '二次输入的密码不一致，请重新设置密码！';
  g_sPleaseInputUnLockPasswordMsg: string = '请输入仓库密码：';
  g_sStorageUnLockOKMsg: string = '密码输入成功！，仓库已经开锁。';
  g_sPasswordUnLockOKMsg: string = '密码输入成功！，密码系统已经开锁。';
  g_sStorageAlreadyUnLockMsg: string = '仓库早已解锁！';
  g_sStorageNoPasswordMsg: string = '仓库还没设置密码！';
  g_sUnLockPasswordFailMsg: string = '密码输入错误！，请检查好再输入。';
  g_sLockStorageSuccessMsg: string = '仓库加锁成功。';
  g_sStoragePasswordClearMsg: string = '仓库密码已清除！';
  g_sPleaseUnloadStoragePasswordMsg: string = '请先解锁密码再使用此命令清除密码！';
  g_sStorageAlreadyLockMsg: string = '仓库早已加锁了！';
  g_sStoragePasswordLockedMsg: string = '由于密码输入错误超过三次，仓库密码已被锁定！';
  g_sSetPasswordMsg: string = '请输入一个长度为 4 - 7 位的仓库密码: ';
  g_sPleaseInputOldPasswordMsg: string = '请输入原仓库密码: ';
  g_sOldPasswordIsClearMsg: string = '密码已清除。';
  g_sPleaseUnLockPasswordMsg: string = '请先解锁仓库密码后再用此命令清除密码！';
  g_sNoPasswordSetMsg: string = '仓库还没设置密码，请用设置密码命令设置仓库密码！';
  g_sOldPasswordIncorrectMsg: string = '输入的原仓库密码不正确！';
  g_sStorageIsLockedMsg: string = '仓库已被加锁，请先输入仓库正确的开锁密码，再取物品！';
  g_sActionIsLockedMsg: string = '您当前已启用密码保护系统，请先输入正确的密码，才可以正常游戏！';
  g_sPasswordNotSetMsg: string = '对不起，没有设置仓库密码此功能无法使用，设置仓库密码请输入指令 @%s';
  g_sNotPasswordProtectMode: string = '您正处于非保护模式，如想您的装备更加安全，请输入指令 @%s';
  g_sCanotDropGoldMsg: string = '太少的金币不允许扔在地上！';
  g_sCanotDropInSafeZoneMsg: string = '安全区不允许扔东西在地上！';
  g_sCanotDropItemMsg: string = '当前无法进行此操作！';
  g_sCanotUseItemMsg: string = '当前无法进行此操作！';
  g_sCanotMapUseItemMsg: string = '当前地图不允许使用%s！';
  {$IF M2Version = 1}
  g_sUseBatterSummoned: string = '连击技启动';
  g_sUseBatterFail: string ='连击技冷却时间还有%d';
  g_sCanUseBatter: string = '您的连击技可以再次使用了';
  g_sUseBatterStorms: string ='您的%s出现爆击，造成额外伤害';
  {$IFEND}
  g_sRecallHeroHint:string ='您的英雄体质还很虚弱.需要%d秒才能继续召唤'; //召唤英雄间隔提示 20071201
  //g_sNotHero:string ='您还没有创建英雄！';//20090413 注释
  g_sHeroClose:string ='神奇的力量散去，你的英雄开始沉睡。';
  g_sHeroRest:string ='英雄行动：休息';
  g_sHeroAttack:string ='英雄行动：攻击';
  g_sHeroFollow:string ='英雄行动：跟随';
  g_sHeroProtect:string ='英雄：开始守护(%d/%d)';
  g_sHeroNotProtect:string ='英雄：停止守护(%d/%d)';
  g_sHeroLoginMsg:string = '状态更改：CTRL-E 指定攻击目标：CTRL-W 守护位置：CTRL-Q 使用合击：CTRL-S';

  g_sOpenShieldOKMsg:string = '不能重复使用该技能！';
  g_sOpenShieldTickMsg:string = '请在%d秒后再使用该技能！';
  g_sButchItemHintMsg:string ='恭喜：玩家[%s]在[%map](%x,%y)挖取到[%item]。';//20080606
  g_sItmeDropHintMsg:string ='系统：[%item]掉落在[%map]的(%X,%Y)';//20080613
  g_sBoxsItemHintMsg:string ='恭喜[%name]打开宝箱获得物品[%s]:%d';//20080613
  g_sBoxsItemHintMsg1:string ='恭喜：[%name]获得了：%s:%d';
  g_sBoxsItemHintMsg2:string ='恭喜：%name打富贵兽获得奖励:%s:%d';//20090524
  g_sJiujinOverHintMsg:string ='酒劲终于消失了,身体也恢复平常的状态';//20080623
  g_sUpAlcoholHintMsg:string ='您的酒量增加了';//20080623

  g_sChallengeWinMsg:string ='您挑战获胜!';
  g_sChallengeLoseMsg:string ='您挑战输了!';
  g_sPleaseTryChallengeLaterMsg:string ='请稍后再挑战！';
  g_sChallengeActionCancelMsg:string ='挑战取消！';
  g_sChallengeItemsDenyGetBackMsg:string ='挑战的金币不可以取回，要取回请取消挑战！';
  g_sChallengeOKTooFast:string ='过早按了确定按钮。';
  g_sChallengeYourBagSizeTooSmall:string ='您的背包空间不够，无法装下挑战胜后获得的物品！';
  g_sChallengeYourGoldLargeThenLimit:string ='您的所带的金币太多，无法装下挑战胜后获得的金币！';
  g_sChallengeHumanBagSizeTooSmall:string ='对方的背包空间不够，无法装下挑战胜后获得的物品！';
  g_sChallengeHumanGoldLargeThenLimit:string ='对方的所带的金币太多，无法装下对方交易给你的金币！';
  g_sYouChallengeOKMsg:string ='请等待对方确认';
  g_sPoseChallengeOKMsg:string ='对方已经确认挑战抵押品，请您确认';
  g_sChallengeTimeOverMsg:string ='时间到,未分出胜负';

  g_sPickUpItemHintMsg: string = '此物品禁止捡起！';
  g_sArmsExhangeItemHintMsg: string = '恭喜：你获得了：%s';
  g_sCanotTryDealMsg: string = '当前无法进行此操作！';
  g_sPleaseTryDealLaterMsg: string = '请稍候再交易！';
  g_sDealItemsDenyGetBackMsg: string = '交易的金币或物品不可以取回，要取回请取消再重新交易！';
  g_sDisableDealItemsMsg: string = '交易功能暂时关闭！';
  g_sDealActionCancelMsg: string = '交易取消！';
  g_sPoseDisableDealMsg: string = '对方禁止进入交易';
  g_sDealSuccessMsg: string = '交易成功...';
  g_sDealOKTooFast: string = '过早按了成交按钮。';
  g_sYourBagSizeTooSmall: string = '您的背包空间不够，无法装下对方交易给您的物品！';
  g_sDealHumanBagSizeTooSmall: string = '交易对方的背包空间不够，无法装下对方交易给您的物品！';
  g_sYourGoldLargeThenLimit: string = '您的所带的金币太多，无法装下对方交易给您的金币！';
  g_sDealHumanGoldLargeThenLimit: string = '交易对方的所带的金币太多，无法装下对方交易给您的金币！';
  g_sYouDealOKMsg: string = '您已经确认交易了。';
  g_sPoseDealOKMsg: string = '对方已经确认交易了。';
  g_sKickClientUserMsg: string = '请不要使用非法外挂软件！！';

  g_sStartMarryManMsg: string = '[%n]: %s 与 %d 的婚礼现在开始...';
  g_sStartMarryWoManMsg: string = '[%n]: %d 与 %s 的婚礼现在开始...';
  g_sStartMarryManAskQuestionMsg: string = '[%n]: %s 您愿意娶 %d 小姐为妻，并照顾她一生一世吗？';
  g_sStartMarryWoManAskQuestionMsg: string = '[%n]: %d 您愿意娶 %s 小姐为妻，并照顾她一生一世吗？';

  g_sMarryManAnswerQuestionMsg: string = '[%s]: 我愿意！，%d 小姐我会尽我一生的时间来照顾您，让您过上快乐美满的日子的。';
  g_sMarryManAskQuestionMsg: string = '[%n]: %d 您愿意嫁给 %s 先生为妻，并照顾他一生一世吗？';

  g_sMarryWoManAnswerQuestionMsg: string = '[%s]: 我愿意！，%d 先生我愿意让你来照顾我，保护我。';
  g_sMarryWoManGetMarryMsg: string = '[%n]: 我宣布 %d 先生与 %s 小姐正式成为合法夫妻。';

  g_sMarryWoManDenyMsg: string = '[%s]: %d 你这个好色之徒，谁会愿意嫁给你呀！，癞蛤蟆想吃天鹅肉。';
  g_sMarryWoManCancelMsg: string = '[%n]: 真是可惜，二个人这个时候才翻脸，你们培养好感情后再来找我吧！';

  g_sfUnMarryManLoginMsg: string = '您的老婆%d已经强行与你脱离了夫妻关系了！';
  g_sfUnMarryWoManLoginMsg: string = '您的老公%d已经强行与你脱离了夫妻关系了！';

  g_sManLoginDearOnlineSelfMsg: string = '您的老婆%d当前位于%m(%x:%y)。';
  g_sManLoginDearOnlineDearMsg: string = '您的老公%s在:%m(%x:%y)上线了！';

  g_sWoManLoginDearOnlineSelfMsg: string = '您的老公当前位于%m(%x:%y)。';
  g_sWoManLoginDearOnlineDearMsg: string = '您的老婆%s在:%m(%x:%y) 上线了！';

  g_sManLoginDearNotOnlineMsg: string = '您的老婆现在不在线！';
  g_sWoManLoginDearNotOnlineMsg: string = '您的老公现在不在线！';

  g_sManLongOutDearOnlineMsg: string = '您的老公在:%m(%x:%y)下线了！';
  g_sWoManLongOutDearOnlineMsg: string = '您的老婆在:%m(%x:%y)下线了！';

  g_sYouAreNotMarryedMsg: string = '您都没结婚查什么？';
  g_sYourWifeNotOnlineMsg: string = '您的老婆还没有上线！';
  g_sYourHusbandNotOnlineMsg: string = '您的老公还没有上线！';

  g_sYourWifeNowLocateMsg: string = '您的老婆现在位于:';
  g_sYourHusbandSearchLocateMsg: string = '您的老公正在找您，他现在位于:';
  g_sYourHusbandNowLocateMsg: string = '您的老公现在位于:';
  g_sYourWifeSearchLocateMsg: string = '您的老婆正在找您，他现在位于:';

  g_sfUnMasterLoginMsg: string = '您的徒弟%d已经背判师门了！';
  g_sfUnMasterListLoginMsg: string = '您的师父%d已经将您逐出师门了！';

  g_sMasterListOnlineSelfMsg: string = '您的师父%d当前位于%m(%x:%y)。';
  g_sMasterListOnlineMasterMsg: string = '您的%d徒弟%s在:%m(%x:%y)上线了！';

  g_sMasterOnlineSelfMsg: string = '您的徒弟当前位于%m(%x:%y)。';
  g_sMasterOnlineMasterListMsg: string = '您的师父%s在:%m(%x:%y) 上线了！';

  g_sMasterLongOutMasterListOnlineMsg: string = '您的师父在:%m(%x:%y)下线了！';
  g_sMasterListLongOutMasterOnlineMsg: string = '您的%d徒弟%s在:%m(%x:%y)下线了！';

  g_sMasterListNotOnlineMsg: string = '您的师父现不在线！';
  g_sMasterNotOnlineMsg: string = '您的徒弟现不在线！';

  g_sYouAreNotMasterMsg: string = '您都没师徒关系查什么？';
  g_sYourMasterNotOnlineMsg: string = '您的师父还没有上线！';
  g_sYourMasterListNotOnlineMsg: string = '您的徒弟还没有上线！';

  g_sYourMasterNowLocateMsg: string = '您的师父现在位于:';
  g_sYourMasterListSearchLocateMsg: string = '您的徒弟正在找您，他现在位于:';
  g_sYourMasterListNowLocateMsg: string = '您的徒弟现在位于:';
  g_sYourMasterSearchLocateMsg: string = '您的师父正在找您，他现在位于:';
  g_sYourMasterListUnMasterOKMsg: string = '您的%d徒弟%d已经圆满出师了！';
  g_sYouAreUnMasterOKMsg: string = '您已经出师了！';

  g_sUnMasterLoginMsg: string = '您的徒弟%s已经圆满出师了！';

  g_sNPCSayUnMasterOKMsg: string = '[%n]: 我宣布%d与%s正式脱离师徒关系。';

  g_sNPCSayForceUnMasterMsg: string = '[%n]: 我宣布%s与%d已经正式脱离师徒关系！';

  g_sMyInfo: string = '『人物名称』:%name 『当前位置』:%map(%x:%y)\『当前等级』:%level ' +
  '『金 币 数』:%gold 『PK 点 数』:%pk\『生 命 值』:%minhp/%maxhp 『魔 法 值』:%minmp/%maxmp\' +
    '『攻 击 力』:%mindc/%maxdc『魔 法 力』:%minmc/%maxmc『道 术 力』:%minsc/%maxsc\『登录时间』' +
    ':%logontime 『在线时长』:%logonlong 分钟';

  g_sSendOnlineCountMsg: string = '当前在线人数: %c';

  g_sOpenedDealMsg: string = '开始交易。';
  g_sSendCustMsgCanNotUseNowMsg: string = '祝福语功能还没有开放！';
  g_sSubkMasterMsgCanNotUseNowMsg: string = '城主发信息功能还没有开放！';
  g_sWeaponRepairSuccess: string = '武器修复成功...';
  g_sDefenceUpTime: string = '防御力增加%d秒';
  //g_sDefenceDownTime: string = '防御力减少%d秒'; //未使用 20080329
  g_sMagDefenceUpTime: string = '魔御力增加%d秒';
  //g_sMagDefenceDownTime: string = '魔法防御力减少%d秒'; //未使用 20080329
  g_sDefenceUpTimeOver: string ='防御力回复正常';//20080611
  g_sMagDefenceUpTimeOver: string ='魔法防御力回复正常';//20080611
  g_sSkill102Time: string = '防御力、魔法防御力减到0，并且效果持续%d秒';
  g_sSkill102TimeOver: string = '防御力、魔法防御力回复正常';

  g_sWinLottery1Msg: string = '祝贺您，中了一等奖。';
  g_sWinLottery2Msg: string = '祝贺您，中了二等奖。';
  g_sWinLottery3Msg: string = '祝贺您，中了三等奖。';
  g_sWinLottery4Msg: string = '祝贺您，中了四等奖。';
  g_sWinLottery5Msg: string = '祝贺您，中了五等奖。';
  g_sWinLottery6Msg: string = '祝贺您，中了六等奖。';
  g_sNotWinLotteryMsg: string = '等下次机会吧！';
  g_sWeaptonMakeLuck: string = '武器被加幸运了...';
  g_sWeaptonNotMakeLuck: string = '无效！';
  g_sTheWeaponIsCursed: string = '您的武器被诅咒了！';
  g_sCanotTakeOffItem: string = '无法取下物品！';
  g_sJoinGroup: string = '%s 加入小组';
  g_sTryModeCanotUseStorage: string = '试玩模式不可以使用仓库功能！';
  g_sCanotGetItems: string = '无法携带更多的东西！';
  g_sEnableDearRecall: string = '允许夫妻传送！';
  g_sDisableDearRecall: string = '禁止夫妻传送！';
  g_sEnableMasterRecall: string = '允许师徒传送！';
  g_sDisableMasterRecall: string = '禁止师徒传送！';
  g_sNowCurrDateTime: string = '当前日期时间: ';
  g_sEnableAllowRebirth: string = '[允许复活]';
  g_sDisableAllowRebirth: string = '[禁止复活]';
  g_sEnableReadMasterMsg: string = '[允许收徒]';
  g_sDisableReadMasterMsg: string = '[拒绝收徒]';
  g_sEnableMarryMsg: string = '[允许求婚]';
  g_sDisableMarryMsg: string = '[拒绝求婚]';
  g_sEnableHearWhisper: string = '[允许私聊]';
  g_sDisableHearWhisper: string = '[禁止私聊]';
  g_sEnableShoutMsg: string = '[允许群聊]';
  g_sDisableShoutMsg: string = '[禁止群聊]';
  g_sEnableBANGMMSG: string = '[允许接收喊话]';//20080211 拒绝所有喊话信息
  g_sDisableBANGMMSG: string = '[禁止接收喊话]';//20080211 拒绝所有喊话信息
  g_sEnableDealMsg: string = '[允许交易]';
  g_sDisableDealMsg: string = '[禁止交易]';
  g_sEnableGuildChat: string = '[允许行会聊天]';
  g_sDisableGuildChat: string = '[禁止行会聊天]';
  g_sEnableJoinGuild: string = '[允许加入行会]';
  g_sDisableJoinGuild: string = '[禁止加入行会]';
  g_sEnableAuthAllyGuild: string = '[允许行会联盟]';
  g_sDisableAuthAllyGuild: string = '[禁止行会联盟]';
  g_sEnableGroupRecall: string = '[允许天地合一]';
  g_sDisableGroupRecall: string = '[禁止天地合一]';
  g_sEnableGuildRecall: string = '[允许行会合一]';
  g_sDisableGuildRecall: string = '[禁止行会合一]';
  g_sPleaseInputPassword: string = '请输入密码:';
  g_sTheMapDisableMove: string = '地图%s(%s)不允许传送！';
  g_sTheMapNotFound: string = '%s 此地图号不存在！';
  g_sYourIPaddrDenyLogon: string = '您当前登录的IP地址已被禁止登录了！';
  g_sYourAccountDenyLogon: string = '您当前登录的帐号已被禁止登录了！';
  g_sYourCharNameDenyLogon: string = '您当前登录的人物已被禁止登录了！';
  g_sCanotPickUpItem: string = '在一定时间以内无法捡起此物品！';
  g_sCanNotPickBindUpItem: string = '该物品处于绑定状态无法拾取。';
  g_sCanotSendmsg: string = '无法发送信息.';
  g_sUserDenyWhisperMsg: string = ' 拒绝私聊！';
  g_sUserNotOnLine: string = '  没有在线！';
  g_sRevivalRecoverMsg: string = '复活戒指生效，体力恢复.';
  g_sRebirthRecoverMsg: string = '重生戒指生效，体力和魔法恢复.';
  g_sClientVersionTooOld: string = '由于您使用的客户端版本太老了，无法正确显示人物信息！';

  g_sCastleGuildName: string = '(%CastleName)%Guildname[%RankName]';
  g_sNoCastleGuildName: string = '%GuildName[%RankName]';
  g_sWarrReNewName: string = '%ChrName\*<圣>*';
  g_sWizardReNewName: string = '%ChrName\*<神>*';
  g_sTaosReNewName: string = '%ChrName\*<尊>*';

  g_sRankLevelName: string = '%s\平民';
  g_sManDearName: string = '%s的老公';
  g_sWoManDearName: string = '%s的老婆';
  {$IF M2Version <> 2}
  g_sComradeName: string = '%s的战友';
  g_sHuhuashizheName: string = '%s的护花使者';
  g_sHumanShowName: string = '%ChrName\%GuildName\%DearName\%MasterName\%comradename\%huhuaname';
  {$ELSE}
  g_sHumanShowName: string = '%ChrName\%GuildName\%DearName\%MasterName';
  {$IFEND}
  g_sMasterName: string = '%s的师父';
  g_sNoMasterName: string = '%s的%s徒弟';

  g_sChangePermissionMsg: string = '当前权限等级为:%d';
  g_sChangHearMsgColorMsg: String = '改变发言文字颜色 时长%d秒';
  g_sChangeKillMonExpRateMsg: string = '您获得了%n小时(%u秒)%g倍经验时间';
  g_sHighLevelKillMonFixExpMsg: String = '真视经验 时长%u秒';
  g_sChangePowerRateMsg: string = '攻击力倍数:%g 时长%d秒';
  g_sChangeMemberLevelMsg: string = '当前会员等级为:%d';
  g_sChangeMemberTypeMsg: string = '当前会员类型为:%d';
  g_sScriptChangeHumanHPMsg: string = '当前HP值为:%d';
  g_sScriptChangeHumanMPMsg: string = '当前MP值为:%d';
  g_sScriptGuildAuraePointNoGuild: string = '您还没加入行会！';
  g_sScriptGuildAuraePointMsg: string = '您的行会人气度为:%d';
  g_sScriptGuildBuildPointNoGuild: string = '您还没加入行会！';
  g_sScriptGuildBuildPointMsg: string = '您的行会的建筑度为:%d';
  g_sScriptGuildFlourishPointNoGuild: string = '您还没加入行会！';
  g_sScriptGuildFlourishPointMsg: string = '您的行会的繁荣度为:%d';
  g_sScriptGuildStabilityPointNoGuild: string = '您的行会的建筑度为:%d';
  g_sScriptGuildStabilityPointMsg: string = '您的行会的安定度为:%d';
  g_sScriptChiefItemCountMsg: string = '您的行会的超级装备数为:%d';

  g_sDisableSayMsg: string = '[由于您重复发相同的内容，%d分钟内您将被禁止发言...]';
  g_sOnlineCountMsg: string = '在线数: %d(%d/%d)';
  g_sTotalOnlineCountMsg: string = '总在线数: %d';
  g_sYouNeedLevelMsg: string = '您的等级要在%d级以上才能用此功能！';
  g_sThisMapDisableSendCyCyMsg: string = '本地图不允许喊话！';
  g_sYouCanSendCyCyLaterMsg: string = '%d秒后才可以再发文字！';
  g_sYouIsDisableSendMsg: string = '禁止聊天！';
  g_sYouMurderedMsg: string = '你犯了谋杀罪！';
  g_sYouKilledByMsg: string = '你被 %s 杀害了！';
  g_sYouProtectedByLawOfDefense: string = '[您受到正当规则保护。]';
  g_sYourUseItemIsNul: string = '您的%s处没有放上装备！';

  g_sBigStorageCountIsNul: string = '限制存放数量不超过 %d！';
resourcestring
  g_sGameLogMsg1 = '%d'#9'%s'#9'%d'#9'%d'#9'%s'#9'%s'#9'%d'#9'%s'#9'%s';
  g_sHumanDieEvent = '人物死亡事件';
  g_sHitOverSpeed = '[攻击超速] %s 间隔:%d 数量:%d';
  g_sRunOverSpeed = '[跑步超速] %s 间隔:%d 数量:%d';
  g_sWalkOverSpeed = '[行走超速] %s 间隔:%d 数量:%d';
  g_sSpellOverSpeed = '[魔法超速] %s 间隔:%d 数量:%d';
  g_sBunOverSpeed = '[游戏超速] %s 间隔:%d 数量:%d';

  g_sGameCommandPermissionTooLow = '权限不够！';
  g_sGameCommandParamUnKnow = '命令格式: @%s %s';
  g_sGameCommandMoveHelpMsg = '地图号';
  g_sGameCommandPositionMoveHelpMsg = '地图号 座标X 座标Y';
  g_sGameCommandPositionMoveCanotMoveToMap = '无法移动到地图: %s X:%s Y:%s';
  g_sGameCommandPositionMoveCanotMoveToMap1 = '无法移动到地图: %s X:%d Y:%d';
  g_sGameCommandInfoHelpMsg = '人物名称';
  //  g_sGameCommandHumanNotOnLine             :String = '%s 现在没在线！';
  g_sNowNotOnLineOrOnOtherServer = '%s 现在不在线，或在其它服务器上！';
  g_sGameCommandMobCountHelpMsg = '地图号';
  g_sGameCommandMobCountMapNotFound = '指定的地图不存在！';
  g_sGameCommandMobCountMonsterCount = '怪物数量：%d';
  g_sGameCommandHumanCountHelpMsg = '地图号';
  g_sGameCommandKickHumanHelpMsg = '人物名称';
  g_sGameCommandTingHelpMsg = '人物名称';
  g_sGameCommandSuperTingHelpMsg = '人物名称 范围(0-10)';
  g_sGameCommandMapMoveHelpMsg = '源地图  目标地图';
  g_sGameCommandMapMoveMapNotFound = '地图%s不存在！';
  g_sGameCommandShutupHelpMsg = '人物名称  时间长度(分钟)';
  g_sGameCommandShutupHumanMsg = '%s 已被禁言%d分钟';
  g_sGameCommandGamePointHelpMsg = '人物名称 控制符(+,-,=) 游戏点数(1-100000000)';
  g_sGameCommandGamePointHumanMsg = '您的游戏点已增加%d点，当前总点数为%d点。';
  g_sGameCommandGamePointGMMsg = '%s的游戏点已增加%d点，当前总点数为%d点。';

  g_sGameCommandCreditPointHelpMsg = '人物名称 控制符(+,-,=) 声望点数(0-255)';
  g_sGameCommandCreditPointHumanMsg = '您的声望点已增加%d点，当前总声望点数为%d点。';
  g_sGameCommandCreditPointGMMsg = '%s的声望点已增加%d点，当前总声望点数为%d点。';

  g_sGameCommandGameDiaMondHelpMsg = ' 人物名称 控制符(+,-,=) 金刚石(1-200000000)';//20071226 金刚石
  g_sGameCommandGameDiaMondHumanMsg = '您的%s已调整%d，当前拥有%d%s。';//20071226 金刚石
  g_sGameCommandGameDiaMondGMMsg = '%s的%s已调整%d，当前拥有%d%s。';   //20071226 金刚石
  g_sGameCommandGameGirdHelpMsg = ' 人物名称 控制符(+,-,=) 灵符(1-200000000)';//20071226 灵符

  g_sGameCommandGameGloryHelpMsg = ' 人物名称 控制符(+,-,=) 荣誉值(1-255)';//20080511 荣誉值

  g_sGameCommandGameGirdHumanMsg = '您的%s已调整%d，当前拥有%d%s。';//20071226 灵符
  g_sGameCommandGameGirdGMMsg = '%s的%s已调整%d，当前拥有%d%s。';   //20071226 灵符

  g_sGameCommandHeroLoyalHelpMsg = ' 英雄名称  忠诚度(1-10000)';//20080311 英雄的忠诚度

  g_sGameCommandGameGoldHelpMsg = ' 人物名称 控制符(+,-,=) 游戏币(1-2100000000)';
  g_sGameCommandGameGoldHumanMsg = '您的%s已增加%d，当前拥有%d%s。';
  g_sGameCommandGameGoldGMMsg = '%s的%s已增加%d，当前拥有%d%s。';

  g_sGameCommandMapInfoMsg = '地图名称: %s(%s)';
  g_sGameCommandMapInfoSizeMsg = '地图大小: X(%d) Y(%d)';

  g_sGameCommandShutupReleaseHelpMsg = '人物名称';
  g_sGameCommandShutupReleaseCanSendMsg = '您已经恢复聊天功能！';
  g_sGameCommandShutupReleaseHumanCanSendMsg = '%s 已经恢复聊天。';
  g_sGameCommandShutupListIsNullMsg = '禁言列表为空！';

  g_sGameCommandLevelConsoleMsg = '[等级调整] %s (%d -> %d)';
  g_sGameCommandSbkGoldHelpMsg = '城堡名称 控制符(=、-、+) 金币数(1-100000000)';
  g_sGameCommandSbkGoldCastleNotFoundMsg = '城堡%s未找到！';
  g_sGameCommandSbkGoldShowMsg = '%s的金币数为: %d 今天收入: %d';
  g_sGameCommandRecallHelpMsg = '人物名称';
  g_sGameCommandReGotoHelpMsg = '人物名称';
  g_sGameCommandShowHumanFlagHelpMsg = '人物名称 标识号';
  g_sGameCommandShowHumanFlagONMsg = '%s: [%d] = ON';
  g_sGameCommandShowHumanFlagOFFMsg = '%s: [%d] = OFF';

  g_sGameCommandShowHumanUnitHelpMsg = '人物名称 单元号';
  g_sGameCommandShowHumanUnitONMsg = '%s: [%d] = ON';
  g_sGameCommandShowHumanUnitOFFMsg = '%s: [%d] = OFF';
  g_sGameCommandMobHelpMsg = '怪物名称 数量 等级 怪类型(1-内功怪 2-英雄经络怪)';
  g_sGameCommandMobMsg = '怪物名称不正确或其它未知问题！';
  g_sGameCommandRecallMobExHelpMsg = '怪物名称 名称颜色 坐标X 坐标Y 地图'; //20080122 召唤宝宝
  g_sGameCommandGIVEMINEHelpMsg = '矿石名称 数量 纯度';//20080403 给指定纯度的矿石
  g_sGameCommandMOVEMOBTOHelpMsg = '怪物名称 原地图 原X 原Y 新地图 新X 新Y'; //20080123 将指定坐标的怪物移动到新坐标
  g_sGameCommandCLEARITEMMAPHelpMsg = '地图 X Y 范围 物品名称'; //20080124 清除地图物品
  g_sGameCommandMobNpcHelpMsg = 'NPC名称 脚本文件名 外形(数字) 属沙城(0,1) 地图 X Y';
  g_sGameCommandNpcScriptHelpMsg = '？？？？';
  g_sGameCommandDelNpcMsg = '命令使用方法不正确，必须与NPC面对面，才能使用此命令！';
  g_sGameCommandRecallMobHelpMsg = '怪物名称 数量 等级 是否变色(0/1) 名字颜色 坐标模式(0/1 1-使用人物当前坐标)';
  g_sGameCommandLuckPointHelpMsg = '人物名称 控制符 幸运点数';

  g_sGameCommandLuckPointMsg = '%s 的幸运点数为:%d/%g 幸运值为:%d';
  g_sGameCommandLotteryTicketMsg = '已中彩票数:%d 未中彩票数:%d 一等奖:%d 二等奖:%d 三等奖:%d 四等奖:%d 五等奖:%d 六等奖:%d ';
  g_sGameCommandReloadGuildHelpMsg = '行会名称';
  g_sGameCommandReloadGuildOnMasterserver = '此命令只能在主游戏服务器上执行！';
  g_sGameCommandReloadGuildNotFoundGuildMsg = '未找到行会%s！';
  g_sGameCommandReloadGuildSuccessMsg = '行会%s重加载成功...';

  g_sGameCommandReloadLineNoticeSuccessMsg = '重新加载公告设置信息完成。';
  g_sGameCommandReloadLineNoticeFailMsg = '重新加载公告设置信息失败！';
  g_sGameCommandFreePKHelpMsg = '人物名称';
  g_sGameCommandFreePKHumanMsg = '您的PK值已经被清除...';
  g_sGameCommandFreePKMsg = '%s的PK值已经被清除...';
  g_sGameCommandPKPointHelpMsg = '人物名称';
  g_sGameCommandPKPointMsg = '%s的PK点数为:%d';
  g_sGameCommandIncPkPointHelpMsg = '人物名称 PK点数';
  g_sGameCommandIncPkPointAddPointMsg = '%s的PK值已增加%d点...';
  g_sGameCommandIncPkPointDecPointMsg = '%s的PK值已减少%d点...';
  g_sGameCommandHumanLocalHelpMsg = '人物名称';
  g_sGameCommandHumanLocalMsg = '%s来自:%s';
  g_sGameCommandPrvMsgHelpMsg = '人物名称';
  g_sGameCommandPrvMsgUnLimitMsg = '%s 已从禁止私聊列表中删除...';
  g_sGameCommandPrvMsgLimitMsg = '%s 已被加入禁止私聊列表...';
  g_sGamecommandMakeHelpMsg = ' 物品名称  数量';
  g_sGamecommandMakeItemNameOrPerMissionNot = '输入的物品名称不正确，或权限不够！';
  g_sGamecommandMakeInCastleWarRange = '攻城区域，禁止使用此功能！';
  g_sGamecommandMakeInSafeZoneRange = '非安全区，禁止使用此功能！';

  g_sGamecommandMakeItemNameNotFound = '%s 物品名称不正确！';
  g_sGamecommandSuperMakeHelpMsg = '身上没指定物品！';
  g_sGameCommandViewWhisperHelpMsg = ' 人物名称';
  g_sGameCommandViewWhisperMsg1 = '已停止侦听%s的私聊信息...';
  g_sGameCommandViewWhisperMsg2 = '正在侦听%s的私聊信息...';
  g_sGameCommandReAliveHelpMsg = ' 人物名称';
  g_sGameCommandReAliveMsg = '%s 已获重生.';
  g_sGameCommandChangeJobHelpMsg = ' 人物名称 职业类型(Warr Wizard Taos)';
  g_sGameCommandChangeJobMsg = '%s 的职业更改成功。';
  g_sGameCommandChangeJobHumanMsg = '职业更改成功。';
  g_sGameCommandTestGetBagItemsHelpMsg = '(用于测试升级武器方面参数)';
  g_sGameCommandShowUseItemInfoHelpMsg = '人物名称';
  g_sGameCommandBindUseItemHelpMsg = '人物名称 物品类型 绑定方法';
  g_sGameCommandBindUseItemNoItemMsg = '%s的%s没有戴物品！';
  g_sGameCommandBindUseItemAlreadBindMsg = '%s的%s上的物品早已绑定过了！';
  g_sGameCommandMobFireBurnHelpMsg = '命令格式: %s %s %s %s %s %s %s';
  g_sGameCommandMobFireBurnMapNotFountMsg = '地图%s 不存在';

  U_DRESSNAME = '衣服';
  U_WEAPONNAME = '武器';
  U_RIGHTHANDNAME = '照明物';
  U_NECKLACENAME = '项链';
  U_HELMETNAME = '头盔';
  U_ARMRINGLNAME = '左手镯';
  U_ARMRINGRNAME = '右手镯';
  U_RINGLNAME = '左戒指';
  U_RINGRNAME = '右戒指';
  U_ZHULINAME = '斗笠';//20080416 斗笠

  U_BUJUKNAME = '物品';
  U_BELTNAME = '腰带';
  U_BOOTSNAME = '鞋子';
  U_CHARMNAME = '宝石';
  U_DRUMNAME = '军鼓';

  //===============================================================
var

  nIPLocal: Integer = -1;
  nStartModule: Integer = -1;{20071106}
{$IF UserMode1 = 1}
  nStartRegister: Integer = -1;//20080630(注册)
  nGetRegisterName: Integer = -1;//20080630(注册)
{$IFEND}
  dwStartTime: LongWord = 0;
  dwStartTimeTick: LongWord = 0;
  //g_nSaveRcdErrorCount: Integer;//20090323 注释
  //g_dwShowSaveRcdErrorTick: LongWord = 0;//20090323 注释
  nGetDateIP: Integer = -1;{20080217 脚本解密函数,SystemModule.dll输出}
  nGetSysDate: Integer = -1;//SystemModule.dll输出 检查是否为3K的插件 20081203
  nGetProductAddress: Integer = -1;{20081018 SystemModule.dll输出,判断指令函数}
  nGetHintInfAddress: Integer = -1;
  boShowSetTxt: Boolean;//20081018 是否显示指定的文本
  sProductName1,sProgram1,sWebSite1,sBbsSite1,sProductInfo1,sSellInfo1: string;//20081018 接指令后M2显示的文本
{$IF UserMode1 = 2}
  //PBoolean1 : ^AnsiString;//存储注册的IP地址 20090324
  pMaxPlayCount : ^Integer;//在线人数 20090731
{$IFEND}

implementation

uses HUtil32, EDcode {$IF UserMode1 = 2},WinlicenseSDK{$IFEND}, Forms;
//var
//  nAddGameDataLog: Integer = -1; //20080815注释

//判断是否需要显示指定的文本
procedure HeroAddSkillToHum(var sStr0,sStr1,sStr2,sStr3,sStr4,sStr5: String);
var
  Src0: array[0..1024] of Char;
  S18: string;
begin
  if (nGetProductAddress >= 0) and Assigned(PlugProcArray[nGetProductAddress].nProcAddr) then begin
    if TGetProductAddress(PlugProcArray[nGetProductAddress].nProcAddr)(@Src0) then begin
      boShowSetTxt:= True;
      s18 := StrPas(PChar(@Src0));
      s18 := GetValidStr3(s18, sStr0, ['|']);
      s18 := GetValidStr3(s18, sStr1, ['|']);
      s18 := GetValidStr3(s18, sStr2, ['|']);
      s18 := GetValidStr3(s18, sStr3, ['|']);
      s18 := GetValidStr3(s18, sStr4, ['|']);
      s18 := GetValidStr3(s18, sStr5, ['|']);
    end;
  end;
end;
(*//访问指定网站文本,取广告
procedure HeroAddSkillToHum1(var sStr0: String);
var
  Src0: array[0..1024] of Char;
  S18: string;
begin
  if (nGetHintInfAddress >= 0) and Assigned(PlugProcArray[nGetHintInfAddress].nProcAddr) then begin
    FillChar(Src0, SizeOf(Src0), 0);
    if TGetHintInfAddress(PlugProcArray[nGetHintInfAddress].nProcAddr)(@Src0) then begin
      s18 := Trim(StrPas(PChar(@Src0)));
      if s18 <> '' then sStr0 := s18;
    end;
  end;
end;  *)

//判断M2标题是否被破解修改 20080603
procedure RegGetStatusFailExitApp(sHeroName: String; nTpye: Byte);
var
  sTemp,sTemp1: String;
{$IF UserMode1 = 2}
  n18: Integer;
  TrialDate: SYSTEMTIME;
{$IFEND}
begin
{$IF UserMode1 = 2}
  {$I Encode_Start.inc}//代码加密标识
  case WLRegGetStatus(n18) of
    wlIsRegistered: begin//注册的
      if nTpye = 1 then begin
        n18:= {WLRegDaysLeft()}WLRegDateDaysLeft();
        case n18 of
          1..7: MainOutMessage(Format('M2剩余天数:%d', [n18]));
          0: begin
            asm //关闭程序
              MOV FS:[0],0;
              MOV DS:[0],EAX;
            end;
          end;
        end;
        WLRegExpirationDate(TrialDate);//取到期日期
        if (Date() > SystemTimeToDateTime(TrialDate)) then begin//当前日期大于到期日期时，则退出 20110829
          asm //关闭程序
            MOV FS:[0],0;
            MOV DS:[0],EAX;
          end;
        end;
        WLRegLicenseCreationDate(TrialDate);//取创建许可证日期
        if (Date() < SystemTimeToDateTime(TrialDate)) then begin//注册文件的生成日期与当前日期对比，要是比当前日期大则退出 20110829
          //MainOutMessage(Format('创建日期大于当前日期{%s}  %s',[DateToStr(Date()), DateToStr(SystemTimeToDateTime(TrialDate))]));
          asm //关闭程序
            MOV FS:[0],0;
            MOV DS:[0],EAX;
          end;
        end;
      end;
    end;
    else begin
      {$IF TESTMODE = 1}
       MainOutMessage(Format('HeroAddSkill  m_nLimitNumber:%d  m_nLimitUserCount:%d  PBoolean2:%d'
         ,[UserEngine.m_nLimitNumber, UserEngine.m_nLimitUserCount, pMaxPlayCount^]));
      {$IFEND}
      if (UserEngine.m_nLimitNumber <> pMaxPlayCount^) or (UserEngine.m_nLimitUserCount <> pMaxPlayCount^)
         or (UserEngine.m_nLimitNumber <> UserEngine.m_nLimitUserCount) or (pMaxPlayCount^ <> 10) then begin
        asm //关闭程序
          MOV FS:[0],0;
          MOV DS:[0],EAX;
        end;
      end;
    end;
  end;//case
  {$I Encode_End.inc}
{$IFEND}
{$IF TESTMODE = 0}//修改测试模式不T人By TasNat at: 2012-10-20 12:56:24
  sTemp := addStringList('5NIOJHH4=8?4:9H?4?48H5?;44=4H;:J>I;<9:O?NMM58H=8'); //www.3KM2.com
  Decode(sTemp, sTemp1);
  if Pos(sTemp1, sHeroName) = 0 then begin
    nCrackedLevel := Random(1000);
    nErrorLevel := Random(1000);
  end;
{$ifend}
{$IF TESTMODE = 1}
    MainOutMessage('CrackedLevel_2:'+inttostr(nCrackedLevel)+'  ErrorLevel:'+inttostr(nErrorLevel)+
      ' m_nLimitNumber:'+inttostr(UserEngine.m_nLimitNumber)+'  m_nLimitUserCount:'+
      inttostr(UserEngine.m_nLimitUserCount));
{$IFEND}
end;

//字符串加解密函数,脚本解密函数,SystemModule.dll输出 20080603
Function addStringList(sSrc: String): String;
var
  Dest: array[0..1024 * 2] of Char;
begin
  if sSrc = '' then Exit;
  {$If TESTMODE = 0}//修改测试模式不处理
  if (nGetDateIP >= 0) and Assigned(PlugProcArray[nGetDateIP].nProcAddr) then begin
    FillChar(Dest, SizeOf(Dest), 0);
    TGetDateIP(PlugProcArray[nGetDateIP].nProcAddr)(@sSrc[1], @Dest);
    Result := StrPas(PChar(@Dest));
    Exit;
  end;
  Result := sSrc;
  {$else}
  Result := '';
  {$ifend}

End;

{//获取文件大小
function GetFilesSize(FileName: string): Integer;
var
  Size: Integer;
  SearchRec: TSearchRec;
begin //获取文件大小MB or KB or Byte
  Size := 0;
  FindFirst(FileName, faAnyFile, SearchRec);
  Size := Size + SearchRec.Size;
  FindClose(SearchRec);
  Result := Size;
end; }
function GetPageCount(ItemCount: Integer): Integer;
begin
  Result := 0;
  if ItemCount > 7 then begin
    Result := ItemCount div 7;
    if (ItemCount mod 7) > 0 then Inc(Result);
    Dec(Result);
  end;
end;

{function GetPlayObjectOrderList(nType: Integer): TStringList;
begin
  EnterCriticalSection(HumanSortCriticalSection);
  try
    Result := nil;
    case nType of
      0: Result := UserEngine.m_PlayObjectLevelList; //人物等级排名
      1: Result := UserEngine.m_WarrorObjectLevelList;
      2: Result := UserEngine.m_WizardObjectLevelList;
      3: Result := UserEngine.m_TaoistObjectLevelList;
      4: Result := UserEngine.m_PlayObjectMasterList;
    end;
  finally
    LeaveCriticalSection(HumanSortCriticalSection);
  end; 
end;}
function GetPlayObjectOrderList(nType: Integer): Integer;
begin
  EnterCriticalSection(HumanSortCriticalSection);
  try
    Result := 0;
    case nType of
      0: Result := g_TaxisAllList.nMaxIdx; //人物等级排名
      1: Result := g_TaxisWarrList.nMaxIdx;
      2: Result := g_TaxisWaidList.nMaxIdx;
      3: Result := g_TaxisTaosList.nMaxIdx;
      4: Result := g_MasterList.nMaxIdx;
    end;
  finally
    LeaveCriticalSection(HumanSortCriticalSection);
  end; 
end;

function GetStartTime(nTime: LongWord): string;
var
  h, s, m, s1: LongWord;
begin
  if nTime >= 3600 then begin
    h := nTime div 3600;
    s := nTime mod 3600; //剩余秒
    m := s div 60;
    s1 := s mod 60;
    Result := Format('%d小时%d分钟%d秒', [h, m, s1]);
  end else begin
    if nTime >= 60 then begin
      m := nTime div 60;
      s := nTime mod 60;
      Result := Format('%d分钟%d秒', [m, s]);
    end else begin
      Result := Format('%d秒', [nTime]);
    end;
  end;
end;

procedure CopyStdItemToOStdItem(StdItem: pTStdItem; OStdItem: pTOStdItem);
begin
  OStdItem.Name := StdItem.Name;
  OStdItem.StdMode := StdItem.StdMode;
  OStdItem.Shape := StdItem.Shape;
  OStdItem.Weight := StdItem.Weight;
  OStdItem.AniCount := StdItem.AniCount;
  OStdItem.Source := StdItem.Source;
  OStdItem.Reserved := StdItem.Reserved;
  OStdItem.NeedIdentify := StdItem.NeedIdentify;
  OStdItem.Looks := StdItem.Looks;
  OStdItem.DuraMax := StdItem.DuraMax;
  OStdItem.AC := MakeWord(_MIN(High(Byte), LoWord(StdItem.AC)), _MIN(High(Byte), HiWord(StdItem.AC)));
  OStdItem.MAC := MakeWord(_MIN(High(Byte), LoWord(StdItem.MAC)), _MIN(High(Byte), HiWord(StdItem.MAC)));
  OStdItem.DC := MakeWord(_MIN(High(Byte), LoWord(StdItem.DC)), _MIN(High(Byte), HiWord(StdItem.DC)));
  OStdItem.MC := MakeWord(_MIN(High(Byte), LoWord(StdItem.MC)), _MIN(High(Byte), HiWord(StdItem.MC)));
  OStdItem.SC := MakeWord(_MIN(High(Byte), LoWord(StdItem.SC)), _MIN(High(Byte), HiWord(StdItem.SC)));
  OStdItem.Need := StdItem.Need;
  OStdItem.NeedLevel := StdItem.NeedLevel;
  OStdItem.Price := StdItem.Price;
end;
//增加插件到列表   (插件函数)
function AddToPulgProcTable(sProcName: string; nCheckCode: Integer): Integer;
var
  I: Integer;
begin
  Result := -1;
  for I := Low(PlugProcArray) to High(PlugProcArray) do begin
    if PlugProcArray[I].sProcName = '' then begin
      PlugProcArray[I].sProcName := sProcName;
      PlugProcArray[I].nProcCode := nCheckCode;
      Result := I;
      Break;
    end;
  end;
end;

function AddToProcTable(ProcAddr: Pointer; sProcName: string; nCheckCode: Integer): Boolean; //增加函数到列表  (引擎内部函数)
var
  I: Integer;
begin
  Result := False;
  for I := Low(ProcArray) to High(ProcArray) do begin
    if ProcArray[I].nProcAddr = nil then begin
      ProcArray[I].nProcAddr := ProcAddr;
      ProcArray[I].sProcName := sProcName;
      ProcArray[I].nProcCode := nCheckCode;
      Result := True;
      Break;
    end;
  end;
end;

function AddToObjTable(Obj: TObject; sObjName: string; nCheckCode: Integer): Boolean; //增加对象到列表
var
  I: Integer;
begin
  Result := False;
  for I := Low(ObjectArray) to High(ObjectArray) do begin
    if ObjectArray[I].Obj = nil then begin
      ObjectArray[I].Obj := Obj;
      ObjectArray[I].sObjcName := sObjName;
      ObjectArray[I].nObjcCode := nCheckCode;
      Result := True;
      Break;
    end;
  end;
end;

//读取公告内容LineNotice.txt
function LoadLineNotice(FileName: string): Boolean;
var
  I: Integer;
  sText: string;
begin
  Result := False;
  if FileExists(FileName) then begin
    LineNoticeList.LoadFromFile(FileName);
    I := 0;
    while (True) do begin
      if LineNoticeList.Count <= I then Break;
      sText := Trim(LineNoticeList.Strings[I]);
      if sText = '' then begin
        LineNoticeList.Delete(I);
        Continue;
      end;
      LineNoticeList.Strings[I] := sText;
      Inc(I);
    end;
    Result := True;
  end;
end;
//读取挂机自动回复文件 20100908
function LoadHangAutoMsg(FileName: string): Boolean;
var
  I: Integer;
  sText: string;
begin
  Result := False;
  if FileExists(FileName) then begin
    HangAutoMsgList.LoadFromFile(FileName);
    I := 0;
    while (True) do begin
      if HangAutoMsgList.Count <= I then Break;
      sText := Trim(HangAutoMsgList.Strings[I]);
      if sText = '' then begin
        HangAutoMsgList.Delete(I);
        Continue;
      end;
      HangAutoMsgList.Strings[I] := sText;
      Inc(I);
    end;
    Result := True;
  end;
end;
//读取Notice.txt公告 20090817
function LoadNotice(FileName: string): Boolean;
begin
  Result := False;
  if FileExists(FileName) then begin
    NoticeList.Clear;
    try
      NoticeList.LoadFromFile(FileName);
    except
      MainOutMessage('读取文本内容错误,文件名为:' + FileName);
    end;
    Result := True;
  end else MainOutMessage('读取Notice.txt公告错误,没有找到文件');
end;

//加载自定义命令 20080729
procedure LoadUserCmdList();
var
  I: Integer;
  sFileName: string;
  LoadList: TStringList;
  sLineText: string;
  sUserCmd: string;
  sCmdNo: string;
  nCmdNo: Integer;
begin
  sFileName := '.\UserCmd.txt';
  if not FileExists(sFileName) then begin
    LoadList := TStringList.Create();
    LoadList.Add(';引擎插件配置文件');
    LoadList.Add(';命令名称'#9'对应编号');
    LoadList.SaveToFile(sFileName);
    LoadList.Free;
    Exit;
  end;
  g_UserCmdList.Clear;
  LoadList := TStringList.Create();
  Try
    LoadList.LoadFromFile(sFileName);
    if LoadList.Count > 0 then begin//20091113 增加
      for I := 0 to LoadList.Count - 1 do begin
        sLineText := LoadList.Strings[I];
        if (sLineText <> '') and (sLineText[1] <> ';') then begin
          sLineText := GetValidStr3(sLineText, sUserCmd, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sCmdNo, [' ', #9]);
          nCmdNo := Str_ToInt(sCmdNo, -1);
          if (sUserCmd <> '') and (nCmdNo >= 0) then begin
            g_UserCmdList.AddObject(sUserCmd, TObject(nCmdNo));
          end;
        end;
      end;
    end;
  finally
    LoadList.Free;
  end;
end;

//加载禁止物品规则
procedure LoadCheckItemList();
var
  I: Integer;
  sFileName, sLineText, sItemName, sCanNoDropItem: string;
  sCanDrop, sCanDeal, sCanStorage, sCanRepair, sCanDropHint, sCanOpenBoxsHint: string;
  sCanButchHint, sCanHeroUse, sCanPickUpItem, sCanDieDropItems, sBuyShopItemGive, sButchItem, sRefineItem, sNpcGiveItem: string;
  sDigJewelHint, s24HourDisap, sPermanentBind, s48HourUnBind: string;
  LoadList: TStringList;
  CheckItem: pTCheckItem;
begin
  sFileName := '.\CheckItemList.txt';
  if g_CheckItemList.Count > 0 then begin//禁止物品规则
    for I := 0 to g_CheckItemList.Count - 1 do begin
      if pTCheckItem(g_CheckItemList.Objects[I]) <> nil then Dispose(pTCheckItem(g_CheckItemList.Objects[I]));
    end;
    g_CheckItemList.Clear;
  end;
  if not FileExists(sFileName) then begin
    LoadList := TStringList.Create();
    LoadList.Add(';引擎插件禁止物品配置文件');
    LoadList.Add(';物品名称'#9'丢弃'#9'交易'#9'存仓'#9'修理'#9'掉落提示'#9'开宝箱提示'#9'永不暴出'#9'挖取提示'#9'禁止英雄使用'#9'禁止捡起'#9'死亡掉落'#9'禁止商铺赠送'#9'禁止挖取'#9'淬练提示'#9'隔一定时间才能捡起'#9'挖宝提示');
    LoadList.SaveToFile(sFileName);
    LoadList.Free;
    Exit;
  end;
  LoadList := TStringList.Create();
  try
    LoadList.LoadFromFile(sFileName);
    if LoadList.Count > 0 then begin//20091113 增加
      for I := 0 to LoadList.Count - 1 do begin
        sLineText := LoadList.Strings[I];
        if (sLineText <> '') and (sLineText[1] <> ';') then begin
          sItemName:='';
          sCanDrop:='';
          sCanDeal:='';
          sCanStorage:='';
          sCanRepair:='';
          sCanDropHint:='';
          sCanOpenBoxsHint:='';
          sCanNoDropItem:='';
          sCanButchHint:='';
          sCanHeroUse:='';
          sCanPickUpItem:='';
          sCanDieDropItems:='';
          sBuyShopItemGive:='';
          sButchItem:='';
          sRefineItem:='';
          sNpcGiveItem:='';
          sDigJewelHint:='';
          s24HourDisap:='';
          sPermanentBind:='';
          s48HourUnBind:='';
          sLineText := GetValidStr3(sLineText, sItemName, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sCanDrop, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sCanDeal, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sCanStorage, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sCanRepair, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sCanDropHint, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sCanOpenBoxsHint, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sCanNoDropItem, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sCanButchHint, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sCanHeroUse, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sCanPickUpItem, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sCanDieDropItems, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sBuyShopItemGive, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sButchItem, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sRefineItem, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sNpcGiveItem, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sDigJewelHint, [' ', #9]);
          sLineText := GetValidStr3(sLineText, s24HourDisap, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sPermanentBind, [' ', #9]);
          sLineText := GetValidStr3(sLineText, s48HourUnBind, [' ', #9]);

          if (sItemName <> '') then begin
            New(CheckItem);
            CheckItem.szItemName := '';
            CheckItem.boCanDrop := False;
            CheckItem.boCanDeal := False;
            CheckItem.boCanStorage := False;
            CheckItem.boCanRepair := False;
            CheckItem.boCanDropHint := False;
            CheckItem.boCanOpenBoxsHint := False;
            CheckItem.boCanNoDropItem := False;
            CheckItem.boCanButchHint := False;
            CheckItem.boCanHeroUse := False;
            CheckItem.boPickUpItem := False;
            CheckItem.boDieDropItems:= False;//死亡掉落 20080614
            CheckItem.boBuyShopItemGive:= False;//禁止商铺赠送 20090205
            CheckItem.boButchItem:= False;//禁止挖取 20090221
            CheckItem.boRefineItem:= False;//淬练提示 20100407
            CheckItem.boNpcGiveItem:= False;//隔一定时间才能捡起 20100530
            CheckItem.boCanDigJewelHint:= False;
            CheckItem.bo24HourDisap:= False;//24时后消失
            CheckItem.boPermanentBind:= False;//永久绑定
            try
              CheckItem.szItemName := sItemName;
              if sCanDrop <> '' then CheckItem.boCanDrop := sCanDrop <> '0';
              if sCanDeal <> '' then CheckItem.boCanDeal := sCanDeal <> '0';
              if sCanStorage <> '' then CheckItem.boCanStorage := sCanStorage <> '0';
              if sCanRepair <> '' then CheckItem.boCanRepair := sCanRepair <> '0';
              if sCanDropHint <> '' then CheckItem.boCanDropHint := sCanDropHint <> '0';
              if sCanOpenBoxsHint <> '' then CheckItem.boCanOpenBoxsHint := sCanOpenBoxsHint <> '0';
              if sCanNoDropItem <> '' then CheckItem.boCanNoDropItem := sCanNoDropItem <> '0';
              if sCanButchHint <> '' then CheckItem.boCanButchHint := sCanButchHint <> '0';
              if sCanHeroUse <> '' then CheckItem.boCanHeroUse := sCanHeroUse <> '0';
              if sCanPickUpItem <> '' then CheckItem.boPickUpItem := sCanPickUpItem <> '0';
              if sCanDieDropItems <> '' then CheckItem.boDieDropItems:= sCanDieDropItems <> '0';//死亡掉落 20080614
              if sBuyShopItemGive <> '' then CheckItem.boBuyShopItemGive:= sBuyShopItemGive <> '0';//禁止商铺赠送 20090205
              if sButchItem <> '' then CheckItem.boButchItem:= sButchItem <> '0';//禁止挖取 20090221
              if sRefineItem <> '' then CheckItem.boRefineItem:= sRefineItem <> '0';//淬练提示 20100407
              if sNpcGiveItem <> '' then CheckItem.boNpcGiveItem:= sNpcGiveItem = '1';//隔一定时间才能捡起 20100530
              if sDigJewelHint <> '' then CheckItem.boCanDigJewelHint:= sDigJewelHint = '1';
              if s24HourDisap <> '' then CheckItem.bo24HourDisap:= s24HourDisap = '1';//24时后消失
              if sPermanentBind <> '' then CheckItem.boPermanentBind:= sPermanentBind = '1';//永久绑定
              if s48HourUnBind <> '' then CheckItem.bo48HourUnBind:= s48HourUnBind = '1';//绑定48时
              g_CheckItemList.AddObject(sItemName, TObject(CheckItem));
            except
              Dispose(CheckItem);//20090205
            end;
          end;
        end;
      end;
    end;
  finally
    LoadList.Free;
  end;
end;

//取禁止物品规则
function GetCheckItemList(nCode: Byte; ItemName: String): Boolean;
var
  I: Integer;
  CheckItem: pTCheckItem;
begin
  Result:= False;
  if (g_CheckItemList = nil) or (ItemName='') then Exit;
  if g_CheckItemList.Count > 0 then begin
    I:= g_CheckItemList.IndexOf(ItemName);
    if I > -1 then begin
      CheckItem := pTCheckItem(g_CheckItemList.Objects[I]);
      if CheckItem <> nil then begin
         Case nCode of
           0: if CheckItem.boCanDrop then Result:= True;//物品禁止扔
           1: if CheckItem.boCanDeal then Result:= True;//物品禁止交易
           2: if CheckItem.boCanStorage then Result:= True;//物品禁止存
           3: if CheckItem.boCanRepair then Result:= True;//物品禁止修
           4: if CheckItem.boCanDropHint then Result:= True;//物品掉落提示
           5: if CheckItem.boCanOpenBoxsHint then Result:= True;//开启宝箱提示,全F提示
           6: if CheckItem.boCanNoDropItem then Result:= True;//永不暴出
           7: if CheckItem.boCanButchHint then Result:= True;//挖取提示
           {$IF HEROVERSION = 1}
           8: if CheckItem.boCanHeroUse then Result:= True;//禁止英雄使用
           {$IFEND}
           9: if CheckItem.boPickUpItem then Result:= True;//禁止捡起(除GM外)
           10: if CheckItem.boDieDropItems then Result:= True;//死亡掉落
           11: if CheckItem.boBuyShopItemGive then Result:= True;//禁止赠送
           12: if CheckItem.boButchItem then Result:= True;//禁止挖的物品
           {$IF M2Version <> 2}
           13: if CheckItem.boRefineItem then Result:= True;//淬练成功提示
           15: if CheckItem.boCanDigJewelHint then Result:= True;//挖宝提示
           {$IFEND}
           14: if CheckItem.boNpcGiveItem then Result:= True;//物品爆出，隔一定时间才能捡起 20100530
           16: if CheckItem.bo24HourDisap then Result:= True;//24时消失
           17: if CheckItem.boPermanentBind then Result:= True;//永久绑定
           18: if CheckItem.bo48HourUnBind then Result:= True;//绑定48时
         end;//Case
      end;//CheckItem <> nil
    end;
  end;

end;

//加载消息过滤 20080729
procedure LoadMsgFilterList();
var
  I: Integer;
  sFileName: string;
  LoadList: TStringList;
  sLineText: string;
  sFilterMsg: string;
  sNewMsg: string;
  FilterMsg: pTFilterMsg;
begin
  sFileName := '.\MsgFilterList.txt';
  if g_MsgFilterList.Count > 0 then begin
    for I := 0 to g_MsgFilterList.Count - 1 do begin
      if pTFilterMsg(g_MsgFilterList.Items[I]) <> nil then Dispose(pTFilterMsg(g_MsgFilterList.Items[I]));
    end;
    g_MsgFilterList.clear;
  end;
  if not FileExists(sFileName) then begin
    LoadList := TStringList.Create;
    LoadList.Add(';引擎插件消息过滤配置文件');
    LoadList.Add(';过滤消息'#9'替换消息');
    LoadList.SaveToFile(sFileName);
    LoadList.Free;
    Exit;
  end;
  LoadList := TStringList.Create();
  try
    LoadList.LoadFromFile(sFileName);
    if LoadList.Count > 0 then begin//20091113 增加
      for I := 0 to LoadList.Count - 1 do begin
        sLineText := LoadList.Strings[I];
        if (sLineText <> '') and (sLineText[1] <> ';') then begin
          sLineText := GetValidStr3(sLineText, sFilterMsg, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sNewMsg, [' ', #9]);
          if (sFilterMsg <> '') then begin
            New(FilterMsg);
            FilterMsg.sFilterMsg := sFilterMsg;
            FilterMsg.sNewMsg := sNewMsg;
            g_MsgFilterList.Add(FilterMsg);
          end;
        end;
      end;
    end;
  finally
    LoadList.Free;
  end;
end;
//消息过滤
function IsFilterMsg(var sMsg: string): Boolean;
var
  I: Integer;
  FilterMsg: pTFilterMsg;
begin
  Result := False;
  if g_MsgFilterList = nil then begin
    Result := TRUE;
    Exit;
  end;
  if g_MsgFilterList.Count > 0 then begin//20080629
    for I := 0 to g_MsgFilterList.Count - 1 do begin
      FilterMsg := g_MsgFilterList.Items[I];
      if (FilterMsg.sFilterMsg <> '') and (AnsiContainsText(sMsg, FilterMsg.sFilterMsg)) then begin//检查字符串是否含有指定的字符
        if FilterMsg.sNewMsg = '' then begin
          sMsg := '';
        end else begin
          sMsg := AnsiReplaceText(sMsg, FilterMsg.sFilterMsg, FilterMsg.sNewMsg);//替换字符
        end;
        Result := TRUE;
        break;
      end;
    end;//for
  end;
  Result := TRUE;
end;

//加载商铺配置 20080730
//商品分类  商品名称  出售价格  图片开始  图片结束  简单介绍  商品描述
procedure LoadShopItemList();
var
  I, nPrice, nCount: Integer;
  sFileName, sLineText, sItemName, sPrice, sIntroduce, sIdx, sImgBegin, sImgend, sIntroduce1, sCount: string;
  LoadList: TStringList;
  StdItem: pTStdItem;
  ShopInfo: pTShopInfo;
begin
  sFileName := '.\BuyItemList.txt';
  if not FileExists(sFileName) then begin
    LoadList := TStringList.Create();
    LoadList.Add(';引擎插件商铺配置文件');
    LoadList.Add(';商品分类'#9'商品名称'#9'出售价格'#9'图片开始'#9'图片结束'#9'简单介绍'#9'商品描述');
    LoadList.SaveToFile(sFileName);
    LoadList.Free;
    Exit;
  end;

  if g_ShopItemList.Count > 0 then begin
    for I := 0 to g_ShopItemList.Count - 1 do begin
      if pTShopInfo(g_ShopItemList.Items[I]) <> nil then Dispose(pTShopInfo(g_ShopItemList.Items[I]));
    end;
    g_ShopItemList.clear;
  end;

  LoadList := TStringList.Create();
  try
    LoadList.LoadFromFile(sFileName);
    if LoadList.Count > 0 then begin//20091113 增加
      for I := 0 to LoadList.Count - 1 do begin
        sLineText := LoadList.Strings[I];
        if (sLineText <> '') and (sLineText[1] <> ';') then begin
          SetLength(sIntroduce, 50);
          sLineText := GetValidStr3(sLineText, sIdx, [' ', #9]);//商品分类
          sLineText := GetValidStr3(sLineText, sItemName, [' ', #9]);//商品名称
          sLineText := GetValidStr3(sLineText, sPrice, [' ', #9]);//出售价格
          sLineText := GetValidStr3(sLineText, sImgBegin, [' ', #9]);//图片开始
          sLineText := GetValidStr3(sLineText, sImgend, [' ', #9]);//图片结束
          sLineText := GetValidStr3(sLineText, sIntroduce1, [' ', #9]);//简单介绍
          sLineText := GetValidStr3(sLineText, sIntroduce, [' ', #9]);//商品描述
          sLineText := GetValidStr3(sLineText, sCount, [' ', #9]);//数量
          nPrice := Str_ToInt(sPrice, -1);
          nCount := Str_ToInt(sCount, 1);
          if (sItemName <> '') and (nPrice >= 0) and (sIntroduce <> '') and (sIdx <> '') then begin
            StdItem := UserEngine.GetStdItem(sItemName);
            if StdItem <> nil then begin
              New(ShopInfo);
              ShopInfo.Idx := sIdx;
              ShopInfo.ImgBegin := sImgBegin;
              ShopInfo.Imgend := sImgEnd;
              ShopInfo.Introduce1 := sIntroduce1;
              ShopInfo.StdItem := StdItem^;
              ShopInfo.StdItem.Price := nPrice * 100;//价格
              ShopInfo.StdItem.NeedLevel := nCount;//数量
              FillChar(ShopInfo.sIntroduce, SizeOf(ShopInfo.sIntroduce), 0);
              Move(sIntroduce[1], ShopInfo.sIntroduce, Length(sIntroduce));
              g_ShopItemList.Add(ShopInfo);
            end;
          end;
        end;
      end;
    end;
  finally
    LoadList.Free;
  end;
end;

function GetMultiServerAddrPort(btServerIndex: Byte; var sIPaddr: string; var nPort: Integer): Boolean;
begin
  Result := False;
end;

procedure MainOutMessage(Msg: string);
begin
  if not g_Config.boShowExceptionMsg then begin
    if (Length(Msg) > 2) and ((Msg[1] = '{') or (Msg[1] = 'A')) then Exit;
  end;
  EnterCriticalSection(LogMsgCriticalSection);
  try
    MainLogMsgList.Add(DateTimeToStr(Now) + ' ' + Msg);
  finally
    LeaveCriticalSection(LogMsgCriticalSection);
  end;
end;

function GetExVersionNO(nVersionDate: Integer; var nOldVerstionDate: Integer): Integer;
begin
  Result := 0;
  nOldVerstionDate := 0;
  if nVersionDate > 900000000 then begin
    while (nVersionDate > 900000000) do begin
      Dec(nVersionDate, 900000000);
      Inc(Result, 900000000);
    end;
  end;
  nOldVerstionDate := nVersionDate;
end;

function GetNextDirection(sX, sY, dx, dy: Integer): Byte;
var
  flagx, flagy: Integer;
begin
  Result := DR_DOWN;
  if sX < dx then flagx := 1
  else if sX = dx then flagx := 0
  else flagx := -1;
  if abs(sY - dy) > 2
    then if (sX >= dx - 1) and (sX <= dx + 1) then flagx := 0;

  if sY < dy then flagy := 1
  else if sY = dy then flagy := 0
  else flagy := -1;
  if abs(sX - dx) > 2 then if (sY > dy - 1) and (sY <= dy + 1) then flagy := 0;

  if (flagx = 0) and (flagy = -1) then Result := DR_UP;
  if (flagx = 1) and (flagy = -1) then Result := DR_UPRIGHT;
  if (flagx = 1) and (flagy = 0) then Result := DR_RIGHT;
  if (flagx = 1) and (flagy = 1) then Result := DR_DOWNRIGHT;
  if (flagx = 0) and (flagy = 1) then Result := DR_DOWN;
  if (flagx = -1) and (flagy = 1) then Result := DR_DOWNLEFT;
  if (flagx = -1) and (flagy = 0) then Result := DR_LEFT;
  if (flagx = -1) and (flagy = -1) then Result := DR_UPLEFT;
end;

//检查是否可以穿上装备
function CheckUserItems(nIdx: Integer; StdItem: pTStdItem): Boolean; //004B2D70
begin
  Result := False;
  case nIdx of
    U_DRESS: if (StdItem.StdMode = 10) or (StdItem.StdMode = 11) then Result := True;
    U_WEAPON: if (StdItem.StdMode = 5) or (StdItem.StdMode = 6) then Result := True;
    U_RIGHTHAND: if (StdItem.StdMode = 30) then Result := True;
    U_NECKLACE: if (StdItem.StdMode = 19) or (StdItem.StdMode = 20) or (StdItem.StdMode = 21) or (StdItem.StdMode = 28) or (StdItem.StdMode = 29) then Result := True;//20100513  20100628
    U_HELMET: if StdItem.StdMode = 15 then Result := True;
    U_ZHULI: if StdItem.StdMode = 16 then Result := True;//斗笠
    U_ARMRINGL: if (StdItem.StdMode = 24) or (StdItem.StdMode = 25) or (StdItem.StdMode = 26) then Result := True;
    U_ARMRINGR: if (StdItem.StdMode = 24) or (StdItem.StdMode = 26) then Result := True;
    U_RINGL,U_RINGR: if (StdItem.StdMode = 22) or (StdItem.StdMode = 23) or (StdItem.StdMode = 27) then Result := True;//20100513
    U_BUJUK: if (StdItem.StdMode = 25) or ((StdItem.StdMode = 2) and (StdItem.AniCount = 21)) then Result := True;
    U_BELT: if (StdItem.StdMode = 54) or (StdItem.StdMode = 64) then Result := True;
    U_BOOTS: if (StdItem.StdMode = 52) or (StdItem.StdMode = 62) then Result := True;
    U_DRUM: if (StdItem.StdMode = 55) {or (StdItem.StdMode = 62)} then Result := True; // remark军鼓问题
    U_CHARM: if (StdItem.StdMode = 53) or (StdItem.StdMode = 63) or (StdItem.StdMode = 7) then Result := True;
  end;
end;

function AddDateTimeOfDay(DateTime: TDateTime; nDay: Integer): TDateTime; //00455DD4
var
  Year, Month, Day: Word;
begin
  if nDay > 0 then begin
    Dec(nDay);
    DecodeDate(DateTime, Year, Month, Day);
    while (True) do begin
      if MonthDays[False][Month] >= (Day + nDay) then Break;
      nDay := (Day + nDay) - MonthDays[False][Month] - 1;
      Day := 1;
      if Month <= 11 then begin
        Inc(Month);
        Continue;
      end;
      Month := 1;
      if Year = 99 then begin
        Year := 2000;
        Continue;
      end;
      Inc(Year);
    end; // while
    //TryEncodeDate(Year,Month,Day,Result);
    Inc(Day, nDay);
    Result := EncodeDate(Year, Month, Day);
  end else begin
    Result := DateTime;
  end;
end;

function GetGoldShape(nGold: Integer): Word;
begin
  Result := 112;
  if nGold >= 30 then Result := 113;
  if nGold >= 70 then Result := 114;
  if nGold >= 300 then Result := 115;
  if nGold >= 1000 then Result := 116;
end;

function GetRandomLook(nBaseLook, nRage: Integer): Integer;
begin
  Result := nBaseLook + Random(nRage);
end;
//检查行会名称是否合法
function CheckGuildName(sGuildName: string): Boolean;
var
  I: Integer;
begin
  Result := True;
  if Length(sGuildName) > g_Config.nGuildNameLen then begin
    Result := False;
    Exit;
  end;
  for I := 1 to Length(sGuildName) do begin
    if (sGuildName[I] < '0' {30}) or
      (sGuildName[I] = '/' {2F}) or
      (sGuildName[I] = '\' {5C}) or
      (sGuildName[I] = ':' {3A}) or
      (sGuildName[I] = '*') or
      (sGuildName[I] = ' ') or
      (sGuildName[I] = '"') or
      (sGuildName[I] = '''') or
      (sGuildName[I] = '<' {3C}) or
      (sGuildName[I] = '|' {7C}) or
      (sGuildName[I] = '?' {3F}) or
      (sGuildName[I] = '>' {3E}) then begin
      Result := False;
      Break;//20091113 增加
    end;
  end;
end;
//取物品制造ID
function GetItemNumber(): Integer;
begin
  Inc(g_Config.nItemNumber);
  if g_Config.nItemNumber > (High(Integer) div 2 - 1) then begin
    g_Config.nItemNumber := 1;
  end;
  Result := g_Config.nItemNumber;
end;

//称号制造ID
function GetFengHaoNumber(): Integer;
begin
  Inc(g_Config.nFengHaoNumber);
  if g_Config.nFengHaoNumber > (High(Integer) div 2 - 1) then begin
    g_Config.nFengHaoNumber := 1;
  end;
  Result := g_Config.nFengHaoNumber;
end;

function GetItemNumberEx(): Integer;
begin
  Inc(g_Config.nItemNumberEx);
  if g_Config.nItemNumberEx < High(Integer) div 2 then g_Config.nItemNumberEx := High(Integer) div 2;

  if g_Config.nItemNumberEx > (High(Integer) - 1) then begin
    g_Config.nItemNumberEx := High(Integer) div 2;
  end;
  Result := g_Config.nItemNumberEx;
end;
//过滤客户端显示的名字,去除数字及-符号
function FilterShowName(sName: string): string;
var
  I: Integer;
  SC: string;
  bo11: Boolean;
begin
  Result := '';
  SC := '';
  bo11 := False;
  for I := 1 to Length(sName) do begin
    if ((sName[I] >= '0') and (sName[I] <= '9')) or (sName[I] = '-') then begin
      Result := Copy(sName, 1, I - 1);
      SC := Copy(sName, I, Length(sName));
      bo11 := True;
      Break;
    end;
  end;
  if not bo11 then Result := sName;
end;

function sub_4B2F80(nDir, nRage: Integer): Byte;
begin
  Result := (nDir + nRage) mod 8;
end;
//服务器变量 20080124
function GetValNameNo(sText: string): Integer;
var
  nValNo: Integer;
  sNo: string;
begin
  Result := -1;
  if Length(sText) > 4{3} then Exit; //20080125 扩展修改
  if Length(sText) >= 2 then begin
    sNo := Copy(sText, 2, Length(sText) - 1);
    if IsStringNumber(sNo) then begin
      if UpCase(sText[1]) = 'P' then begin//0..99
        if Length(sText) = 3 then begin
          nValNo := Str_ToInt(Copy(sText, 2, 2), -1);  //20080125 扩展为0-99
          if nValNo < 100 then Result := nValNo ;
        end else begin
          nValNo := Str_ToInt(sText[2], -1);
          if nValNo < 10 then Result := nValNo;
        end;
      end;
      if UpCase(sText[1]) = 'G' then begin//OK 100..199 800..1199
        if Length(sText) = 4 then begin  //20080903 扩展为0-499
          nValNo := Str_ToInt(Copy(sText, 2, 4), -1);
          if (nValNo < 500) and (nValNo > 99) then Result := nValNo + 700;//100-499: 800..1199
          if (nValNo < 1000) and (nValNo > 499) then Result := nValNo + 1600; //500-999: 2100..2599
        end else begin
          if Length(sText) = 3 then begin
            nValNo := Str_ToInt(Copy(sText, 2, 3), -1);
            if nValNo < 100 then Result := nValNo + 100;
          end else begin
            nValNo := Str_ToInt(sText[2], -1);
            if nValNo < 10 then Result := nValNo + 100 ;
          end;
        end;
      end;
      if UpCase(sText[1]) = 'M' then begin//300..399
        if Length(sText) = 3 then begin
          nValNo := Str_ToInt(Copy(sText, 2, 2), -1);
          if nValNo < 100 then Result := nValNo + 300;
        end else begin
          nValNo := Str_ToInt(sText[2], -1);
          if nValNo < 10 then Result := nValNo + 300;
        end;
      end;
      if UpCase(sText[1]) = 'I' then begin
        if Length(sText) = 3 then begin
          nValNo := Str_ToInt(Copy(sText, 2, 3), -1);
          if nValNo < 100 then Result := nValNo + 400;
        end else begin
          nValNo := Str_ToInt(sText[2], -1);
          if nValNo < 10 then Result := nValNo + 400;
        end;
      end;
      if UpCase(sText[1]) = 'D' then begin//200..299
         if Length(sText) = 3 then begin
           nValNo := Str_ToInt(Copy(sText, 2, 2), -1);
           if nValNo < 100 then Result := nValNo + 200;
         end else begin
           nValNo := Str_ToInt(sText[2], -1);
           if nValNo < 10 then Result := nValNo + 200; 
         end;
      end;
      if UpCase(sText[1]) = 'N' then begin//500..599
        if Length(sText) = 3 then begin
          nValNo := Str_ToInt(Copy(sText, 2, 2), -1);
          if nValNo < 100 then Result := nValNo + 500;
        end else begin
          nValNo := Str_ToInt(sText[2], -1);
          if nValNo < 10 then Result := nValNo + 500;
        end;
      end;
      if UpCase(sText[1]) = 'S' then begin//600..699    Play.m_sString
        if Length(sText) = 3 then begin
          nValNo := Str_ToInt(Copy(sText, 2, 2), -1);
          if nValNo < 100 then Result := nValNo + 600;
        end else begin
          nValNo := Str_ToInt(sText[2], -1);
          if nValNo < 10 then Result := nValNo + 600;
        end;
      end;
      if UpCase(sText[1]) = 'A' then begin//700..799 1200..2099
        if Length(sText) = 4 then begin  //扩展为0-999
          nValNo := Str_ToInt(Copy(sText, 2, 4), -1);
          if (nValNo < 1000) and (nValNo > 99) then Result := nValNo + 1100;
        end else begin
          if Length(sText) = 3 then begin
            nValNo := Str_ToInt(Copy(sText, 2, 3), -1);
            if nValNo < 100 then Result := nValNo + 700;
          end else begin
            nValNo := Str_ToInt(sText[2], -1);
            if nValNo < 10 then Result := nValNo + 700;
          end;
        end;
      end;
      if UpCase(sText[1]) = 'T' then begin
        if Length(sText) = 3 then begin
          nValNo := Str_ToInt(Copy(sText, 2, 3), -1);
          if nValNo < 100 then Result := nValNo + 700;
        end else begin
          nValNo := Str_ToInt(sText[2], -1);
          if nValNo < 10 then Result := nValNo + 700;
        end;
      end;
    end;
  end;
end;
//是可以使用的物品
function IsUpgradeWaponUseItem(nIndex: Integer): Boolean;
var
  StdItem: pTStdItem;
begin
  StdItem := UserEngine.GetStdItem(nIndex);
  if StdItem.StdMode in [19, 20, 21, 22, 23, 24, 26] then Result := True
  else Result := False;
end;

function GetMakeItemInfo(sItemName: string): TStringList;
var
  I: Integer;
begin
  Result := nil;
  if g_MakeItemList.Count > 0 then begin//20080629
    for I := 0 to g_MakeItemList.Count - 1 do begin
      if g_MakeItemList.Strings[I] = sItemName then begin
        Result := TStringList(g_MakeItemList.Objects[I]);
        Break;
      end;
    end;
  end;
end;
//--------------------------------------------------------
//检查是否为限时物品
function CanLimitItem(sItemName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  g_LimitItemList.Lock;
  try
    if g_LimitItemList.Count > 0 then begin
      I:= g_LimitItemList.IndexOf(sItemName);
      if I > -1 then Result := True;
    end;
  finally
    g_LimitItemList.UnLock;
  end;
end;
//取限时物品可用小时数
function GetLimitItemTimeCount(sItemName: string): Integer;
var
  I: Integer;
begin
  Result := 0;
  I:= -1;
  g_LimitItemList.Lock;
  try
    if g_LimitItemList.Count > 0 then begin
      I:= g_LimitItemList.IndexOf(sItemName);
      if I > -1 then Result := Integer(g_LimitItemList.Objects[I]);
    end;
  finally
    g_LimitItemList.UnLock;
  end;
end;
//读取限时物品列表
function LoadLimitItemList(): Boolean;
var
  I, n10: Integer;
  LoadList: TStringList;
  sFileName, s20, tStr, sData: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'EnableLimitItem.txt';
  LoadList := TStringList.Create;
  try
    if FileExists(sFileName) then begin
      g_LimitItemList.Lock;
      try
        if g_LimitItemList.Count > 0 then g_LimitItemList.Clear;
        LoadList.LoadFromFile(sFileName);
        if LoadList.Count > 0 then begin
          for I := 0 to LoadList.Count - 1 do begin
            tStr := LoadList.Strings[I];
            if (tStr <> '') and (tStr[1] <> ';') then begin
              tStr := GetValidStr3(tStr, sData, [' ', #9]);//物品名
              tStr := GetValidStrCap(tStr, s20, [' ', #9]);//可用小时数
              n10 := Str_ToInt(s20, 0);
              if (n10 > 0) and (sData <> '') then g_LimitItemList.AddObject(sData, TObject(n10));
            end;
          end;
        end;
      finally
        g_LimitItemList.UnLock;
      end;
      Result := True;
    end else begin
      LoadList.SaveToFile(sFileName);
    end;
  finally
    LoadList.Free;
  end;
end;

function SaveLimitItemList(): Boolean;
var
  I, n10: Integer;
  LoadList: TStringList;
  sFileName, sItemName: string;
begin
  sFileName := g_Config.sEnvirDir + 'EnableLimitItem.txt';
  g_LimitItemList.Lock;
  try
    LoadList:= TStringList.Create;
    try
      if g_LimitItemList.Count > 0 then begin
        for I := 0 to g_LimitItemList.Count - 1 do begin
          sItemName := g_LimitItemList.Strings[I];
          n10:= Integer(g_LimitItemList.Objects[I]);
          LoadList.Add(sItemName+'  '+inttostr(n10));
        end;
      end;
      LoadList.SaveToFile(sFileName);
    finally
      LoadList.Free;
    end;
  finally
    g_LimitItemList.UnLock;
  end;
  Result := True;
end;
//-----------------------------------------------------------
{$IF M2Version <> 2}
function LoadHeartSkillName(): Boolean;
begin
  g_HeartSkillNameList.Add('百');
  g_HeartSkillNameList.Add('地');
  g_HeartSkillNameList.Add('步');
  g_HeartSkillNameList.Add('断');
  g_HeartSkillNameList.Add('风');
  g_HeartSkillNameList.Add('刺');
  g_HeartSkillNameList.Add('飞');
  g_HeartSkillNameList.Add('凤');
  g_HeartSkillNameList.Add('刀');
  g_HeartSkillNameList.Add('焚');
  g_HeartSkillNameList.Add('光');
  g_HeartSkillNameList.Add('赋');
  g_HeartSkillNameList.Add('幻');
  g_HeartSkillNameList.Add('虎');
  g_HeartSkillNameList.Add('动');
  g_HeartSkillNameList.Add('击');
  g_HeartSkillNameList.Add('火');
  g_HeartSkillNameList.Add('狂');
  g_HeartSkillNameList.Add('间');
  g_HeartSkillNameList.Add('剑');
  g_HeartSkillNameList.Add('裂');
  g_HeartSkillNameList.Add('金');
  g_HeartSkillNameList.Add('脚');
  g_HeartSkillNameList.Add('凌');
  g_HeartSkillNameList.Add('雷');
  g_HeartSkillNameList.Add('诀');
  g_HeartSkillNameList.Add('猛');
  g_HeartSkillNameList.Add('麟');
  g_HeartSkillNameList.Add('破');
  g_HeartSkillNameList.Add('千');
  g_HeartSkillNameList.Add('龙');
  g_HeartSkillNameList.Add('气');
  g_HeartSkillNameList.Add('神');
  g_HeartSkillNameList.Add('木');
  g_HeartSkillNameList.Add('拳');
  g_HeartSkillNameList.Add('十');
  g_HeartSkillNameList.Add('日');
  g_HeartSkillNameList.Add('扫');
  g_HeartSkillNameList.Add('万');
  g_HeartSkillNameList.Add('蛇');
  g_HeartSkillNameList.Add('闪');
  g_HeartSkillNameList.Add('翔');
  g_HeartSkillNameList.Add('水');
  g_HeartSkillNameList.Add('手');
  g_HeartSkillNameList.Add('玄');
  g_HeartSkillNameList.Add('天');
  g_HeartSkillNameList.Add('术');
  g_HeartSkillNameList.Add('一');
  g_HeartSkillNameList.Add('烟');
  g_HeartSkillNameList.Add('行');
  g_HeartSkillNameList.Add('御');
  g_HeartSkillNameList.Add('岩');
  g_HeartSkillNameList.Add('跃');
  g_HeartSkillNameList.Add('斩');
  g_HeartSkillNameList.Add('雨');
  g_HeartSkillNameList.Add('逐');
  g_HeartSkillNameList.Add('月');
  g_HeartSkillNameList.Add('纵');
end;

function IsOKHeratSkillName(sSkillName: string): Boolean;
  function CopyEx(Source: string; StartPos, Len: Integer): string;
  begin
    if StartPos < 1 then StartPos := 1;
    if StartPos > Length(Source) then StartPos := Length(Source);
    if Len < 0 then Len := 0;
    if Len > Length(Source) then Len := Length(Source);
    if ByteType(Source, StartPos) = mbTrailByte then Inc(StartPos);
    if ByteType(Source, Len) = mbTrailByte then begin
      if ByteType(Source, Len) = mbTrailByte then begin //汉字的第二个字节
        Result := Copy(Source, StartPos, Len);
      end else
      if ByteType(Source, Len) = mbLeadByte then begin //汉字的第一个字节
        Result := Copy(Source, StartPos, Len - 1);
      end else begin
        Result := Copy(Source, StartPos, Len);
      end;
    end;
  end;
var
  I:integer;
  str: string;
begin
  Result := True;
  if Length(sSkillName) > 0 then begin
    for I:= 0 to Length(sSkillName) do begin
      if (I mod 2) <> 1 then begin
        str:= CopyEx(sSkillName, I, 2);
        if str <> '' then begin
          if g_HeartSkillNameList.IndexOf(str) = -1 then begin
            Result := False;
            Break;
          end;
        end;
      end;
    end;
  end;
end;
//取淬炼后的物品列表
function GetRefineItemInfo(sItemName, sItemName1, sItemName2: string): TList;
  function InStr(Str,sItemName, sItemName1, sItemName2: string):Boolean;
  begin
    Result := False;
    if length(Str)= length(sItemName+'+'+sItemName1+'+'+sItemName2) then begin
      if pos(sItemName,Str) > 0 then begin
        Str:= copy(Str,0,pos(sItemName,Str))+ copy(Str,pos(sItemName,Str)+length(sItemName),length(str));
        if pos(sItemName1,Str) > 0 then begin
          Str:= copy(Str,0,pos(sItemName1,Str))+ copy(Str,pos(sItemName1,Str)+length(sItemName1),length(str));
          if pos(sItemName2,Str) > 0 then Result := True;
        end;
      end;
    end;
  end;
var
  I: Integer;
  Str: String;
begin
  Result := nil;
  if g_RefineItemList.Count > 0 then begin//20080629
    for I := 0 to g_RefineItemList.Count - 1 do begin
      Str:= g_RefineItemList.Strings[I];
      if InStr(Str,sItemName, sItemName1, sItemName2) then begin
        Result := TList(g_RefineItemList.Objects[I]);
        Break;
      end;
    end;
  end;
end;

//检查是否可以兑换卷轴碎片 20100812
function CanArmsExchangeItem(sItemName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  g_EnableArmsExchangeList.Lock;
  try
    if g_EnableArmsExchangeList.Count > 0 then begin
      I:= g_EnableArmsExchangeList.IndexOf(sItemName);
      if I > -1 then Result := True;
    end;
  finally
    g_EnableArmsExchangeList.UnLock;
  end;
end;
//取可兑换量
function GetArmsExchangeItemCount(sItemName: string): Integer;
var
  I: Integer;
begin
  Result := 0;
  I:= -1;
  g_EnableArmsExchangeList.Lock;
  try
    if g_EnableArmsExchangeList.Count > 0 then begin
      I:= g_EnableArmsExchangeList.IndexOf(sItemName);
      if I > -1 then Result := Integer(g_EnableArmsExchangeList.Objects[I]);
    end;
  finally
    g_EnableArmsExchangeList.UnLock;
  end;
end;
//读取允许兑换卷轴碎片列表
function LoadEnableArmsExchangeItem(): Boolean;
var
  I, n10: Integer;
  LoadList: TStringList;
  sFileName, s20, tStr, sData: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'EnableArmsExchangeItem.txt';
  LoadList := TStringList.Create;
  try
    if FileExists(sFileName) then begin
      g_EnableArmsExchangeList.Lock;
      try
        if g_EnableArmsExchangeList.Count > 0 then g_EnableArmsExchangeList.Clear;
        LoadList.LoadFromFile(sFileName);
        if LoadList.Count > 0 then begin
          for I := 0 to LoadList.Count - 1 do begin
            tStr := LoadList.Strings[I];
            if (tStr <> '') and (tStr[1] <> ';') then begin
              tStr := GetValidStr3(tStr, sData, [' ', #9]);//物品名
              tStr := GetValidStrCap(tStr, s20, [' ', #9]);//可兑换量
              n10 := Str_ToInt(s20, 0);
              if (n10 > 0) and (sData <> '') then g_EnableArmsExchangeList.AddObject(sData, TObject(n10));
            end;
          end;
        end;
      finally
        g_EnableArmsExchangeList.UnLock;
      end;
      Result := True;
    end else begin
      LoadList.SaveToFile(sFileName);
    end;
  finally
    LoadList.Free;
  end;
end;

function SaveEnableArmsExchangeItem(): Boolean;
var
  I, n10: Integer;
  LoadList: TStringList;
  sFileName, sItemName: string;
begin
  sFileName := g_Config.sEnvirDir + 'EnableArmsExchangeItem.txt';
  g_EnableArmsExchangeList.Lock;
  try
    LoadList:= TStringList.Create;
    try
      if g_EnableArmsExchangeList.Count > 0 then begin
        for I := 0 to g_EnableArmsExchangeList.Count - 1 do begin
          sItemName := g_EnableArmsExchangeList.Strings[I];
          n10:= Integer(g_EnableArmsExchangeList.Objects[I]);
          LoadList.Add(sItemName+'  '+inttostr(n10));
        end;
      end;
      LoadList.SaveToFile(sFileName);
    finally
      LoadList.Free;
    end;
  finally
    g_EnableArmsExchangeList.UnLock;
  end;
  Result := True;
end;
{$IFEND}
//增加游戏日志
procedure AddGameDataLog(sMsg: string);
begin
  try
   { //调用插件中的日志处理函数，返回值为True 时直接退出函数，False 时使用默认函数处理游戏日志 //20080815注释
    if (nAddGameDataLog >= 0) and Assigned(PlugProcArray[nAddGameDataLog].nProcAddr) then begin
      if TGameDataLog(PlugProcArray[nAddGameDataLog].nProcAddr)(PChar(sMsg), Length(sMsg)) then
        Exit;
    end; }
    EnterCriticalSection(LogMsgCriticalSection);
    try
      LogStringList.Add(sMsg);
    finally
      LeaveCriticalSection(LogMsgCriticalSection);
    end;
  except
    MainOutMessage(format('{%s} AddGameDataLog',[g_sExceptionVer]));
  end;
end;
//增加登录日志
procedure AddLogonCostLog(sMsg: string); 
begin
  EnterCriticalSection(LogMsgCriticalSection);
  try
    LogonCostLogList.Add(sMsg);
  finally
    LeaveCriticalSection(LogMsgCriticalSection);
  end;
end;
//去除列表中的空格
procedure TrimStringList(sList: TStringList);
var
  n8: Integer;
  SC: string;
begin
  n8 := 0;
  while (True) do begin
    if (sList.Count) <= n8 then Break;
    SC := Trim(sList.Strings[n8]);
    if SC = '' then begin
      sList.Delete(n8);
      Continue;
    end;
    Inc(n8);
  end;
end;
//是否能制造物品
function CanMakeItem(sItemName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  g_DisableMakeItemList.Lock;
  try
    if g_DisableMakeItemList.Count > 0 then begin//20080629
      I:= g_DisableMakeItemList.IndexOf(sItemName);//20090620 修改
      if I > -1 then begin
        Result := False;
        Exit;
      end;
      {for I := 0 to g_DisableMakeItemList.Count - 1 do begin
        if CompareText(g_DisableMakeItemList.Strings[I], sItemName) = 0 then begin
          Result := False;
          Exit;
        end;
      end;}
    end;
  finally
    g_DisableMakeItemList.UnLock;
  end;

  g_EnableMakeItemList.Lock;
  try
    if g_EnableMakeItemList.Count > 0 then begin
      I:= g_EnableMakeItemList.IndexOf(sItemName);//20090620 修改
      if I > -1 then begin
        Result := True;
      end;
      {for I := 0 to g_EnableMakeItemList.Count - 1 do begin
        if CompareText(g_EnableMakeItemList.Strings[I], sItemName) = 0 then begin
          Result := True;
          Break;
        end;
      end;}
    end;
  finally
    g_EnableMakeItemList.UnLock;
  end;
end;

function GetStartPointInfo(nIndex: Integer; var nX, nY: Integer): string;
var
  StartPoint: pTStartPoint;
begin
  Result := '';
  nX := 0;
  nY := 0;
  if (nIndex >= 0) and (nIndex < g_StartPointList.Count) then begin
    StartPoint := pTStartPoint(g_StartPointList.Objects[nIndex]);
    if StartPoint <> nil then begin
      nX := StartPoint.m_nCurrX;
      nY := StartPoint.m_nCurrY;
      Result := StartPoint.m_sMapName;
    end;
  end;
end;
{//20080416 去掉拍卖功能
function CanSellOffItem(sItemName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  g_AllowSellOffItemList.Lock;
  try
    for I := 0 to g_AllowSellOffItemList.Count - 1 do begin
      if CompareText(g_AllowSellOffItemList.Strings[I], sItemName) = 0 then begin
        Result := True;
        Break;
      end;
    end;
  finally
    g_AllowSellOffItemList.UnLock;
  end;
end; }

function CanMoveMap(sMapName: string): Boolean;
var
  I: Integer;
begin
  Result := True;
  g_DisableMoveMapList.Lock;
  try
    if g_DisableMoveMapList.Count > 0 then begin//20080629
       I:= g_DisableMoveMapList.IndexOf(sMapName);//20090620 修改
       if I > -1 then begin
         Result := False;
       end;
      {for I := 0 to g_DisableMoveMapList.Count - 1 do begin
        if CompareText(g_DisableMoveMapList.Strings[I], sMapName) = 0 then begin
          Result := False;
          Break;
        end;
      end;}
    end;
  finally
    g_DisableMoveMapList.UnLock;
  end;
end;

function LoadItemBindIPaddr(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
  sLineText, sMakeIndex, sItemIndex, sBindName: string;
  nMakeIndex, nItemIndex: Integer;
  ItemBind: pTItemBind;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemBindIPaddr.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_ItemBindIPaddr.Lock;
    try
      if g_ItemBindIPaddr.Count > 0 then begin//20080629
        for I := 0 to g_ItemBindIPaddr.Count - 1 do begin
          if pTItemBind(g_ItemBindIPaddr.Items[I]) <> nil then
            Dispose(pTItemBind(g_ItemBindIPaddr.Items[I]));
        end;
        g_ItemBindIPaddr.Clear;
      end;
      LoadList.LoadFromFile(sFileName);
      if LoadList.Count > 0 then begin//20080629
        for I := 0 to LoadList.Count - 1 do begin
          sLineText := Trim(LoadList.Strings[I]);
          if sLineText <> '' then begin
            if sLineText[1] = ';' then Continue;
            sLineText := GetValidStr3(sLineText, sItemIndex, [' ', ',', #9]);
            sLineText := GetValidStr3(sLineText, sMakeIndex, [' ', ',', #9]);
            sLineText := GetValidStr3(sLineText, sBindName, [' ', ',', #9]);
            nMakeIndex := Str_ToInt(sMakeIndex, -1);
            nItemIndex := Str_ToInt(sItemIndex, -1);
            if (nMakeIndex > 0) and (nItemIndex > 0) and (sBindName <> '') then begin
              New(ItemBind);
              ItemBind.nMakeIdex := nMakeIndex;
              ItemBind.nItemIdx := nItemIndex;
              ItemBind.sBindName := sBindName;
              g_ItemBindIPaddr.Add(ItemBind);
            end;
          end;
        end;//for
      end;
    finally
      g_ItemBindIPaddr.UnLock;
    end;
    Result := True;
  end else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveItemBindIPaddr(): Boolean;
var
  I: Integer;
  SaveList: TStringList;
  sFileName: string;
  ItemBind: pTItemBind;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemBindIPaddr.txt';
  SaveList := TStringList.Create;
  try
    g_ItemBindIPaddr.Lock;
    try
      if g_ItemBindIPaddr.Count > 0 then begin//20080629
        for I := 0 to g_ItemBindIPaddr.Count - 1 do begin
          ItemBind := g_ItemBindIPaddr.Items[I];
          SaveList.Add(IntToStr(ItemBind.nItemIdx) + #9 + IntToStr(ItemBind.nMakeIdex) + #9 + ItemBind.sBindName);
        end;
      end;
    finally
      g_ItemBindIPaddr.UnLock;
    end;
    SaveList.SaveToFile(sFileName);
  finally
    SaveList.Free;
  end;
  Result := True;
end;

function LoadItemBindAccount(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
  sLineText, sMakeIndex, sItemIndex, sBindName: string;
  nMakeIndex, nItemIndex: Integer;
  ItemBind: pTItemBind;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemBindAccount.txt';
  LoadList := TStringList.Create;
  try
    if FileExists(sFileName) then begin
      g_ItemBindAccount.Lock;
      try
        if g_ItemBindAccount.Count > 0 then begin//20080629
          for I := 0 to g_ItemBindAccount.Count - 1 do begin
            if pTItemBind(g_ItemBindAccount.Items[I]) <> nil then
               Dispose(pTItemBind(g_ItemBindAccount.Items[I]));
          end;
          g_ItemBindAccount.Clear;
        end;
        LoadList.LoadFromFile(sFileName);
        if LoadList.Count > 0 then begin//20080629
          for I := 0 to LoadList.Count - 1 do begin
            sLineText := Trim(LoadList.Strings[I]);
            if sLineText <> '' then begin
              if sLineText[1] = ';' then Continue;
              sLineText := GetValidStr3(sLineText, sItemIndex, [' ', ',', #9]);
              sLineText := GetValidStr3(sLineText, sMakeIndex, [' ', ',', #9]);
              sLineText := GetValidStr3(sLineText, sBindName, [' ', ',', #9]);
              nMakeIndex := Str_ToInt(sMakeIndex, -1);
              nItemIndex := Str_ToInt(sItemIndex, -1);
              if (nMakeIndex > 0) and (nItemIndex > 0) and (sBindName <> '') then begin
                New(ItemBind);
                ItemBind.nMakeIdex := nMakeIndex;
                ItemBind.nItemIdx := nItemIndex;
                ItemBind.sBindName := sBindName;
                g_ItemBindAccount.Add(ItemBind);
              end;
            end;
          end;//for
        end;
      finally
        g_ItemBindAccount.UnLock;
      end;
      Result := True;
    end else begin
      LoadList.SaveToFile(sFileName);
    end;
  finally
    LoadList.Free;
  end;
end;

function SaveItemBindAccount(): Boolean;
var
  I: Integer;
  SaveList: TStringList;
  sFileName: string;
  ItemBind: pTItemBind;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemBindAccount.txt';
  SaveList := TStringList.Create;
  try
    g_ItemBindAccount.Lock;
    try
      if g_ItemBindAccount.Count > 0 then begin//20080629
        for I := 0 to g_ItemBindAccount.Count - 1 do begin
          ItemBind := g_ItemBindAccount.Items[I];
          SaveList.Add(IntToStr(ItemBind.nItemIdx) + #9 + IntToStr(ItemBind.nMakeIdex) + #9 + ItemBind.sBindName);
        end;
      end;
    finally
      g_ItemBindAccount.UnLock;
    end;
    SaveList.SaveToFile(sFileName);
  finally
    SaveList.Free;
  end;
  Result := True;
end;

function LoadItemDblClickList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
  sLineText, sMakeIndex, sItemName, sMapName, sX, sY: string;
  nMakeIndex: Integer;
  nCurrX: Integer;
  nCurrY: Integer;
  ItemEvent: pTItemEvent;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemDblClickList.txt';
  LoadList := TStringList.Create;
  if g_ItemDblClickList <> nil then begin
    if g_ItemDblClickList.Count > 0 then begin//20080629
      for I := 0 to g_ItemDblClickList.Count - 1 do begin
        if pTItemEvent(g_ItemDblClickList.Items[I]) <> nil then
           Dispose(pTItemEvent(g_ItemDblClickList.Items[I]));
      end;
    end;
    g_ItemDblClickList.Free;
  end;
  g_ItemDblClickList := TGList.Create;
  if FileExists(sFileName) then begin
    g_ItemDblClickList.Lock;
    try
      LoadList.LoadFromFile(sFileName);
      if LoadList.Count > 0 then begin//20080629
        for I := 0 to LoadList.Count - 1 do begin
          sLineText := Trim(LoadList.Strings[I]);
          if (sLineText = '') or (sLineText[1] = ';') then Continue;
          sLineText := GetValidStr3(sLineText, sItemName, [' ', ',', #9]);
          sLineText := GetValidStr3(sLineText, sMakeIndex, [' ', ',', #9]);
          sLineText := GetValidStr3(sLineText, sMapName, [' ', ',', #9]);
          sLineText := GetValidStr3(sLineText, sX, [' ', ',', #9]);
          sLineText := GetValidStr3(sLineText, sY, [' ', ',', #9]);
          nMakeIndex := Str_ToInt(sMakeIndex, -1);
          nCurrX := Str_ToInt(sX, -1);
          nCurrY := Str_ToInt(sY, -1);
          if (nMakeIndex > 0) and (sMapName <> '') and (nCurrX >= 0) and (nCurrY >= 0) then begin
            New(ItemEvent);
            ItemEvent.m_sItemName := sItemName;
            ItemEvent.m_nMakeIndex := nMakeIndex;
            ItemEvent.m_sMapName := sMapName;
            ItemEvent.m_nCurrX := nCurrX;
            ItemEvent.m_nCurrY := nCurrY;
            g_ItemDblClickList.Add(ItemEvent);
          end;
        end;//for
      end;
    finally
      g_ItemDblClickList.UnLock;
    end;
    Result := True;
  end else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveItemDblClickList(): Boolean;
var
  I: Integer;
  SaveList: TStringList;
  sFileName: string;
  ItemEvent: pTItemEvent;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemDblClickList.txt';
  SaveList := TStringList.Create;
  g_ItemDblClickList.Lock;
  try
    if g_ItemDblClickList.Count > 0 then begin//20080629
      for I := 0 to g_ItemDblClickList.Count - 1 do begin
        ItemEvent := g_ItemDblClickList.Items[I];
        SaveList.Add(ItemEvent.m_sItemName + #9 + IntToStr(ItemEvent.m_nMakeIndex) + #9 + ItemEvent.m_sMapName + #9 + IntToStr(ItemEvent.m_nCurrX) + #9 + IntToStr(ItemEvent.m_nCurrY));
      end;
    end;
  finally
    g_ItemBindCharName.UnLock;
  end;
  SaveList.SaveToFile(sFileName);
  SaveList.Free;
  Result := True;
end;

function LoadItemBindCharName(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
  sLineText, sMakeIndex, sItemIndex, sBindName: string;
  nMakeIndex, nItemIndex: Integer;
  ItemBind: pTItemBind;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemBindChrName.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_ItemBindCharName.Lock;
    try
      if g_ItemBindCharName.Count > 0 then begin//20080629
        for I := 0 to g_ItemBindCharName.Count - 1 do begin
          if pTItemBind(g_ItemBindCharName.Items[I]) <> nil then
             Dispose(pTItemBind(g_ItemBindCharName.Items[I]));
        end;
        g_ItemBindCharName.Clear;
      end;
      LoadList.LoadFromFile(sFileName);
      if LoadList.Count > 0 then begin//20080629
        for I := 0 to LoadList.Count - 1 do begin
          sLineText := Trim(LoadList.Strings[I]);
          if sLineText <> '' then begin
            if sLineText[1] = ';' then Continue;
            sLineText := GetValidStr3(sLineText, sItemIndex, [' ', ',', #9]);
            sLineText := GetValidStr3(sLineText, sMakeIndex, [' ', ',', #9]);
            sLineText := GetValidStr3(sLineText, sBindName, [' ', ',', #9]);
            nMakeIndex := Str_ToInt(sMakeIndex, -1);
            nItemIndex := Str_ToInt(sItemIndex, -1);
            if (nMakeIndex > 0) and (nItemIndex > 0) and (sBindName <> '') then begin
              New(ItemBind);
              ItemBind.nMakeIdex := nMakeIndex;
              ItemBind.nItemIdx := nItemIndex;
              ItemBind.sBindName := sBindName;
              g_ItemBindCharName.Add(ItemBind);
            end;
          end;
        end;//for
      end;
    finally
      g_ItemBindCharName.UnLock;
    end;
    Result := True;
  end else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveItemBindCharName(): Boolean;
var
  I: Integer;
  SaveList: TStringList;
  sFileName: string;
  ItemBind: pTItemBind;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemBindChrName.txt';
  SaveList := TStringList.Create;
  g_ItemBindCharName.Lock;
  try
    if g_ItemBindCharName.Count > 0 then begin//20080629
      for I := 0 to g_ItemBindCharName.Count - 1 do begin
        ItemBind := g_ItemBindCharName.Items[I];
        SaveList.Add(IntToStr(ItemBind.nItemIdx) + #9 + IntToStr(ItemBind.nMakeIdex) + #9 + ItemBind.sBindName);
      end;
    end;
  finally
    g_ItemBindCharName.UnLock;
  end;
  SaveList.SaveToFile(sFileName);
  SaveList.Free;
  Result := True;
end;

//读取人物装备死亡不爆列表 20081127
function LoadItemBindDieNoDropName(): Boolean;
var
  I, nItemIndex: Integer;
  LoadList: TStringList;
  sFileName, sLineText, sItemIndex, sBindName: string;
  ItemBind: pTItemBind;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemBindDieNoDropName.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_ItemBindDieNoDropName.Lock;
    try
      if g_ItemBindDieNoDropName.Count > 0 then begin
        for I := 0 to g_ItemBindDieNoDropName.Count - 1 do begin
          if pTItemBind(g_ItemBindDieNoDropName.Items[I]) <> nil then
             Dispose(pTItemBind(g_ItemBindDieNoDropName.Items[I]));
        end;
        g_ItemBindDieNoDropName.Clear;
      end;
      LoadList.LoadFromFile(sFileName);
      if LoadList.Count > 0 then begin
        for I := 0 to LoadList.Count - 1 do begin
          sLineText := Trim(LoadList.Strings[I]);
          if sLineText <> '' then  begin
            if sLineText[1] = ';' then Continue;
            sLineText := GetValidStr3(sLineText, sItemIndex, [' ', ',', #9]);
            sLineText := GetValidStr3(sLineText, sBindName, [' ', ',', #9]);
            nItemIndex := Str_ToInt(sItemIndex, -1);
            if (nItemIndex > 0) and (sBindName <> '') then begin
              New(ItemBind);
              ItemBind.nMakeIdex := 0;
              ItemBind.nItemIdx := nItemIndex;
              ItemBind.sBindName := sBindName;
              g_ItemBindDieNoDropName.Add(ItemBind);
            end;
          end;
        end;//for
      end;
    finally
      g_ItemBindDieNoDropName.UnLock;
    end;
    Result := True;
  end else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

//保存人物装备死亡不爆列表 20081127
function SaveItemBindDieNoDropName(): Boolean;
var
  I: Integer;
  SaveList: TStringList;
  sFileName: string;
  ItemBind: pTItemBind;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemBindDieNoDropName.txt';
  SaveList := TStringList.Create;
  g_ItemBindDieNoDropName.Lock;
  try
    if g_ItemBindDieNoDropName.Count > 0 then begin
      for I := 0 to g_ItemBindDieNoDropName.Count - 1 do begin
        ItemBind := g_ItemBindDieNoDropName.Items[I];
        SaveList.Add(IntToStr(ItemBind.nItemIdx) + #9 + ItemBind.sBindName);
      end;
    end;
  finally
    g_ItemBindDieNoDropName.UnLock;
  end;
  SaveList.SaveToFile(sFileName);
  SaveList.Free;
  Result := True;
end;

function LoadDisableMakeItem(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'DisableMakeItem.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_DisableMakeItemList.Lock;
    try
      if g_DisableMakeItemList.Count > 0 then g_DisableMakeItemList.Clear;
      LoadList.LoadFromFile(sFileName);
      if LoadList.Count > 0 then begin//20080629
        for I := 0 to LoadList.Count - 1 do begin
          g_DisableMakeItemList.Add(Trim(LoadList.Strings[I]));
        end;
      end;
    finally
      g_DisableMakeItemList.UnLock;
    end;
    Result := True;
  end else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveDisableMakeItem(): Boolean;
var
  sFileName: string;
begin
  sFileName := g_Config.sEnvirDir + 'DisableMakeItem.txt';
  g_DisableMakeItemList.Lock;
  try
    g_DisableMakeItemList.SaveToFile(sFileName);
  finally
    g_DisableMakeItemList.UnLock;
  end;
  Result := True;
end;

function SaveAdminList(): Boolean;
var
  I: Integer;
  sFileName: string;
  SaveList: TStringList;
  sPermission: string;
  nPermission: Integer;
  AdminInfo: pTAdminInfo;
begin
  sFileName := g_Config.sEnvirDir + 'AdminList.txt';
  SaveList := TStringList.Create;
  UserEngine.m_AdminList.Lock;
  try
    if UserEngine.m_AdminList.Count > 0 then begin//20080629
      for I := 0 to UserEngine.m_AdminList.Count - 1 do begin
        AdminInfo := pTAdminInfo(UserEngine.m_AdminList.Items[I]);
        nPermission := AdminInfo.nLv;
        if nPermission = 10 then sPermission := '*';
        if nPermission = 9 then sPermission := '1';
        if nPermission = 8 then sPermission := '2';
        if nPermission = 7 then sPermission := '3';
        if nPermission = 6 then sPermission := '4';
        if nPermission = 5 then sPermission := '5';
        if nPermission = 4 then sPermission := '6';
        if nPermission = 3 then sPermission := '7';
        if nPermission = 2 then sPermission := '8';
        if nPermission = 1 then sPermission := '9';
  {$IF VEROWNER = WL}
        SaveList.Add(sPermission + #9 + AdminInfo.sChrName + #9 + AdminInfo.sIPaddr);
  {$ELSE}
        SaveList.Add(sPermission + #9 + AdminInfo.sChrName);
  {$IFEND}
      end;//for
    end;
    SaveList.SaveToFile(sFileName);
  finally
    UserEngine.m_AdminList.UnLock;
  end;
  Result := True;
end;

function LoadUnMasterList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'UnMaster.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_UnMasterList.Lock;
    try
      if g_UnMasterList.Count > 0 then g_UnMasterList.Clear;//20080831 修改
      LoadList.LoadFromFile(sFileName);
      if LoadList.Count > 0 then begin//20080629
        for I := 0 to LoadList.Count - 1 do begin
          g_UnMasterList.Add(Trim(LoadList.Strings[I]));
        end;
      end;
    finally
      g_UnMasterList.UnLock;
    end;
    Result := True;
  end else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;
function SaveUnMasterList(): Boolean;
var
  sFileName: string;
begin
  sFileName := g_Config.sEnvirDir + 'UnMaster.txt';
  g_UnMasterList.Lock;
  try
    g_UnMasterList.SaveToFile(sFileName);
  finally
    g_UnMasterList.UnLock;
  end;
  Result := True;
end;

function LoadUnForceMasterList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'UnForceMaster.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_UnForceMasterList.Lock;
    try
      if g_UnForceMasterList.Count > 0 then g_UnForceMasterList.Clear;//20080831 修改
      LoadList.LoadFromFile(sFileName);
      if LoadList.Count > 0 then begin//20080629
        for I := 0 to LoadList.Count - 1 do begin
          g_UnForceMasterList.Add(Trim(LoadList.Strings[I]));
        end;
      end;
    finally
      g_UnForceMasterList.UnLock;
    end;
    Result := True;
  end else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;
function SaveUnForceMasterList(): Boolean;
var
  sFileName: string;
begin
  sFileName := g_Config.sEnvirDir + 'UnForceMaster.txt';
  g_UnForceMasterList.Lock;
  try
    g_UnForceMasterList.SaveToFile(sFileName);
  finally
    g_UnForceMasterList.UnLock;
  end;
  Result := True;
end;

function LoadEnableMakeItem(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'EnableMakeItem.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_EnableMakeItemList.Lock;
    try
      if g_EnableMakeItemList.Count > 0 then g_EnableMakeItemList.Clear;//20080831 修改
      LoadList.LoadFromFile(sFileName);
      if LoadList.Count > 0 then begin//20080629
        for I := 0 to LoadList.Count - 1 do begin
          g_EnableMakeItemList.Add(Trim(LoadList.Strings[I]));
        end;
      end;
    finally
      g_EnableMakeItemList.UnLock;
    end;
    Result := True;
  end else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveEnableMakeItem(): Boolean;
var
  sFileName: string;
begin
  sFileName := g_Config.sEnvirDir + 'EnableMakeItem.txt';
  g_EnableMakeItemList.Lock;
  try
    g_EnableMakeItemList.SaveToFile(sFileName);
  finally
    g_EnableMakeItemList.UnLock;
  end;
  Result := True;
end;

function LoadDisableMoveMap(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'DisableMoveMap.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_DisableMoveMapList.Lock;
    try
      if g_DisableMoveMapList.Count > 0 then g_DisableMoveMapList.Clear;//20080831 修改
      LoadList.LoadFromFile(sFileName);
      if LoadList.Count > 0 then begin//20080629
        for I := 0 to LoadList.Count - 1 do begin
          g_DisableMoveMapList.Add(Trim(LoadList.Strings[I]));
        end;
      end;
    finally
      g_DisableMoveMapList.UnLock;
    end;
    Result := True;
  end else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;
function SaveDisableMoveMap(): Boolean;
var
  sFileName: string;
begin
  sFileName := g_Config.sEnvirDir + 'DisableMoveMap.txt';
  g_DisableMoveMapList.Lock;
  try
    g_DisableMoveMapList.SaveToFile(sFileName);
  finally
    g_DisableMoveMapList.UnLock;
  end;
  Result := True;
end;

procedure LoadBindItemTypeFromUnbindList();
  function AddBindItemType(sItemName: string; nShape: Integer): Boolean;
  var
    BindItem: pTBindItem;
    I: Integer;
    StdItem: pTStdItem;
  begin
    Result := False;
    if UserEngine.StdItemList.Count > 0 then begin//20080629
      for I := 0 to UserEngine.StdItemList.Count - 1 do begin
        StdItem := UserEngine.StdItemList.Items[I];
        if CompareText(StdItem.Name, sItemName) = 0 then begin
           if StdItem.StdMode = 0 then begin
            if (StdItem.Shape = 0) and (StdItem.AC > 0) and (StdItem.MAC = 0) then begin //红药
              New(BindItem);
              BindItem.sUnbindItemName := StdItem.Name;
              BindItem.nStdMode := 31;
              BindItem.nShape := nShape;
              BindItem.btItemType := 0;
              g_BindItemTypeList.Add(BindItem);
              Result := True;
              Break;
            end else
              if (StdItem.Shape = 0) and (StdItem.AC = 0) and (StdItem.MAC > 0) then begin
              New(BindItem);
              BindItem.sUnbindItemName := StdItem.Name;
              BindItem.nStdMode := 31;
              BindItem.nShape := nShape;
              BindItem.btItemType := 1;
              g_BindItemTypeList.Add(BindItem);
              Result := True;
              Break;
            end else
              if (StdItem.Shape = 1) and (StdItem.AC > 0) and (StdItem.MAC > 0) then begin
              New(BindItem);
              BindItem.sUnbindItemName := StdItem.Name;
              BindItem.nStdMode := 31;
              BindItem.nShape := nShape;
              BindItem.btItemType := 2;
              g_BindItemTypeList.Add(BindItem);
              Result := True;
              Break;
            end;
          end;
        end;
      end;//for
    end;
  end;
var
  I: Integer;
  sItemName: string;
  nShape: Integer;
begin
  if UserEngine <> nil then begin
    g_BindItemTypeList := TGList.Create;
    if g_UnbindList.Count > 0 then begin//20080629
      for I := 0 to g_UnbindList.Count - 1 do begin
        sItemName := g_UnbindList.Strings[I];
        nShape := Integer(g_UnbindList.Objects[I]);
        AddBindItemType(sItemName, nShape);
      end;
    end;
  end;
end;

function GetBindItemType(nShape: Integer): Integer;
var
  BindItem: pTBindItem;
  I: Integer;
begin
  Result := -1;
  if g_BindItemTypeList <> nil then begin
    if g_BindItemTypeList.Count > 0 then begin//20080629
      for I := 0 to g_BindItemTypeList.Count - 1 do begin
        BindItem := g_BindItemTypeList.Items[I];
        if BindItem.nShape = nShape then begin
          Result := BindItem.btItemType;
          Break;
        end;
      end;
    end;
  end;
end;
//查找指定解包分类能解出的物品名称  20080927
function GetBindItemName(nShape: Integer): String;
var
  BindItem: pTBindItem;
  I: Integer;
begin
  Result := '';
  if g_BindItemTypeList <> nil then begin
    if g_BindItemTypeList.Count > 0 then begin//20080629
      for I := 0 to g_BindItemTypeList.Count - 1 do begin
        BindItem := g_BindItemTypeList.Items[I];
        if BindItem.nShape = nShape then begin
          Result := BindItem.sUnbindItemName;
          Break;
        end;
      end;
    end;
  end;
end;

procedure LoadAllowPickUpItemList();
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
  sLineText: string;
begin
  sFileName := g_Config.sEnvirDir + 'AllowPickUpItemList.txt';
  if g_AllowPickUpItemList <> nil then begin
    FreeAndNil(g_AllowPickUpItemList);
  end;
  g_AllowPickUpItemList := TGStringList.Create;
  if FileExists(sFileName) then begin
    LoadList := TStringList.Create;
    LoadList.LoadFromFile(sFileName);
    if LoadList.Count > 0 then begin//20080629
      for I := 0 to LoadList.Count - 1 do begin
        sLineText := Trim(LoadList.Strings[I]);
        if (sLineText <> '') and (sLineText[1] <> ';') then begin
          g_AllowPickUpItemList.Add(sLineText);
        end;
      end;
    end;
    LoadList.Free;
  end else begin
    g_AllowPickUpItemList.Add(';允许分身捡取物品列表');
    g_AllowPickUpItemList.SaveToFile(sFileName);
  end;
end;

function IsAllowPickUpItem(sItemName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  {if CompareText(sItemName, sSTRING_GOLDNAME) = 0 then begin
    Result := True;
    Exit;
  end;}
  if g_AllowPickUpItemList <> nil then begin
    g_AllowPickUpItemList.Lock;
    try
      if g_AllowPickUpItemList.Count > 0 then begin
        I:= g_AllowPickUpItemList.IndexOf(sItemName);//20090620 修改
        if I > -1 then Result := True;
        {for I := 0 to g_AllowPickUpItemList.Count - 1 do begin
          if CompareText(sItemName, g_AllowPickUpItemList.Strings[I]) = 0 then begin
            Result := True;
            Break;
          end;
        end;}
      end;
    finally
      g_AllowPickUpItemList.UnLock;
    end;
  end;
end;

procedure LoadAllowAIPickUpItemList();
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
  sLineText: string;
begin
  sFileName := g_Config.sEnvirDir + 'AllowAIPickUpItemList.txt';
  if g_AllowAIPickUpItemList <> nil then begin
    FreeAndNil(g_AllowAIPickUpItemList);
  end;
  g_AllowAIPickUpItemList := TGStringList.Create;
  if FileExists(sFileName) then begin
    LoadList := TStringList.Create;
    LoadList.LoadFromFile(sFileName);
    if LoadList.Count > 0 then begin
      for I := 0 to LoadList.Count - 1 do begin
        sLineText := Trim(LoadList.Strings[I]);
        if (sLineText <> '') and (sLineText[1] <> ';') then begin
          g_AllowAIPickUpItemList.Add(sLineText);
        end;
      end;
    end;
    LoadList.Free;
  end else begin
    g_AllowAIPickUpItemList.Add(';允许假人捡取物品列表');
    g_AllowAIPickUpItemList.SaveToFile(sFileName);
  end;
end;

function IsAllowAIPickUpItem(sItemName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  if g_AllowAIPickUpItemList <> nil then begin
    g_AllowAIPickUpItemList.Lock;
    try
      if g_AllowAIPickUpItemList.Count > 0 then begin
        I:= g_AllowAIPickUpItemList.IndexOf(sItemName);
        if I > -1 then Result := True;
      end;
    finally
      g_AllowAIPickUpItemList.UnLock;
    end;
  end;
end;

procedure LoadDisableGamePointShopItemList();
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
  sLineText: string;
begin
  sFileName := g_Config.sEnvirDir + 'DisableGamePointShopItemList.txt';
  if g_DisableGamePointShopItemList <> nil then begin
    FreeAndNil(g_DisableGamePointShopItemList);
  end;
  g_DisableGamePointShopItemList := TGStringList.Create;
  if FileExists(sFileName) then begin
    LoadList := TStringList.Create;
    LoadList.LoadFromFile(sFileName);
    if LoadList.Count > 0 then begin
      for I := 0 to LoadList.Count - 1 do begin
        sLineText := Trim(LoadList.Strings[I]);
        if (sLineText <> '') and (sLineText[1] <> ';') then begin
          g_DisableGamePointShopItemList.Add(sLineText);
        end;
      end;
    end;
    LoadList.Free;
  end else begin
    g_DisableGamePointShopItemList.Add(';禁止荣耀点购买物品列表');
    g_DisableGamePointShopItemList.SaveToFile(sFileName);
  end;
end;

function IsDisableGamePointShopItem(sItemName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  if g_DisableGamePointShopItemList <> nil then begin
    g_DisableGamePointShopItemList.Lock;
    try
      if g_DisableGamePointShopItemList.Count > 0 then begin
        I:= g_DisableGamePointShopItemList.IndexOf(sItemName);
        if I > -1 then Result := True;
      end;
    finally
      g_DisableGamePointShopItemList.UnLock;
    end;
  end;
end;

function GetUseItemIdx(sName: string): Integer;
begin
  Result := -1;
  if CompareText(sName, U_DRESSNAME) = 0 then begin
    Result := 0;
  end else
    if CompareText(sName, U_WEAPONNAME) = 0 then begin
    Result := 1;
  end else
    if CompareText(sName, U_RIGHTHANDNAME) = 0 then begin
    Result := 2;
  end else
    if CompareText(sName, U_NECKLACENAME) = 0 then begin
    Result := 3;
  end else
    if CompareText(sName, U_HELMETNAME) = 0 then begin
    Result := 4;
  end else
    if CompareText(sName, U_ARMRINGLNAME) = 0 then begin
    Result := 5;
  end else
    if CompareText(sName, U_ARMRINGRNAME) = 0 then begin
    Result := 6;
  end else
    if CompareText(sName, U_RINGLNAME) = 0 then begin
    Result := 7;
  end else
    if CompareText(sName, U_RINGRNAME) = 0 then begin
    Result := 8;
  end else
    if CompareText(sName, U_BUJUKNAME) = 0 then begin
    Result := 9;
  end else
    if CompareText(sName, U_BELTNAME) = 0 then begin
    Result := 10;
  end else
    if CompareText(sName, U_BOOTSNAME) = 0 then begin
    Result := 11;
  end else
    if CompareText(sName, U_DRUMNAME) = 0 then begin
    Result := 14;
  end else
    if CompareText(sName, U_CHARMNAME) = 0 then begin
    Result := 12;
  end else
    if CompareText(sName, U_ZHULINAME) = 0 then begin //20080416 斗笠
    Result := 13;
  end;
end;

function GetUseItemName(nIndex: Integer): string;
begin
  case nIndex of //
    0: Result := U_DRESSNAME;
    1: Result := U_WEAPONNAME;
    2: Result := U_RIGHTHANDNAME;
    3: Result := U_NECKLACENAME;
    4: Result := U_HELMETNAME;
    5: Result := U_ARMRINGLNAME;
    6: Result := U_ARMRINGRNAME;
    7: Result := U_RINGLNAME;
    8: Result := U_RINGRNAME;
    9: Result := U_BUJUKNAME;
    10: Result := U_BELTNAME;
    11: Result := U_BOOTSNAME;
    14: Result := U_DRUMNAME;
    12: Result := U_CHARMNAME;
    13: Result := U_ZHULINAME;//20080416 斗笠
  end;
end;

function LoadDisableSendMsgList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'DisableSendMsgList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    if g_DisableSendMsgList.Count > 0 then g_DisableSendMsgList.Clear;//20080831 修改
    LoadList.LoadFromFile(sFileName);
    if LoadList.Count > 0 then begin//20080629
      for I := 0 to LoadList.Count - 1 do begin
        g_DisableSendMsgList.Add(Trim(LoadList.Strings[I]));
      end;
    end;
    Result := True;
  end else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function LoadMonDropLimitList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sLineText: string;
  sFileName: string;
  sItemName, sItemCount: string;
  nItemCount: Integer;
  MonDrop: pTMonDrop;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'MonDropLimitList.txt';
  LoadList := TStringList.Create;
  try
    if FileExists(sFileName) then begin
      if g_MonDropLimitLIst.Count > 0 then g_MonDropLimitLIst.Clear;//20080831 修改
      LoadList.LoadFromFile(sFileName);
      if LoadList.Count > 0 then begin//20091113 增加
        for I := 0 to LoadList.Count - 1 do begin
          sLineText := Trim(LoadList.Strings[I]);
          if (sLineText = '') or (sLineText[1] = ';') then Continue;
          sLineText := GetValidStr3(sLineText, sItemName, [' ', '/', ',', #9]);
          sLineText := GetValidStr3(sLineText, sItemCount, [' ', '/', ',', #9]);
          nItemCount := Str_ToInt(sItemCount, -1);
          if (sItemName <> '') and (nItemCount >= 0) then begin
            New(MonDrop);
            MonDrop.sItemName := sItemName;
            MonDrop.nDropCount := 0;
            MonDrop.nNoDropCount := 0;
            MonDrop.nCountLimit := nItemCount;
            g_MonDropLimitLIst.AddObject(sItemName, TObject(MonDrop));
          end;
        end;
      end;
      Result := True;
    end else begin
      LoadList.SaveToFile(sFileName);
    end;
  finally
    LoadList.Free;
  end;
end;

function SaveMonDropLimitList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
  sLineText: string;
  MonDrop: pTMonDrop;
begin
  sFileName := g_Config.sEnvirDir + 'MonDropLimitList.txt';
  LoadList := TStringList.Create;
  try
    if g_MonDropLimitLIst.Count > 0 then begin//20080629
      for I := 0 to g_MonDropLimitLIst.Count - 1 do begin
        MonDrop := pTMonDrop(g_MonDropLimitLIst.Objects[I]);
        sLineText := MonDrop.sItemName + #9 + IntToStr(MonDrop.nCountLimit);
        LoadList.Add(sLineText);
      end;
    end;
    LoadList.SaveToFile(sFileName);
  finally
    LoadList.Free;
  end;
  Result := True;
end;

function LoadDisableTakeOffList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sLineText: string;
  sFileName: string;
  sItemName, sItemIdx: string;
  nItemIdx: Integer;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'DisableTakeOffList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    LoadList.LoadFromFile(sFileName);
    g_DisableTakeOffList.Lock;
    try
      if g_DisableTakeOffList.Count > 0 then g_DisableTakeOffList.Clear;//20080831
      if LoadList.Count > 0 then begin//20091113 增加
        for I := 0 to LoadList.Count - 1 do begin
          sLineText := Trim(LoadList.Strings[I]);
          if (sLineText = '') or (sLineText[1] = ';') then Continue;
          sLineText := GetValidStr3(sLineText, sItemName, [' ', '/', ',', #9]);
          sLineText := GetValidStr3(sLineText, sItemIdx, [' ', '/', ',', #9]);
          nItemIdx := Str_ToInt(sItemIdx, -1);
          if (sItemName <> '') and (nItemIdx >= 0) then begin
            g_DisableTakeOffList.AddObject(sItemName, TObject(nItemIdx));
          end;
        end;
      end;
    finally
      g_DisableTakeOffList.UnLock;
    end;
    Result := True;
  end else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveDisableTakeOffList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
  sLineText: string;
begin
  sFileName := g_Config.sEnvirDir + 'DisableTakeOffList.txt';
  LoadList := TStringList.Create;
  g_DisableTakeOffList.Lock;
  try
    if g_DisableTakeOffList.Count > 0 then begin//20080629
      for I := 0 to g_DisableTakeOffList.Count - 1 do begin
        sLineText := g_DisableTakeOffList.Strings[I] + #9 + IntToStr(Integer(g_DisableTakeOffList.Objects[I]));
        LoadList.Add(sLineText);
      end;
    end;
  finally
    g_DisableTakeOffList.UnLock;
  end;
  LoadList.SaveToFile(sFileName);
  LoadList.Free;
  Result := True;
end;

{function SaveAllowSellOffItemList():Boolean;
var
  I:integer;
  sFileName:String;
begin
  sFileName:=g_Config.sEnvirDir + 'AllowSellOffItem.txt';
  g_AllowSellOffItemList.Lock;
  try
    for I := 0 to g_AllowSellOffItemList.Count - 1 do begin
      g_AllowSellOffItemList.SaveToFile(sFileName);
    end;
  finally
    g_AllowSellOffItemList.UnLock;
  end;
  Result:=True;
end;}


function InDisableTakeOffList(nItemIdx: Integer): Boolean;
var
  I: Integer;
begin
  Result := False;
  g_DisableTakeOffList.Lock;
  try
    if g_DisableTakeOffList.Count > 0 then begin//20080629
      for I := 0 to g_DisableTakeOffList.Count - 1 do begin
        if Integer(g_DisableTakeOffList.Objects[I]) = nItemIdx - 1 then begin
          Result := True;
          Break;
        end;
      end;
    end;
  finally
    g_DisableTakeOffList.UnLock;
  end;
end;

function SaveDisableSendMsgList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  sFileName := g_Config.sEnvirDir + 'DisableSendMsgList.txt';
  LoadList := TStringList.Create;
  if g_DisableSendMsgList.Count > 0 then begin//20080629
    for I := 0 to g_DisableSendMsgList.Count - 1 do begin
      LoadList.Add(g_DisableSendMsgList.Strings[I]);
    end;
  end;
  LoadList.SaveToFile(sFileName);
  LoadList.Free;
  Result := True;
end;

function GetDisableSendMsgList(sHumanName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  if g_DisableSendMsgList.Count > 0 then begin//20080629
    I:= g_DisableSendMsgList.IndexOf(sHumanName);//20090620 修改
    if I > -1 then Result := True;
    {for I := 0 to g_DisableSendMsgList.Count - 1 do begin
      if CompareText(sHumanName, g_DisableSendMsgList.Strings[I]) = 0 then begin
        Result := True;
        Break;
      end;
    end;}
  end;
end;
{//20080416 去掉拍卖功能
function LoadAllowSellOffItemList(): Boolean; //加载允许寄售物品
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'AllowSellOffItem.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_AllowSellOffItemList.Lock;
    try
      g_AllowSellOffItemList.Clear;
      LoadList.LoadFromFile(sFileName);
      for I := 0 to LoadList.Count - 1 do begin
        g_AllowSellOffItemList.Add(Trim(LoadList.Strings[I]));
      end;
    finally
      g_AllowSellOffItemList.UnLock;
    end;
    Result := True;
  end else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveAllowSellOffItemList(): Boolean; //保存允许寄售物品
var
  sFileName: string;
begin
  sFileName := g_Config.sEnvirDir + 'AllowSellOffItem.txt';
  g_AllowSellOffItemList.Lock;
  try
    g_AllowSellOffItemList.SaveToFile(sFileName);
  finally
    g_AllowSellOffItemList.UnLock;
  end;
  Result := True;
end;  }

function LoadGameLogItemNameList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'GameLogItemNameList.txt';
  LoadList := TStringList.Create;
  try
    if FileExists(sFileName) then begin
      g_GameLogItemNameList.Lock;
      try
        g_GameLogItemNameList.Clear;
        LoadList.LoadFromFile(sFileName);
        if LoadList.Count > 0 then begin
          for I := 0 to LoadList.Count - 1 do begin
            g_GameLogItemNameList.Add(Trim(LoadList.Strings[I]));// 20080303 出现异常
          end;
        end;
      finally
        g_GameLogItemNameList.UnLock;
      end;
      Result := True;
    end else begin
      LoadList.SaveToFile(sFileName);
    end;
  finally
    LoadList.Free;
  end;
end;

function GetGameLogItemNameList(sItemName: string): Byte;
var
  I: Integer;
begin
  Result := 0;
  g_GameLogItemNameList.Lock;
  try
    if g_GameLogItemNameList.Count > 0 then begin//20080629
      I:= g_GameLogItemNameList.IndexOf(sItemName);//20090620 修改
      if I > -1 then Result := 1;
      {for I := 0 to g_GameLogItemNameList.Count - 1 do begin
        if CompareText(sItemName, g_GameLogItemNameList.Strings[I]) = 0 then begin
          Result := 1;
          Break;
        end;
      end;}
    end;
  finally
    g_GameLogItemNameList.UnLock;
  end;
end;

function SaveGameLogItemNameList(): Boolean;
var
  sFileName: string;
begin
  sFileName := g_Config.sEnvirDir + 'GameLogItemNameList.txt';
  g_GameLogItemNameList.Lock;
  try
    g_GameLogItemNameList.SaveToFile(sFileName);
  finally
    g_GameLogItemNameList.UnLock;
  end;
  Result := True;
end;

function LoadDenyIPAddrList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'DenyIPAddrList.txt';
  LoadList := TStringList.Create;
  try
    if FileExists(sFileName) then begin
      g_DenyIPAddrList.Lock;
      try
        if g_DenyIPAddrList.Count > 0 then g_DenyIPAddrList.Clear;//20080831 修改
        LoadList.LoadFromFile(sFileName);
        if LoadList.Count > 0 then begin
          for I := 0 to LoadList.Count - 1 do begin
            g_DenyIPAddrList.Add(Trim(LoadList.Strings[I]));
          end;
        end;
      finally
        g_DenyIPAddrList.UnLock;
      end;
      Result := True;
    end else begin
      LoadList.SaveToFile(sFileName);
    end;
  finally
    LoadList.Free;
  end;
end;

function GetDenyIPaddrList(sIPaddr: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  g_DenyIPAddrList.Lock;
  try
    if g_DenyIPAddrList.Count > 0 then begin//20080629
      I:= g_DenyIPAddrList.IndexOf(sIPaddr);//20090620 修改
      if I > -1 then Result := True;
      {for I := 0 to g_DenyIPAddrList.Count - 1 do begin
        if CompareText(sIPaddr, g_DenyIPAddrList.Strings[I]) = 0 then begin
          Result := True;
          Break;
        end;
      end;}
    end;
  finally
    g_DenyIPAddrList.UnLock;
  end;
end;

function SaveDenyIPAddrList(): Boolean;
var
  I: Integer;
  sFileName: string;
  SaveList: TStringList;
begin
  sFileName := g_Config.sEnvirDir + 'DenyIPAddrList.txt';
  SaveList := TStringList.Create;
  g_DenyIPAddrList.Lock;
  try
    if g_DenyIPAddrList.Count > 0 then begin//20080629
      for I := 0 to g_DenyIPAddrList.Count - 1 do begin
        if Integer(g_DenyIPAddrList.Objects[I]) <> 0 then begin
          SaveList.Add(g_DenyIPAddrList.Strings[I]);
        end;
      end;
    end;
    SaveList.SaveToFile(sFileName);
  finally
    g_DenyIPAddrList.UnLock;
  end;
  SaveList.Free;
  Result := True;
end;
//读取禁止登录人物列表
function LoadDenyChrNameList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'DenyChrNameList.txt';
  LoadList := TStringList.Create;
  try
    if FileExists(sFileName) then begin
      g_DenyChrNameList.Lock;
      try
        if g_DenyChrNameList.Count > 0 then g_DenyChrNameList.Clear;//20080831 修改
        LoadList.LoadFromFile(sFileName);
        if LoadList.Count > 0 then begin
          for I := 0 to LoadList.Count - 1 do begin
            g_DenyChrNameList.Add(Trim(LoadList.Strings[I]));
          end;
        end;
      finally
        g_DenyChrNameList.UnLock;
      end;
      Result := True;
    end else begin
      LoadList.SaveToFile(sFileName);
    end;
  finally
    LoadList.Free;
  end;
end;

function GetDenyChrNameList(sChrName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  g_DenyChrNameList.Lock;
  try
    if g_DenyChrNameList.Count > 0 then begin//20080629
      I:= g_DenyChrNameList.IndexOf(sChrName);//20090620 修改
      if I > -1 then Result := True;
      {for I := 0 to g_DenyChrNameList.Count - 1 do begin
        if CompareText(sChrName, g_DenyChrNameList.Strings[I]) = 0 then begin
          Result := True;
          Break;
        end;
      end;}
    end;
  finally
    g_DenyChrNameList.UnLock;
  end;
end;
//保存禁止登录人物列表
function SaveDenyChrNameList(): Boolean;
var
  I: Integer;
  sFileName: string;
  SaveList: TStringList;
begin
  sFileName := g_Config.sEnvirDir + 'DenyChrNameList.txt';
  SaveList := TStringList.Create;
  try
    g_DenyChrNameList.Lock;
    try
      if g_DenyChrNameList.Count > 0 then begin//20080629
        for I := 0 to g_DenyChrNameList.Count - 1 do begin
          if Integer(g_DenyChrNameList.Objects[I]) <> 0 then begin
            SaveList.Add(g_DenyChrNameList.Strings[I]);
          end;
        end;
      end;
      SaveList.SaveToFile(sFileName);
    finally
      g_DenyChrNameList.UnLock;
    end;
  finally
    SaveList.Free;
  end;
  Result := True;
end;

function LoadDenyAccountList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'DenyAccountList.txt';
  LoadList := TStringList.Create;
  try
    if FileExists(sFileName) then begin
      g_DenyAccountList.Lock;
      try
        if g_DenyAccountList.Count > 0 then g_DenyAccountList.Clear;//20080831 修改
        LoadList.LoadFromFile(sFileName);
        if LoadList.Count > 0 then begin
          for I := 0 to LoadList.Count - 1 do begin
            g_DenyAccountList.Add(Trim(LoadList.Strings[I]));
          end;
        end;
      finally
        g_DenyAccountList.UnLock;
      end;
      Result := True;
    end else begin
      LoadList.SaveToFile(sFileName);
    end;
  finally
    LoadList.Free;
  end;
end;

function GetDenyAccountList(sAccount: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  g_DenyAccountList.Lock;
  try
    if g_DenyAccountList.Count > 0 then begin//20080629
      I:= g_DenyAccountList.IndexOf(sAccount);//20090620 修改
      if I > -1 then Result := True;
      {for I := 0 to g_DenyAccountList.Count - 1 do begin
        if CompareText(sAccount, g_DenyAccountList.Strings[I]) = 0 then begin
          Result := True;
          Break;
        end;
      end;}
    end;
  finally
    g_DenyAccountList.UnLock;
  end;
end;

function SaveDenyAccountList(): Boolean;
var
  I: Integer;
  sFileName: string;
  SaveList: TStringList;
begin
  sFileName := g_Config.sEnvirDir + 'DenyAccountList.txt';
  SaveList := TStringList.Create;
  g_DenyAccountList.Lock;
  try
    if g_DenyAccountList.Count > 0 then begin//20080629
      for I := 0 to g_DenyAccountList.Count - 1 do begin
        if Integer(g_DenyAccountList.Objects[I]) <> 0 then begin
          SaveList.Add(g_DenyAccountList.Strings[I]);
        end;
      end;
    end;
    SaveList.SaveToFile(sFileName);
  finally
    g_DenyAccountList.UnLock;
    SaveList.Free;
  end;
  Result := True;
end;

function LoadNoClearMonList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'NoClearMonList.txt';
  LoadList := TStringList.Create;
  try
    if FileExists(sFileName) then begin
      g_NoClearMonList.Lock;
      try
        if g_NoClearMonList.Count > 0 then g_NoClearMonList.Clear;//20080831 修改
        LoadList.LoadFromFile(sFileName);
        if LoadList.Count > 0 then begin
          for I := 0 to LoadList.Count - 1 do begin
            g_NoClearMonList.Add(Trim(LoadList.Strings[I]));
          end;
        end;
      finally
        g_NoClearMonList.UnLock;
      end;
      Result := True;
    end else begin
      LoadList.SaveToFile(sFileName);
    end;
  finally
    LoadList.Free;
  end;
end;

function GetNoClearMonList(sMonName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  g_NoClearMonList.Lock;
  try
    if g_NoClearMonList.Count > 0 then begin //200900620 修改
      I:= g_NoClearMonList.IndexOf(sMonName);
      if I > -1 then Result := True;
      {for I := 0 to g_NoClearMonList.Count - 1 do begin
        if CompareText(sMonName, g_NoClearMonList.Strings[I]) = 0 then begin
          Result := True;
          Break;
        end;
      end;}
    end;
  finally
    g_NoClearMonList.UnLock;
  end;
end;

function SaveNoClearMonList(): Boolean;
var
  I: Integer;
  sFileName: string;
  SaveList: TStringList;
begin
  sFileName := g_Config.sEnvirDir + 'NoClearMonList.txt';
  SaveList := TStringList.Create;
  g_NoClearMonList.Lock;
  try
    if g_NoClearMonList.Count > 0 then begin//20080629
      for I := 0 to g_NoClearMonList.Count - 1 do begin
        SaveList.Add(g_NoClearMonList.Strings[I]);
      end;
    end;
    SaveList.SaveToFile(sFileName);
  finally
    g_NoClearMonList.UnLock;
    SaveList.Free;
  end;
  Result := True;
end;

function LoadMonSayMsg(): Boolean;
  function sub_49ADB8(sMsg, sStr, sText: string): string;
  var
    n10: Integer;
    s14, s18: string;
  begin
    n10 := Pos(sStr, sMsg);
    if n10 > 0 then begin
      s14 := Copy(sMsg, 1, n10 - 1);
      s18 := Copy(sMsg, Length(sStr) + n10, Length(sMsg));
      Result := s14 + sText + s18;
    end else Result := sMsg;
  end;
  procedure GetVariableText(var sMsg: string; sVariable: string);
  begin//全局信息
    if sVariable = '$SERVERNAME' then begin
      sMsg := sub_49ADB8(sMsg, '<$SERVERNAME>', g_Config.sServerName);
      Exit;
    end;
    if sVariable = '$SERVERIP' then begin
      sMsg := sub_49ADB8(sMsg, '<$SERVERIP>', g_Config.sServerIPaddr);
      Exit;
    end;
    if sVariable = '$WEBSITE' then begin
      sMsg := sub_49ADB8(sMsg, '<$WEBSITE>', g_Config.sWebSite);
      Exit;
    end;
    if sVariable = '$BBSSITE' then begin
      sMsg := sub_49ADB8(sMsg, '<$BBSSITE>', g_Config.sBbsSite);
      Exit;
    end;
    if sVariable = '$CLIENTDOWNLOAD' then begin
      sMsg := sub_49ADB8(sMsg, '<$CLIENTDOWNLOAD>', g_Config.sClientDownload);
      Exit;
    end;
    if sVariable = '$QQ' then begin
      sMsg := sub_49ADB8(sMsg, '<$QQ>', g_Config.sQQ);
      Exit;
    end;
    if sVariable = '$PHONE' then begin
      sMsg := sub_49ADB8(sMsg, '<$PHONE>', g_Config.sPhone);
      Exit;
    end;
  end;
  function GetLineVariableText(sMsg: string): string;
  var
    nC: Integer;
    s10: string;
  begin
    nC := 0;
    while (True) do begin
      try//20101126 防止死循环
        if TagCount(sMsg, '>') < 1 then Break;
        ArrestStringEx(sMsg, '<', '>', s10);
        GetVariableText(sMsg, s10);
      except
      end;
      Inc(nC);
      if nC >= 10 then Break;
    end;
    Result := sMsg;
  end;
var
  I, II: Integer;
  sStatus, sRate, sColor, sMonName, sSayMsg: string;
  nStatus, nRate, nColor: Integer;
  LoadList: TStringList;
  sLineText: string;
  MonSayMsg: pTMonSayMsg;
  sFileName: string;
  MonSayList: TList;
  boSearch: Boolean;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'MonSayMsg.txt';
  if FileExists(sFileName) then begin
    if g_MonSayMsgList.Count > 0 then g_MonSayMsgList.Clear;//20080831 修改
    LoadList := TStringList.Create;
    try
      LoadList.LoadFromFile(sFileName);
      if LoadList.Count > 0 then  begin//20091113 增加
        for I := 0 to LoadList.Count - 1 do begin
          sLineText := Trim(LoadList.Strings[I]);
          if (sLineText <> '') and (sLineText[1] < ';') then begin
            sLineText := GetValidStr3(sLineText, sStatus, [' ', '/', ',', #9]);//状态(0为杀人，1为被攻击，2为死亡，3为刚刷出来)
            sLineText := GetValidStr3(sLineText, sRate, [' ', '/', ',', #9]);//机率(数字越大，说话机率越小)
            sLineText := GetValidStr3(sLineText, sColor, [' ', '/', ',', #9]);//颜色(0为红色，1为绿色，2为蓝色，3为白色) 白色文字，显示在怪物头顶上所有旁边的人都可以看到，其它颜色则显示在人物聊到框中只有对应的人物可以看到。
            sLineText := GetValidStr3(sLineText, sMonName, [' ', '/', ',', #9]);//怪物名称
            sLineText := GetValidStr3(sLineText, sSayMsg, [' ', '/', ',', #9]);//文字内容
            sSayMsg := GetLineVariableText(sSayMsg);//支持服务器部分变量 20090905
            if (sStatus <> '') and (sRate <> '') and (sColor <> '') and (sMonName <> '') and (sSayMsg <> '') then begin
              nStatus := Str_ToInt(sStatus, -1);
              nRate := Str_ToInt(sRate, -1);
              nColor := Str_ToInt(sColor, -1);
              if (nStatus >= 0) and (nRate >= 0) and (nColor >= 0) then begin
                New(MonSayMsg);
                case nStatus of
                  0: MonSayMsg.State := s_KillHuman;
                  1: MonSayMsg.State := s_UnderFire;
                  2: MonSayMsg.State := s_Die;
                  3: MonSayMsg.State := s_MonGen;
                  else MonSayMsg.State := s_UnderFire;
                end;
                case nColor of
                  0: MonSayMsg.Color := c_Red;
                  1: MonSayMsg.Color := c_Green;
                  2: MonSayMsg.Color := c_Blue;
                  3: MonSayMsg.Color := c_White;
                  else MonSayMsg.Color := c_White;
                end;
                MonSayMsg.nRate := nRate;
                MonSayMsg.sSayMsg := sSayMsg;
                boSearch := False;
                if g_MonSayMsgList.Count > 0 then begin//20080629
                  for II := 0 to g_MonSayMsgList.Count - 1 do begin
                    if CompareText(g_MonSayMsgList.Strings[II], sMonName) = 0 then begin
                      TList(g_MonSayMsgList.Objects[II]).Add(MonSayMsg);
                      boSearch := True;
                      Break;
                    end;
                  end;
                end;
                if not boSearch then begin
                  MonSayList := TList.Create;
                  MonSayList.Add(MonSayMsg);
                  g_MonSayMsgList.AddObject(sMonName, TObject(MonSayList));
                end;
              end;
            end;
          end;
        end;//for
      end;
    finally
      LoadList.Free;
    end;
    Result := True;
  end;
end;

procedure StartFixExp(boReload:Boolean);
var
  I: Integer;
begin
  FillChar(g_dwOldNeedExps, SizeOf(TLevelNeedExp), 0);
  FillChar(g_dwHeroNeedExps, SizeOf(TLevelNeedExp), 0);
  FillChar(g_dwMedicineExps, SizeOf(TLevelNeedExp1), 0);//20080623
  FillChar(g_dwSkill68Exps, SizeOf(TLevelNeedExp2), 0);//20080625
  FillChar(g_dwLevelToExpRate, SizeOf(TLevelNeedExp3), 100);

  FillChar(g_dwExpCrystalNeedExps, SizeOf(TExpCrystalLevelNeedExp), 0);//天地结晶升级经验 20090131
  FillChar(g_dwNGExpCrystalNeedExps, SizeOf(TExpCrystalLevelNeedExp), 0);//天地结晶内功升级经验 20090131

  g_dwOldNeedExps[1] := 100;
  g_dwOldNeedExps[2] := 200;
  g_dwOldNeedExps[3] := 300;
  g_dwOldNeedExps[4] := 400;
  g_dwOldNeedExps[5] := 600;
  g_dwOldNeedExps[6] := 900;
  g_dwOldNeedExps[7] := 1200;
  g_dwOldNeedExps[8] := 1700;
  g_dwOldNeedExps[9] := 2500;
  g_dwOldNeedExps[10] := 6000;
  g_dwOldNeedExps[11] := 8000;
  g_dwOldNeedExps[12] := 10000;
  g_dwOldNeedExps[13] := 15000;
  g_dwOldNeedExps[14] := 30000;
  g_dwOldNeedExps[15] := 40000;
  g_dwOldNeedExps[16] := 50000;
  g_dwOldNeedExps[17] := 70000;
  g_dwOldNeedExps[18] := 10000;
  g_dwOldNeedExps[19] := 120000;
  g_dwOldNeedExps[20] := 140000;
  g_dwOldNeedExps[21] := 250000;
  g_dwOldNeedExps[22] := 300000;
  g_dwOldNeedExps[23] := 350000;
  g_dwOldNeedExps[24] := 400000;
  g_dwOldNeedExps[25] := 500000;
  g_dwOldNeedExps[26] := 700000;
  g_dwOldNeedExps[27] := 1000000;
  g_dwOldNeedExps[28] := 1400000;
  g_dwOldNeedExps[29] := 1800000;
  g_dwOldNeedExps[30] := 2000000;
  g_dwOldNeedExps[31] := 2400000;
  g_dwOldNeedExps[32] := 2800000;
  g_dwOldNeedExps[33] := 3200000;
  g_dwOldNeedExps[34] := 3600000;
  g_dwOldNeedExps[35] := 4000000;
  g_dwOldNeedExps[36] := 4800000;
  g_dwOldNeedExps[37] := 5600000;
  g_dwOldNeedExps[38] := 8200000;
  g_dwOldNeedExps[39] := 9000000;
  g_dwOldNeedExps[40] := 12000000;
  g_dwOldNeedExps[41] := 16000000;
  g_dwOldNeedExps[42] := 30000000;
  g_dwOldNeedExps[43] := 50000000;
  g_dwOldNeedExps[44] := 80000000;
  g_dwOldNeedExps[45] := 120000000;
  g_dwOldNeedExps[46] := 480000000;
  g_dwOldNeedExps[47] := 1000000000;
  g_dwOldNeedExps[48] := 1500000000;
  g_dwOldNeedExps[49] := 1800000000;
  for I := 50 to High(g_dwOldNeedExps) do begin
    g_dwOldNeedExps[I] := 2000000000;
    if not boReload then Application.ProcessMessages;//20100408 增加
  end;
{$IF HEROVERSION = 1}
  g_dwHeroNeedExps[1] := 50;
  g_dwHeroNeedExps[2] := 100;
  g_dwHeroNeedExps[3] := 150;
  g_dwHeroNeedExps[4] := 200;
  g_dwHeroNeedExps[5] := 300;
  g_dwHeroNeedExps[6] := 450;
  g_dwHeroNeedExps[7] := 600;
  g_dwHeroNeedExps[8] := 800;
  g_dwHeroNeedExps[9] := 1200;
  g_dwHeroNeedExps[10] := 3000;
  g_dwHeroNeedExps[11] := 4000;
  g_dwHeroNeedExps[12] := 5000;
  g_dwHeroNeedExps[13] := 7500;
  g_dwHeroNeedExps[14] := 15000;
  g_dwHeroNeedExps[15] := 20000;
  g_dwHeroNeedExps[16] := 25000;
  g_dwHeroNeedExps[17] := 35000;
  g_dwHeroNeedExps[18] := 50000;
  g_dwHeroNeedExps[19] := 60000;
  g_dwHeroNeedExps[20] := 70000;
  g_dwHeroNeedExps[21] := 100000;
  g_dwHeroNeedExps[22] := 150000;
  g_dwHeroNeedExps[23] := 160000;
  g_dwHeroNeedExps[24] := 200000;
  g_dwHeroNeedExps[25] := 250000;
  g_dwHeroNeedExps[26] := 350000;
  g_dwHeroNeedExps[27] := 500000;
  g_dwHeroNeedExps[28] := 700000;
  g_dwHeroNeedExps[29] := 800000;
  g_dwHeroNeedExps[30] := 1000000;
  g_dwHeroNeedExps[31] := 1200000;
  g_dwHeroNeedExps[32] := 1400000;
  g_dwHeroNeedExps[33] := 1600000;
  g_dwHeroNeedExps[34] := 1800000;
  g_dwHeroNeedExps[35] := 2000000;
  g_dwHeroNeedExps[36] := 2400000;
  g_dwHeroNeedExps[37] := 2800000;
  g_dwHeroNeedExps[38] := 4000000;
  g_dwHeroNeedExps[39] := 4500000;
  g_dwHeroNeedExps[40] := 6000000;
  g_dwHeroNeedExps[41] := 8000000;
  g_dwHeroNeedExps[42] := 15000000;
  g_dwHeroNeedExps[43] := 25000000;
  g_dwHeroNeedExps[44] := 40000000;
  g_dwHeroNeedExps[45] := 60000000;
  g_dwHeroNeedExps[46] := 240000000;
  g_dwHeroNeedExps[47] := 500000000;
  g_dwHeroNeedExps[48] := 800000000;
  g_dwHeroNeedExps[49] := 900000000;
  for I := 50 to High(g_dwHeroNeedExps) do begin
    g_dwHeroNeedExps[I] := 1000000000;
    if not boReload then Application.ProcessMessages;//20100408 增加
  end;
{$IFEND}
  g_dwMedicineExps[1] := 48;
  g_dwMedicineExps[2] := 142;
  g_dwMedicineExps[3] := 232;
  g_dwMedicineExps[4] := 318;
  g_dwMedicineExps[5] := 400;
  g_dwMedicineExps[6] := 478;
  g_dwMedicineExps[7] := 556;
  g_dwMedicineExps[8] := 634;
  g_dwMedicineExps[9] := 712;
  g_dwMedicineExps[10] := 790;
  g_dwMedicineExps[11] := 868;
  g_dwMedicineExps[12] := 946;
  g_dwMedicineExps[13] := 1024;
  g_dwMedicineExps[14] := 1102;
  g_dwMedicineExps[15] := 1180;
  g_dwMedicineExps[16] := 1258;
  g_dwMedicineExps[17] := 1336;
  g_dwMedicineExps[18] := 1414;
  g_dwMedicineExps[19] := 1492;
  g_dwMedicineExps[20] := 1570;
  g_dwMedicineExps[21] := 1648;
  g_dwMedicineExps[22] := 1726;
  g_dwMedicineExps[23] := 1804;
  g_dwMedicineExps[24] := 1882;
  g_dwMedicineExps[25] := 1960;
  g_dwMedicineExps[26] := 2038;
  g_dwMedicineExps[27] := 2116;
  g_dwMedicineExps[28] := 2194;
  g_dwMedicineExps[29] := 2272;
  g_dwMedicineExps[30] := 2350;
  g_dwMedicineExps[31] := 2428;
  g_dwMedicineExps[32] := 2506;
  g_dwMedicineExps[33] := 2584;
  g_dwMedicineExps[34] := 2662;
  g_dwMedicineExps[35] := 2740;
  g_dwMedicineExps[36] := 2818;
  g_dwMedicineExps[37] := 2896;
  g_dwMedicineExps[38] := 2974;
  g_dwMedicineExps[39] := 3052;
  g_dwMedicineExps[40] := 3130;
  g_dwMedicineExps[41] := 3208;
  g_dwMedicineExps[42] := 3286;
  g_dwMedicineExps[43] := 3364;
  g_dwMedicineExps[44] := 3442;
  g_dwMedicineExps[45] := 3520;
  g_dwMedicineExps[46] := 3598;
  g_dwMedicineExps[47] := 3676;
  g_dwMedicineExps[48] := 3754;
  g_dwMedicineExps[49] := 3832;
  for I := 50 to High(g_dwMedicineExps) do begin
    g_dwMedicineExps[I] := 3910;
    if not boReload then Application.ProcessMessages;//20100408 增加
  end;
{  for I := 1 to 1000 do begin
    g_dwLevelToExpRate[I]:= 100;//20090323
    if not boReload then Application.ProcessMessages;//20100408 增加
  end; }
  g_dwSkill68Exps[1] := 3333000;
  g_dwSkill68Exps[2] := 3816000;
  g_dwSkill68Exps[3] := 4329000;
  g_dwSkill68Exps[4] := 4872000;
  g_dwSkill68Exps[5] := 5445000;
  g_dwSkill68Exps[6] := 6048000;
  g_dwSkill68Exps[7] := 6681000;
  g_dwSkill68Exps[8] := 7344000;
  g_dwSkill68Exps[9] := 8037000;
  g_dwSkill68Exps[10] := 8760000;
  g_dwSkill68Exps[11] := 9513000;
  g_dwSkill68Exps[12] := 10296000;
  g_dwSkill68Exps[13] := 11109000;
  g_dwSkill68Exps[14] := 11952000;
  g_dwSkill68Exps[15] := 12825000;
  g_dwSkill68Exps[16] := 13728000;
  g_dwSkill68Exps[17] := 14661000;
  g_dwSkill68Exps[18] := 15624000;
  g_dwSkill68Exps[19] := 16617000;
  g_dwSkill68Exps[20] := 17640000;
  g_dwSkill68Exps[21] := 18693000;
  g_dwSkill68Exps[22] := 19776000;
  g_dwSkill68Exps[23] := 20889000;
  g_dwSkill68Exps[24] := 22032000;
  g_dwSkill68Exps[25] := 23205000;
  g_dwSkill68Exps[26] := 24408000;
  g_dwSkill68Exps[27] := 25641000;
  g_dwSkill68Exps[28] := 26904000;
  g_dwSkill68Exps[29] := 28197000;
  g_dwSkill68Exps[30] := 29520000;
  g_dwSkill68Exps[31] := 30873000;
  g_dwSkill68Exps[32] := 32256000;
  g_dwSkill68Exps[33] := 33669000;
  g_dwSkill68Exps[34] := 35112000;
  g_dwSkill68Exps[35] := 36585000;
  g_dwSkill68Exps[36] := 38088000;
  g_dwSkill68Exps[37] := 39621000;
  g_dwSkill68Exps[38] := 41184000;
  g_dwSkill68Exps[39] := 42777000;
  g_dwSkill68Exps[40] := 44400000;
  g_dwSkill68Exps[41] := 46053000;
  g_dwSkill68Exps[42] := 47736000;
  g_dwSkill68Exps[43] := 49449000;
  g_dwSkill68Exps[44] := 51192000;
  g_dwSkill68Exps[45] := 52965000;
  g_dwSkill68Exps[46] := 54768000;
  g_dwSkill68Exps[47] := 56601000;
  g_dwSkill68Exps[48] := 58464000;
  g_dwSkill68Exps[49] := 60357000;
  g_dwSkill68Exps[50] := 62280000;
  g_dwSkill68Exps[51] := 64233000;
  g_dwSkill68Exps[52] := 66216000;
  g_dwSkill68Exps[53] := 68229000;
  g_dwSkill68Exps[54] := 70272000;
  g_dwSkill68Exps[55] := 72345000;
  g_dwSkill68Exps[56] := 74448000;
  g_dwSkill68Exps[57] := 76581000;
  g_dwSkill68Exps[58] := 78744000;
  g_dwSkill68Exps[59] := 80937000;
  g_dwSkill68Exps[60] := 83160000;
  g_dwSkill68Exps[61] := 85413000;
  g_dwSkill68Exps[62] := 87696000;
  g_dwSkill68Exps[63] := 90009000;
  g_dwSkill68Exps[64] := 92352000;
  g_dwSkill68Exps[65] := 94725000;
  g_dwSkill68Exps[66] := 97128000;
  g_dwSkill68Exps[67] := 99561000;
  g_dwSkill68Exps[68] := 102024000;
  g_dwSkill68Exps[69] := 104517000;
  g_dwSkill68Exps[70] := 107040000;
  g_dwSkill68Exps[71] := 109593000;
  g_dwSkill68Exps[72] := 112176000;
  g_dwSkill68Exps[73] := 114789000;
  g_dwSkill68Exps[74] := 117432000;
  g_dwSkill68Exps[75] := 120105000;
  g_dwSkill68Exps[76] := 122808000;
  g_dwSkill68Exps[77] := 125541000;
  g_dwSkill68Exps[78] := 128304000;
  g_dwSkill68Exps[79] := 131097000;
  g_dwSkill68Exps[80] := 133920000;
  g_dwSkill68Exps[81] := 136773000;
  g_dwSkill68Exps[82] := 139656000;
  g_dwSkill68Exps[83] := 142569000;
  g_dwSkill68Exps[84] := 145512000;
  g_dwSkill68Exps[85] := 148485000;
  g_dwSkill68Exps[86] := 151488000;
  g_dwSkill68Exps[87] := 154521000;
  g_dwSkill68Exps[88] := 157584000;
  g_dwSkill68Exps[89] := 160677000;
  g_dwSkill68Exps[90] := 163800000;
  g_dwSkill68Exps[91] := 166953000;
  g_dwSkill68Exps[92] := 170136000;
  g_dwSkill68Exps[93] := 173349000;
  g_dwSkill68Exps[94] := 176592000;
  g_dwSkill68Exps[95] := 179865000;
  g_dwSkill68Exps[96] := 183168000;
  g_dwSkill68Exps[97] := 186501000;
  g_dwSkill68Exps[98] := 189864000;
  g_dwSkill68Exps[99] := 193257000;
  g_dwSkill68Exps[100] := 203257000;

  g_dwExpCrystalNeedExps[1]:= 300000;//天地结晶升级经验 20090131
  g_dwExpCrystalNeedExps[2]:= 700000;
  g_dwExpCrystalNeedExps[3]:= 1200000;
  g_dwExpCrystalNeedExps[4]:= 1800000;

  g_dwNGExpCrystalNeedExps[1]:= 100000;//天地结晶内功升级经验 20090131
  g_dwNGExpCrystalNeedExps[2]:= 240000;
  g_dwNGExpCrystalNeedExps[3]:= 400000;
  g_dwNGExpCrystalNeedExps[4]:= 580000;
{$IF M2Version = 1}
  FillChar(g_dwSkill95Exps, SizeOf(TLevelNeedExp4), 0);
  g_dwSkill95Exps[1] := 13984;
  g_dwSkill95Exps[2] := 22538;
  g_dwSkill95Exps[3] := 35000;
  g_dwSkill95Exps[4] := 53000;
  g_dwSkill95Exps[5] := 84000;
  g_dwSkill95Exps[6] := 120074;
  g_dwSkill95Exps[7] := 170000;
  g_dwSkill95Exps[8] := 209978;
  g_dwSkill95Exps[9] := 250000;
  g_dwSkill95Exps[10] := 300000;
  g_dwSkill95Exps[11] := 350000;
  g_dwSkill95Exps[12] := 400000;
  g_dwSkill95Exps[13] := 450000;
  g_dwSkill95Exps[14] := 500000;
  g_dwSkill95Exps[15] := 550000;
  g_dwSkill95Exps[16] := 600000;
  g_dwSkill95Exps[17] := 650000;
  g_dwSkill95Exps[18] := 700000;
  g_dwSkill95Exps[19] := 750000;
  g_dwSkill95Exps[20] := 800000;
  g_dwSkill95Exps[21] := 850000;
  g_dwSkill95Exps[22] := 900000;
  g_dwSkill95Exps[23] := 950000;
  g_dwSkill95Exps[24] := 1000000;
  g_dwSkill95Exps[25] := 1050000;
  g_dwSkill95Exps[26] := 1100000;
  g_dwSkill95Exps[27] := 1150000;
  g_dwSkill95Exps[28] := 1200000;
  g_dwSkill95Exps[29] := 1250000;
  g_dwSkill95Exps[30] := 1300000;
  g_dwSkill95Exps[31] := 1350000;
  g_dwSkill95Exps[32] := 1400000;
  g_dwSkill95Exps[33] := 1450000;
  g_dwSkill95Exps[34] := 1500000;
  g_dwSkill95Exps[35] := 1550000;
  g_dwSkill95Exps[36] := 1600000;
  g_dwSkill95Exps[37] := 1650000;
  g_dwSkill95Exps[38] := 1700000;
  g_dwSkill95Exps[39] := 1750000;
  g_dwSkill95Exps[40] := 1800000;
  g_dwSkill95Exps[41] := 1850000;
  g_dwSkill95Exps[42] := 1900000;
  g_dwSkill95Exps[43] := 1950000;
  g_dwSkill95Exps[44] := 2000000;
  g_dwSkill95Exps[45] := 2050000;
  g_dwSkill95Exps[46] := 2100000;
  g_dwSkill95Exps[47] := 2150000;
  g_dwSkill95Exps[48] := 2200000;
  g_dwSkill95Exps[49] := 2250000;
  g_dwSkill95Exps[50] := 2300000;
  g_dwSkill95Exps[51] := 2350000;
  g_dwSkill95Exps[52] := 2400000;
  g_dwSkill95Exps[53] := 2450000;
  g_dwSkill95Exps[54] := 2500000;
  g_dwSkill95Exps[55] := 2550000;
  g_dwSkill95Exps[56] := 2600000;
  g_dwSkill95Exps[57] := 2650000;
  g_dwSkill95Exps[58] := 2700000;
  g_dwSkill95Exps[59] := 2750000;
  g_dwSkill95Exps[60] := 2800000;
  g_dwSkill95Exps[61] := 2850000;
  g_dwSkill95Exps[62] := 2900000;
  g_dwSkill95Exps[63] := 2950000;
  g_dwSkill95Exps[64] := 3000000;
  g_dwSkill95Exps[65] := 3500000;
  g_dwSkill95Exps[66] := 4000000;
  g_dwSkill95Exps[67] := 4500000;
  g_dwSkill95Exps[68] := 5000000;
  g_dwSkill95Exps[69] := 5500000;

  g_dwSkill95Exps[70] := 6000000;
  g_dwSkill95Exps[71] := 6500000;
  g_dwSkill95Exps[72] := 7000000;
  g_dwSkill95Exps[73] := 7500000;
  g_dwSkill95Exps[74] := 8000000;
  g_dwSkill95Exps[75] := 8500000;
  g_dwSkill95Exps[76] := 9000000;
  g_dwSkill95Exps[77] := 9500000;
  g_dwSkill95Exps[78] := 10000000;
  g_dwSkill95Exps[79] := 10500000;
  g_dwSkill95Exps[80] := 11000000;
  g_dwSkill95Exps[81] := 11500000;
  g_dwSkill95Exps[82] := 12000000;
  g_dwSkill95Exps[83] := 12500000;
  g_dwSkill95Exps[84] := 13000000;
  g_dwSkill95Exps[85] := 13500000;
  g_dwSkill95Exps[86] := 14000000;
  g_dwSkill95Exps[87] := 14500000;
  g_dwSkill95Exps[88] := 15000000;
  g_dwSkill95Exps[89] := 15500000;
  g_dwSkill95Exps[90] := 16000000;
  g_dwSkill95Exps[91] := 16500000;
  g_dwSkill95Exps[92] := 17000000;
  g_dwSkill95Exps[93] := 17500000;
  g_dwSkill95Exps[94] := 18000000;
  g_dwSkill95Exps[95] := 18500000;
  g_dwSkill95Exps[96] := 19000000;
  g_dwSkill95Exps[97] := 19500000;
  g_dwSkill95Exps[98] := 20000000;
  g_dwSkill95Exps[99] := 20500000;
{$IFEND}
{$IF HEROVERSION = 1}
  FillChar(g_dwExpHeroPulsNeedExps0, SizeOf(TExpHeroPulsLevelNeedExp), 0);
  FillChar(g_dwExpHeroPulsNeedExps1, SizeOf(TExpHeroPulsLevelNeedExp), 0);
  FillChar(g_dwExpHeroPulsNeedExps2, SizeOf(TExpHeroPulsLevelNeedExp), 0);
  FillChar(g_dwExpHeroPulsNeedExps3, SizeOf(TExpHeroPulsLevelNeedExp), 0);
  for I := Low(TExpHeroPulsLevelNeedExp) to High(TExpHeroPulsLevelNeedExp) do begin
    g_dwExpHeroPulsNeedExps0[I]:= 157500 +  I * 207000;
    g_dwExpHeroPulsNeedExps1[I]:= 189000 +  I * 207000;
    g_dwExpHeroPulsNeedExps2[I]:= 220500 +  I * 207000;
    g_dwExpHeroPulsNeedExps3[I]:= 252000 +  I * 207000;
    if not boReload then Application.ProcessMessages;//20110613
  end;
{$IFEND}
end;
//读取全局变量值 20110713
procedure LoadGlobalVal(boReload:Boolean);
var
  I, nLoadInteger: Integer;
  sLoadString: string;
begin
  for I := Low(g_Config.GlobalVal) to High(g_Config.GlobalVal) do begin
    nLoadInteger := Config.ReadInteger('Setup', 'GlobalVal' + IntToStr(I), -1);
    if nLoadInteger < 0 then
      Config.WriteInteger('Setup', 'GlobalVal' + IntToStr(I), g_Config.GlobalVal[I])
    else g_Config.GlobalVal[I] := nLoadInteger;
    //共用同个循环 20100408
    sLoadString := Config.ReadString('Setup', 'GlobalStrVal' + IntToStr(I), '');
    if sLoadString = '' then Config.WriteString('Setup', 'GlobalStrVal' + IntToStr(I), '');
    g_Config.GlobalAVal[I] := sLoadString;
    if not boReload then Application.ProcessMessages;//20100408 增加
  end;
end;

procedure LoadExp(boReload:Boolean);
var
  I: Integer;
  LoadInteger: Integer;
  LoadInteger1:LongWord;//20080805
  LoadString: string;
begin
  LoadInteger := Config.ReadInteger('Exp', 'KillMonExpMultiple', -1);
  if LoadInteger < 0 then begin
    Config.WriteInteger('Exp', 'KillMonExpMultiple', g_Config.dwKillMonExpMultiple);
  end else begin
    g_Config.dwKillMonExpMultiple := Config.ReadInteger('Exp', 'KillMonExpMultiple', g_Config.dwKillMonExpMultiple);
  end;

//杀怪内功经验倍数 20081215
  LoadInteger := Config.ReadInteger('Exp', 'KillMonNGExpMultiple', -1);
  if LoadInteger < 0 then begin
    Config.WriteInteger('Exp', 'KillMonNGExpMultiple', g_Config.dwKillMonNGExpMultiple);
  end else begin
    g_Config.dwKillMonNGExpMultiple := Config.ReadInteger('Exp', 'KillMonNGExpMultiple', g_Config.dwKillMonNGExpMultiple);
  end;

  LoadInteger := Config.ReadInteger('Exp', 'HighLevelKillMonFixExp', -1);
  if LoadInteger < 0 then begin
    Config.WriteBool('Exp', 'HighLevelKillMonFixExp', g_Config.boHighLevelKillMonFixExp);
  end else begin
    g_Config.boHighLevelKillMonFixExp := Config.ReadBool('Exp', 'HighLevelKillMonFixExp', g_Config.boHighLevelKillMonFixExp);
  end;

  for I := 1 to MAXCHANGELEVEL do begin
    LoadString := Config.ReadString('Exp', 'Level' + IntToStr(I), '');
    LoadInteger1 := Str_ToInt(LoadString, 0);
    if LoadInteger1 = 0 then begin
      Config.WriteString('Exp', 'Level' + IntToStr(I), IntToStr(g_dwOldNeedExps[I]));
      g_Config.dwNeedExps[I] := g_dwOldNeedExps[I];
    end else begin
      if (LoadInteger1 > 0) {and (LoadInteger <= High(Integer))} then//20080521
        g_Config.dwNeedExps[I] := LoadInteger1
      else g_Config.dwNeedExps[I] := g_dwOldNeedExps[I];
    end;
    if not boReload then Application.ProcessMessages;//20100408 增加

    {$IF HEROVERSION = 1}
    LoadString := Config.ReadString('HeroExp', 'Level' + IntToStr(I), '');
    LoadInteger1 := Str_ToInt(LoadString, 0);
    if LoadInteger1 = 0 then begin
      Config.WriteString('HeroExp', 'Level' + IntToStr(I), IntToStr(g_dwHeroNeedExps[I]));
      g_Config.dwHeroNeedExps[I] := g_dwHeroNeedExps[I];
    end else begin
      if (LoadInteger1 > 0) {and (LoadInteger <= High(Integer))} then//20080521
        g_Config.dwHeroNeedExps[I] := LoadInteger1
      else g_Config.dwHeroNeedExps[I] := g_dwHeroNeedExps[I];
    end;
    if not boReload then Application.ProcessMessages;//20100408 增加
    {$IFEND}
    //药力值
    LoadString := Config.ReadString('MedicineExp', 'Level' + IntToStr(I), '');
    LoadInteger := Str_ToInt(LoadString, 0);
    if LoadInteger = 0 then begin
      Config.WriteString('MedicineExp', 'Level' + IntToStr(I), IntToStr(g_dwMedicineExps[I]));
      g_Config.dwMedicineNeedExps[I] := g_dwMedicineExps[I];
    end else begin
      if (LoadInteger > 0) then
        g_Config.dwMedicineNeedExps[I] := LoadInteger
      else g_Config.dwMedicineNeedExps[I] := g_dwMedicineExps[I];
    end;
    if not boReload then Application.ProcessMessages;//20100408 增加

    //等级经验分配比例
    LoadString := Config.ReadString('LevelToExpRate', 'Level' + IntToStr(I), '');
    LoadInteger := Str_ToInt(LoadString, 0);
    if LoadInteger = 0 then begin
      Config.WriteString('LevelToExpRate', 'Level' + IntToStr(I), IntToStr(g_dwLevelToExpRate[I]));
      g_Config.dwLevelToExpRate[I] := g_dwLevelToExpRate[I];
    end else begin
      if (LoadInteger > 0) then
        g_Config.dwLevelToExpRate[I] := LoadInteger
      else g_Config.dwLevelToExpRate[I] := g_dwLevelToExpRate[I];
    end;
    if not boReload then Application.ProcessMessages;//20100408 增加
    if I < 101 then begin//酒气护体 for I := 1 to 100 20110713
      LoadString := Config.ReadString('Skill68', 'Level' + IntToStr(I), '');
      LoadInteger := Str_ToInt(LoadString, 0);
      if LoadInteger = 0 then begin
        Config.WriteString('Skill68', 'Level' + IntToStr(I), IntToStr(g_dwSkill68Exps[I]));
        g_Config.dwSkill68NeedExps[I] := g_dwSkill68Exps[I];
      end else begin
        if (LoadInteger > 0) then
          g_Config.dwSkill68NeedExps[I] := LoadInteger
        else g_Config.dwSkill68NeedExps[I] := g_dwSkill68Exps[I];
      end;
      if not boReload then Application.ProcessMessages;//20100408 增加
    end;
    {$IF M2Version = 1}
    if I < 100 then begin//斗转星移 for I := 1 to 99
      LoadString := Config.ReadString('Skill95', 'Level' + IntToStr(I), '');
      LoadInteger := Str_ToInt(LoadString, 0);
      if LoadInteger = 0 then begin
        Config.WriteString('Skill95', 'Level' + IntToStr(I), IntToStr(g_dwSkill95Exps[I]));
        g_Config.dwSkill95NeedExps[I] := g_dwSkill95Exps[I];
      end else begin
        if (LoadInteger > 0) then
          g_Config.dwSkill95NeedExps[I] := LoadInteger
        else g_Config.dwSkill95NeedExps[I] := g_dwSkill95Exps[I];
      end;
      if not boReload then Application.ProcessMessages;//20100408 增加
    end;
    {$IFEND}
    if I < 5 then begin//天地结晶经验，天地结晶内功经验 for I := 1 to 4
      LoadString := Config.ReadString('ExpCrystal', 'Level' + IntToStr(I), '');
      LoadInteger := Str_ToInt(LoadString, 0);
      if LoadInteger = 0 then begin
        Config.WriteString('ExpCrystal', 'Level' + IntToStr(I), IntToStr(g_dwExpCrystalNeedExps[I]));
        g_Config.dwExpCrystalNeedExps[I] := g_dwExpCrystalNeedExps[I];
      end else begin
        if (LoadInteger > 0) then
          g_Config.dwExpCrystalNeedExps[I] := LoadInteger
        else g_Config.dwExpCrystalNeedExps[I] := g_dwExpCrystalNeedExps[I];
      end;
      if not boReload then Application.ProcessMessages;//20110613

      LoadString := Config.ReadString('NGExpCrystal', 'Level' + IntToStr(I), '');
      LoadInteger := Str_ToInt(LoadString, 0);
      if LoadInteger = 0 then begin
        Config.WriteString('NGExpCrystal', 'Level' + IntToStr(I), IntToStr(g_dwNGExpCrystalNeedExps[I]));
        g_Config.dwNGExpCrystalNeedExps[I] := g_dwNGExpCrystalNeedExps[I];
      end else begin
        if (LoadInteger > 0) then
          g_Config.dwNGExpCrystalNeedExps[I] := LoadInteger
        else g_Config.dwNGExpCrystalNeedExps[I] := g_dwNGExpCrystalNeedExps[I];
      end;
      if not boReload then Application.ProcessMessages;//20110613
    end;
  end;
(*酒气护体 20080625
  for I := 1 to 100 do begin
    LoadString := Config.ReadString('Skill68', 'Level' + IntToStr(I), '');
    LoadInteger := Str_ToInt(LoadString, 0);
    if LoadInteger = 0 then begin
      Config.WriteString('Skill68', 'Level' + IntToStr(I), IntToStr(g_dwSkill68Exps[I]));
      g_Config.dwSkill68NeedExps[I] := g_dwSkill68Exps[I];
    end else begin
      if (LoadInteger > 0) then
        g_Config.dwSkill68NeedExps[I] := LoadInteger
      else g_Config.dwSkill68NeedExps[I] := g_dwSkill68Exps[I];
    end;
    if not boReload then Application.ProcessMessages;//20100408 增加
  end;  
{$IF M2Version = 1}
  for I := 1 to 99 do begin//斗转星移
    LoadString := Config.ReadString('Skill95', 'Level' + IntToStr(I), '');
    LoadInteger := Str_ToInt(LoadString, 0);
    if LoadInteger = 0 then begin
      Config.WriteString('Skill95', 'Level' + IntToStr(I), IntToStr(g_dwSkill95Exps[I]));
      g_Config.dwSkill95NeedExps[I] := g_dwSkill95Exps[I];
    end else begin
      if (LoadInteger > 0) then
        g_Config.dwSkill95NeedExps[I] := LoadInteger
      else g_Config.dwSkill95NeedExps[I] := g_dwSkill95Exps[I];
    end;
    if not boReload then Application.ProcessMessages;//20100408 增加
  end;
{$IFEND} *)

{$IF HEROVERSION = 1}
  for I := Low(TExpHeroPulsLevelNeedExp) to High(TExpHeroPulsLevelNeedExp) do begin
    //0
    LoadString := Config.ReadString('HeroPulsNeedExps0', 'Level' + IntToStr(I), '');
    LoadInteger1 := Str_ToInt(LoadString, 0);
    if LoadInteger1 = 0 then begin
      Config.WriteString('HeroPulsNeedExps0', 'Level' + IntToStr(I), IntToStr(g_dwExpHeroPulsNeedExps0[I]));
      g_Config.dwExpHeroPulsNeedExps0[I] := g_dwExpHeroPulsNeedExps0[I];
    end else begin
      if (LoadInteger1 > 0) then
        g_Config.dwExpHeroPulsNeedExps0[I] := LoadInteger1
      else g_Config.dwExpHeroPulsNeedExps0[I] := g_dwExpHeroPulsNeedExps0[I];
    end;
    if not boReload then Application.ProcessMessages;//20110613
    //1
    LoadString := Config.ReadString('HeroPulsNeedExps1', 'Level' + IntToStr(I), '');
    LoadInteger1 := Str_ToInt(LoadString, 0);
    if LoadInteger1 = 0 then begin
      Config.WriteString('HeroPulsNeedExps1', 'Level' + IntToStr(I), IntToStr(g_dwExpHeroPulsNeedExps1[I]));
      g_Config.dwExpHeroPulsNeedExps1[I] := g_dwExpHeroPulsNeedExps1[I];
    end else begin
      if (LoadInteger1 > 0) then
        g_Config.dwExpHeroPulsNeedExps1[I] := LoadInteger1
      else g_Config.dwExpHeroPulsNeedExps1[I] := g_dwExpHeroPulsNeedExps1[I];
    end;
    if not boReload then Application.ProcessMessages;//20110613
    //2
    LoadString := Config.ReadString('HeroPulsNeedExps2', 'Level' + IntToStr(I), '');
    LoadInteger1 := Str_ToInt(LoadString, 0);
    if LoadInteger1 = 0 then begin
      Config.WriteString('HeroPulsNeedExps2', 'Level' + IntToStr(I), IntToStr(g_dwExpHeroPulsNeedExps2[I]));
      g_Config.dwExpHeroPulsNeedExps2[I] := g_dwExpHeroPulsNeedExps2[I];
    end else begin
      if (LoadInteger1 > 0) then
        g_Config.dwExpHeroPulsNeedExps2[I] := LoadInteger1
      else g_Config.dwExpHeroPulsNeedExps2[I] := g_dwExpHeroPulsNeedExps2[I];
    end;
    if not boReload then Application.ProcessMessages;//20110613
    //3
    LoadString := Config.ReadString('HeroPulsNeedExps3', 'Level' + IntToStr(I), '');
    LoadInteger1 := Str_ToInt(LoadString, 0);
    if LoadInteger1 = 0 then begin
      Config.WriteString('HeroPulsNeedExps3', 'Level' + IntToStr(I), IntToStr(g_dwExpHeroPulsNeedExps3[I]));
      g_Config.dwExpHeroPulsNeedExps3[I] := g_dwExpHeroPulsNeedExps3[I];
    end else begin
      if (LoadInteger1 > 0) then
        g_Config.dwExpHeroPulsNeedExps3[I] := LoadInteger1
      else g_Config.dwExpHeroPulsNeedExps3[I] := g_dwExpHeroPulsNeedExps3[I];
    end;
    if not boReload then Application.ProcessMessages;//20100408 增加
  end;
{$IFEND}
(*//天地结晶经验，天地结晶内功经验
  for I := 1 to 4 do begin
    LoadString := Config.ReadString('ExpCrystal', 'Level' + IntToStr(I), '');
    LoadInteger := Str_ToInt(LoadString, 0);
    if LoadInteger = 0 then begin
      Config.WriteString('ExpCrystal', 'Level' + IntToStr(I), IntToStr(g_dwExpCrystalNeedExps[I]));
      g_Config.dwExpCrystalNeedExps[I] := g_dwExpCrystalNeedExps[I];
    end else begin
      if (LoadInteger > 0) then
        g_Config.dwExpCrystalNeedExps[I] := LoadInteger
      else g_Config.dwExpCrystalNeedExps[I] := g_dwExpCrystalNeedExps[I];
    end;
    if not boReload then Application.ProcessMessages;//20110613

    LoadString := Config.ReadString('NGExpCrystal', 'Level' + IntToStr(I), '');
    LoadInteger := Str_ToInt(LoadString, 0);
    if LoadInteger = 0 then begin
      Config.WriteString('NGExpCrystal', 'Level' + IntToStr(I), IntToStr(g_dwNGExpCrystalNeedExps[I]));
      g_Config.dwNGExpCrystalNeedExps[I] := g_dwNGExpCrystalNeedExps[I];
    end else begin
      if (LoadInteger > 0) then
        g_Config.dwNGExpCrystalNeedExps[I] := LoadInteger
      else g_Config.dwNGExpCrystalNeedExps[I] := g_dwNGExpCrystalNeedExps[I];
    end;
    if not boReload then Application.ProcessMessages;//20110613
  end; *)
//----------------------------------------------------------------------------
  if Config.ReadInteger('Exp', 'UseFixExp', -1) < 0 then
    Config.WriteBool('Exp', 'UseFixExp', g_Config.boUseFixExp);
  g_Config.boUseFixExp := Config.ReadBool('Setup', 'UseFixExp', g_Config.boUseFixExp);

  LoadInteger := Config.ReadInteger('Exp', 'BaseExp', -1);
  if LoadInteger < 0 then
    Config.WriteInteger('Exp', 'BaseExp', g_Config.nBaseExp)
  else g_Config.nBaseExp := LoadInteger;

  LoadInteger := Config.ReadInteger('Setup', 'AddExp', -1);
  if LoadInteger < 0 then
    Config.WriteInteger('Exp', 'AddExp', g_Config.nAddExp)
  else g_Config.nAddExp := LoadInteger;
{$IF OEMVER = OEM775}
  for I := 1 to High(g_LevelInfo) do begin
    LoadInteger := Level775.ReadInteger('HP', 'HP' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('HP', 'HP' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wHP := Level775.ReadInteger('HP', 'HP' + IntToStr(I), g_LevelInfo[I].wHP);
    end;
    if not boReload then Application.ProcessMessages;//20110613

    LoadInteger := Level775.ReadInteger('MP', 'MP' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('MP', 'MP' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wMP := Level775.ReadInteger('MP', 'MP' + IntToStr(I), g_LevelInfo[I].wMP);
    end;
    if not boReload then Application.ProcessMessages;//20110613

    LoadString := Level775.ReadString('Exp', 'Exp' + IntToStr(I), '');
    LoadInteger := Str_ToInt(LoadString, 0);
    if LoadInteger = 0 then begin
      Level775.WriteString('Exp', 'Exp' + IntToStr(I), '1000');
      g_LevelInfo[I].dwExp := g_dwOldNeedExps[I];
    end else begin
      g_LevelInfo[I].dwExp := LoadInteger;
    end;
    if not boReload then Application.ProcessMessages;//20110613

    LoadInteger := Level775.ReadInteger('AC', 'AC' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('AC', 'AC' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wAC := Level775.ReadInteger('AC', 'AC' + IntToStr(I), g_LevelInfo[I].wAC);
    end;

    LoadInteger := Level775.ReadInteger('MaxAC', 'MaxAC' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('MaxAC', 'MaxAC' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wMaxAC := Level775.ReadInteger('MaxAC', 'MaxAC' + IntToStr(I), g_LevelInfo[I].wMaxAC);
    end;
    LoadInteger := Level775.ReadInteger('ACLimit', 'ACLimit' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('ACLimit', 'ACLimit' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wACLimit := Level775.ReadInteger('ACLimit', 'ACLimit' + IntToStr(I), g_LevelInfo[I].wACLimit);
    end;

    LoadInteger := Level775.ReadInteger('MAC', 'MAC' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('MAC', 'MAC' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wMAC := Level775.ReadInteger('MAC', 'MAC' + IntToStr(I), g_LevelInfo[I].wMAC);
    end;

    LoadInteger := Level775.ReadInteger('MaxMAC', 'MaxMAC' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('MaxMAC', 'MaxMAC' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wMaxMAC := Level775.ReadInteger('MaxMAC', 'MaxMAC' + IntToStr(I), g_LevelInfo[I].wMaxMAC);
    end;
    LoadInteger := Level775.ReadInteger('MACLimit', 'MACLimit' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('MACLimit', 'MACLimit' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wMACLimit := Level775.ReadInteger('MACLimit', 'MACLimit' + IntToStr(I), g_LevelInfo[I].wMACLimit);
    end;

    LoadInteger := Level775.ReadInteger('DC', 'DC' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('DC', 'DC' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wDC := Level775.ReadInteger('DC', 'DC' + IntToStr(I), g_LevelInfo[I].wDC);
    end;

    LoadInteger := Level775.ReadInteger('MaxDC', 'MaxDC' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('MaxDC', 'MaxDC' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wMaxDC := Level775.ReadInteger('MaxDC', 'MaxDC' + IntToStr(I), g_LevelInfo[I].wMaxDC);
    end;
    LoadInteger := Level775.ReadInteger('DCLimit', 'DCLimit' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('DCLimit', 'DCLimit' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wDCLimit := Level775.ReadInteger('DCLimit', 'DCLimit' + IntToStr(I), g_LevelInfo[I].wDCLimit);
    end;

    LoadInteger := Level775.ReadInteger('MC', 'MC' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('MC', 'MC' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wMC := Level775.ReadInteger('MC', 'MC' + IntToStr(I), g_LevelInfo[I].wMC);
    end;

    LoadInteger := Level775.ReadInteger('MaxMC', 'MaxMC' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('MaxMC', 'MaxMC' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wMaxMC := Level775.ReadInteger('MaxMC', 'MaxMC' + IntToStr(I), g_LevelInfo[I].wMaxMC);
    end;
    LoadInteger := Level775.ReadInteger('MCLimit', 'MCLimit' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('MCLimit', 'MCLimit' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wMCLimit := Level775.ReadInteger('MCLimit', 'MCLimit' + IntToStr(I), g_LevelInfo[I].wMCLimit);
    end;

    LoadInteger := Level775.ReadInteger('SC', 'SC' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('SC', 'SC' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wSC := Level775.ReadInteger('SC', 'SC' + IntToStr(I), g_LevelInfo[I].wSC);
    end;

    LoadInteger := Level775.ReadInteger('MaxSC', 'MaxSC' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('MaxSC', 'MaxSC' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wMaxSC := Level775.ReadInteger('MaxSC', 'MaxSC' + IntToStr(I), g_LevelInfo[I].wMaxSC);
    end;
    LoadInteger := Level775.ReadInteger('SCLimit', 'SCLimit' + IntToStr(I), -1);
    if LoadInteger < 0 then begin
      Level775.WriteInteger('SCLimit', 'SCLimit' + IntToStr(I), 100);
    end else begin
      g_LevelInfo[I].wSCLimit := Level775.ReadInteger('SCLimit', 'SCLimit' + IntToStr(I), g_LevelInfo[I].wSCLimit);
    end;
    if not boReload then Application.ProcessMessages;//20110613
  end;
{$IFEND}
end;
procedure LoadGameCommand();
var
  LoadString: string;
  nLoadInteger: Integer;
begin
  LoadString := CommandConf.ReadString('Command', 'Date', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Date', g_GameCommand.Data.sCmd)
  else g_GameCommand.Data.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'Date', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Date', g_GameCommand.Data.nPermissionMin)
  else g_GameCommand.Data.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'PrvMsg', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'PrvMsg', g_GameCommand.PRVMSG.sCmd)
  else g_GameCommand.PRVMSG.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'PrvMsg', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'PrvMsg', g_GameCommand.PRVMSG.nPermissionMin)
  else g_GameCommand.PRVMSG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AllowMsg', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AllowMsg', g_GameCommand.ALLOWMSG.sCmd)
  else g_GameCommand.ALLOWMSG.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'AllowMsg', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AllowMsg', g_GameCommand.ALLOWMSG.nPermissionMin)
  else g_GameCommand.ALLOWMSG.nPermissionMin := nLoadInteger;

//允许收徒 20090209
  LoadString := CommandConf.ReadString('Command', 'ReadMasterMsg', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReadMasterMsg', g_GameCommand.ReadMasterMsg.sCmd)
  else g_GameCommand.ReadMasterMsg.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReadMasterMsg', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReadMasterMsg', g_GameCommand.ReadMasterMsg.nPermissionMin)
  else g_GameCommand.ReadMasterMsg.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MarryMsg', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MarryMsg', g_GameCommand.MarryMsg.sCmd)
  else g_GameCommand.MarryMsg.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MarryMsg', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MarryMsg', g_GameCommand.MarryMsg.nPermissionMin)
  else g_GameCommand.MarryMsg.nPermissionMin := nLoadInteger;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MarryMsg', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MarryMsg', g_GameCommand.MarryMsg.nPermissionMin)
  else g_GameCommand.MarryMsg.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'LetShout', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LetShout', g_GameCommand.LETSHOUT.sCmd)
  else g_GameCommand.LETSHOUT.sCmd := LoadString;

(*//拒绝所有喊话信息 20080211
  LoadString := CommandConf.ReadString('Command', 'BanGmMsg', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'BanGmMsg', '禁止喊话'{g_GameCommand.BANGMMSG.sCmd})
  else g_GameCommand.BANGMMSG.sCmd := LoadString; *)
  g_GameCommand.BANGMMSG.sCmd :='禁止喊话';

  LoadString := CommandConf.ReadString('Command', 'LetTrade', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LetTrade', g_GameCommand.LETTRADE.sCmd)
  else g_GameCommand.LETTRADE.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'LetGuild', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LetGuild', g_GameCommand.LETGUILD.sCmd)
  else g_GameCommand.LETGUILD.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'EndGuild', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'EndGuild', g_GameCommand.ENDGUILD.sCmd)
  else g_GameCommand.ENDGUILD.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'BanGuildChat', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'BanGuildChat', g_GameCommand.BANGUILDCHAT.sCmd)
  else g_GameCommand.BANGUILDCHAT.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'AuthAlly', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AuthAlly', g_GameCommand.AUTHALLY.sCmd)
  else g_GameCommand.AUTHALLY.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'Auth', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Auth', g_GameCommand.AUTH.sCmd)
  else g_GameCommand.AUTH.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'AuthCancel', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AuthCancel', g_GameCommand.AUTHCANCEL.sCmd)
  else g_GameCommand.AUTHCANCEL.sCmd := LoadString;
   //未使用 20080823
  {LoadString := CommandConf.ReadString('Command', 'ViewDiary', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ViewDiary', g_GameCommand.DIARY.sCmd)
  else g_GameCommand.DIARY.sCmd := LoadString; }

  LoadString := CommandConf.ReadString('Command', 'UserMove', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'UserMove', g_GameCommand.USERMOVE.sCmd)
  else g_GameCommand.USERMOVE.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'Searching', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Searching', g_GameCommand.SEARCHING.sCmd)
  else g_GameCommand.SEARCHING.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'AllowGroupCall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AllowGroupCall', g_GameCommand.ALLOWGROUPCALL.sCmd)
  else g_GameCommand.ALLOWGROUPCALL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'GroupCall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GroupCall', g_GameCommand.GROUPRECALLL.sCmd)
  else g_GameCommand.GROUPRECALLL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'AllowGuildReCall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AllowGuildReCall', g_GameCommand.ALLOWGUILDRECALL.sCmd)
  else g_GameCommand.ALLOWGUILDRECALL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'GuildReCall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GuildReCall', g_GameCommand.GUILDRECALLL.sCmd)
  else g_GameCommand.GUILDRECALLL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'StorageUnLock', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StorageUnLock', g_GameCommand.UNLOCKSTORAGE.sCmd)
  else g_GameCommand.UNLOCKSTORAGE.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'PasswordUnLock', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'PasswordUnLock', g_GameCommand.UnLock.sCmd)
  else g_GameCommand.UnLock.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'StorageLock', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StorageLock', g_GameCommand.Lock.sCmd)
  else g_GameCommand.Lock.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'StorageSetPassword', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StorageSetPassword', g_GameCommand.SETPASSWORD.sCmd)
  else g_GameCommand.SETPASSWORD.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'PasswordLock', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'PasswordLock', g_GameCommand.PASSWORDLOCK.sCmd)
  else g_GameCommand.PASSWORDLOCK.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'StorageChgPassword', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StorageChgPassword', g_GameCommand.CHGPASSWORD.sCmd)
  else g_GameCommand.CHGPASSWORD.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'StorageClearPassword', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StorageClearPassword', g_GameCommand.CLRPASSWORD.sCmd)
  else g_GameCommand.CLRPASSWORD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'StorageClearPassword', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'StorageClearPassword', g_GameCommand.CLRPASSWORD.nPermissionMin)
  else g_GameCommand.CLRPASSWORD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'StorageUserClearPassword', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StorageUserClearPassword', g_GameCommand.UNPASSWORD.sCmd)
  else g_GameCommand.UNPASSWORD.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'MemberFunc', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MemberFunc', g_GameCommand.MEMBERFUNCTION.sCmd)
  else g_GameCommand.MEMBERFUNCTION.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'MemberFuncEx', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MemberFuncEx', g_GameCommand.MEMBERFUNCTIONEX.sCmd)
  else g_GameCommand.MEMBERFUNCTIONEX.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'Dear', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Dear', g_GameCommand.DEAR.sCmd)
  else g_GameCommand.DEAR.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'Master', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Master', g_GameCommand.MASTER.sCmd)
  else g_GameCommand.MASTER.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'DearRecall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DearRecall', g_GameCommand.DEARRECALL.sCmd)
  else g_GameCommand.DEARRECALL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'MasterRecall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MasterRecall', g_GameCommand.MASTERECALL.sCmd)
  else g_GameCommand.MASTERECALL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'AllowDearRecall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AllowDearRecall', g_GameCommand.ALLOWDEARRCALL.sCmd)
  else g_GameCommand.ALLOWDEARRCALL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'AllowMasterRecall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AllowMasterRecall', g_GameCommand.ALLOWMASTERRECALL.sCmd)
  else g_GameCommand.ALLOWMASTERRECALL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'AttackMode', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AttackMode', g_GameCommand.ATTACKMODE.sCmd)
  else g_GameCommand.ATTACKMODE.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'Rest', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Rest', g_GameCommand.REST.sCmd)
  else g_GameCommand.REST.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'TakeOnHorse', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TakeOnHorse', g_GameCommand.TAKEONHORSE.sCmd)
  else g_GameCommand.TAKEONHORSE.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'TakeOffHorse', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TakeOffHorse', g_GameCommand.TAKEOFHORSE.sCmd)
  else g_GameCommand.TAKEOFHORSE.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'HumanLocal', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'HumanLocal', g_GameCommand.HUMANLOCAL.sCmd)
  else g_GameCommand.HUMANLOCAL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'HumanLocal', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'HumanLocal', g_GameCommand.HUMANLOCAL.nPermissionMin)
  else g_GameCommand.HUMANLOCAL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Move', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Move', g_GameCommand.Move.sCmd)
  else g_GameCommand.Move.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MoveMin', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MoveMin', g_GameCommand.Move.nPermissionMin)
  else g_GameCommand.Move.nPermissionMin := nLoadInteger;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MoveMax', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MoveMax', g_GameCommand.Move.nPermissionMax)
  else g_GameCommand.Move.nPermissionMax := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'PositionMove', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'PositionMove', g_GameCommand.POSITIONMOVE.sCmd)
  else g_GameCommand.POSITIONMOVE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'PositionMoveMin', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'PositionMoveMin', g_GameCommand.POSITIONMOVE.nPermissionMin)
  else g_GameCommand.POSITIONMOVE.nPermissionMin := nLoadInteger;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'PositionMoveMax', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'PositionMoveMax', g_GameCommand.POSITIONMOVE.nPermissionMax)
  else g_GameCommand.POSITIONMOVE.nPermissionMax := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Info', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Info', g_GameCommand.INFO.sCmd)
  else g_GameCommand.INFO.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Info', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Info', g_GameCommand.INFO.nPermissionMin)
  else g_GameCommand.INFO.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MobLevel', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MobLevel', g_GameCommand.MOBLEVEL.sCmd)
  else g_GameCommand.MOBLEVEL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MobLevel', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MobLevel', g_GameCommand.MOBLEVEL.nPermissionMin)
  else g_GameCommand.MOBLEVEL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MobCount', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MobCount', g_GameCommand.MOBCOUNT.sCmd)
  else g_GameCommand.MOBCOUNT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MobCount', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MobCount', g_GameCommand.MOBCOUNT.nPermissionMin)
  else g_GameCommand.MOBCOUNT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'HumanCount', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'HumanCount', g_GameCommand.HUMANCOUNT.sCmd)
  else g_GameCommand.HUMANCOUNT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'HumanCount', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'HumanCount', g_GameCommand.HUMANCOUNT.nPermissionMin)
  else g_GameCommand.HUMANCOUNT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Map', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Map', g_GameCommand.Map.sCmd)
  else g_GameCommand.Map.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Map', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Map', g_GameCommand.Map.nPermissionMin)
  else g_GameCommand.Map.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Kick', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Kick', g_GameCommand.KICK.sCmd)
  else g_GameCommand.KICK.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Kick', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Kick', g_GameCommand.KICK.nPermissionMin)
  else g_GameCommand.KICK.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Ting', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Ting', g_GameCommand.TING.sCmd)
  else g_GameCommand.TING.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Ting', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Ting', g_GameCommand.TING.nPermissionMin)
  else g_GameCommand.TING.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SuperTing', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SuperTing', g_GameCommand.SUPERTING.sCmd)
  else g_GameCommand.SUPERTING.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SuperTing', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SuperTing', g_GameCommand.SUPERTING.nPermissionMin)
  else g_GameCommand.SUPERTING.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MapMove', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MapMove', g_GameCommand.MAPMOVE.sCmd)
  else g_GameCommand.MAPMOVE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MapMove', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MapMove', g_GameCommand.MAPMOVE.nPermissionMin)
  else g_GameCommand.MAPMOVE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Shutup', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Shutup', g_GameCommand.SHUTUP.sCmd)
  else g_GameCommand.SHUTUP.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Shutup', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Shutup', g_GameCommand.SHUTUP.nPermissionMin)
  else g_GameCommand.SHUTUP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReleaseShutup', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReleaseShutup', g_GameCommand.RELEASESHUTUP.sCmd)
  else g_GameCommand.RELEASESHUTUP.sCmd := LoadString;
  
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReleaseShutup', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReleaseShutup', g_GameCommand.RELEASESHUTUP.nPermissionMin)
  else g_GameCommand.RELEASESHUTUP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ShutupList', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ShutupList', g_GameCommand.SHUTUPLIST.sCmd)
  else g_GameCommand.SHUTUPLIST.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ShutupList', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ShutupList', g_GameCommand.SHUTUPLIST.nPermissionMin)
  else g_GameCommand.SHUTUPLIST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'GameMaster', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GameMaster', g_GameCommand.GAMEMASTER.sCmd)
  else g_GameCommand.GAMEMASTER.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'GameMaster', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GameMaster', g_GameCommand.GAMEMASTER.nPermissionMin)
  else g_GameCommand.GAMEMASTER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ObServer', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ObServer', g_GameCommand.OBSERVER.sCmd)
  else g_GameCommand.OBSERVER.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ObServer', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ObServer', g_GameCommand.OBSERVER.nPermissionMin)
  else g_GameCommand.OBSERVER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SuperMan', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SuperMan', g_GameCommand.SUEPRMAN.sCmd)
  else g_GameCommand.SUEPRMAN.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SuperMan', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SuperMan', g_GameCommand.SUEPRMAN.nPermissionMin)
  else g_GameCommand.SUEPRMAN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Level', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Level', g_GameCommand.Level.sCmd)
  else g_GameCommand.Level.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Level', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Level', g_GameCommand.Level.nPermissionMin)
  else g_GameCommand.Level.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SabukWallGold', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SabukWallGold', g_GameCommand.SABUKWALLGOLD.sCmd)
  else g_GameCommand.SABUKWALLGOLD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SabukWallGold', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SabukWallGold', g_GameCommand.SABUKWALLGOLD.nPermissionMin)
  else g_GameCommand.SABUKWALLGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Recall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Recall', g_GameCommand.RECALL.sCmd)
  else g_GameCommand.RECALL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Recall', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Recall', g_GameCommand.RECALL.nPermissionMin)
  else g_GameCommand.RECALL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReGoto', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReGoto', g_GameCommand.REGOTO.sCmd)
  else g_GameCommand.REGOTO.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReGoto', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReGoto', g_GameCommand.REGOTO.nPermissionMin)
  else g_GameCommand.REGOTO.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Flag', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Flag', g_GameCommand.SHOWFLAG.sCmd)
  else g_GameCommand.SHOWFLAG.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Flag', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Flag', g_GameCommand.SHOWFLAG.nPermissionMin)
  else g_GameCommand.SHOWFLAG.nPermissionMin := nLoadInteger;

  {LoadString := CommandConf.ReadString('Command', 'ShowOpen', ''); //20080812 注释
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ShowOpen', g_GameCommand.SHOWOPEN.sCmd)
  else g_GameCommand.SHOWOPEN.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ShowOpen', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ShowOpen', g_GameCommand.SHOWOPEN.nPermissionMin)
  else g_GameCommand.SHOWOPEN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ShowUnit', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ShowUnit', g_GameCommand.SHOWUNIT.sCmd)
  else g_GameCommand.SHOWUNIT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ShowUnit', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ShowUnit', g_GameCommand.SHOWUNIT.nPermissionMin)
  else g_GameCommand.SHOWUNIT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Attack', '');//20080812 注释
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Attack', g_GameCommand.Attack.sCmd)
  else g_GameCommand.Attack.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Attack', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Attack', g_GameCommand.Attack.nPermissionMin)
  else g_GameCommand.Attack.nPermissionMin := nLoadInteger; }

  LoadString := CommandConf.ReadString('Command', 'Mob', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Mob', g_GameCommand.MOB.sCmd)
  else g_GameCommand.MOB.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Mob', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Mob', g_GameCommand.MOB.nPermissionMin)
  else g_GameCommand.MOB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MobNpc', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MobNpc', g_GameCommand.MOBNPC.sCmd)
  else g_GameCommand.MOBNPC.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MobNpc', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MobNpc', g_GameCommand.MOBNPC.nPermissionMin)
  else g_GameCommand.MOBNPC.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelNpc', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelNpc', g_GameCommand.DELNPC.sCmd)
  else g_GameCommand.DELNPC.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelNpc', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelNpc', g_GameCommand.DELNPC.nPermissionMin)
  else g_GameCommand.DELNPC.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'NpcScript', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'NpcScript', g_GameCommand.NPCSCRIPT.sCmd)
  else g_GameCommand.NPCSCRIPT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'NpcScript', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'NpcScript', g_GameCommand.NPCSCRIPT.nPermissionMin)
  else g_GameCommand.NPCSCRIPT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RecallMob', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RecallMob', g_GameCommand.RECALLMOB.sCmd)
  else g_GameCommand.RECALLMOB.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'RecallMob', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RecallMob', g_GameCommand.RECALLMOB.nPermissionMin)
  else g_GameCommand.RECALLMOB.nPermissionMin := nLoadInteger;
//------------------------------------------------------------------------------
//20080122 召唤宝宝
  LoadString := CommandConf.ReadString('Command', 'RECALLMOBEX', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RECALLMOBEX', g_GameCommand.RECALLMOBEX.sCmd)
  else g_GameCommand.RECALLMOBEX.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'RECALLMOBEX', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RECALLMOBEX', g_GameCommand.RECALLMOBEX.nPermissionMin)
  else g_GameCommand.RECALLMOBEX.nPermissionMin := nLoadInteger;
//------------------------------------------------------------------------------
//20080403 给指定纯度的矿石
  LoadString := CommandConf.ReadString('Command', 'GIVEMINE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GIVEMINE', g_GameCommand.GIVEMINE.sCmd)
  else g_GameCommand.GIVEMINE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'GIVEMINE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GIVEMINE', g_GameCommand.GIVEMINE.nPermissionMin)
  else g_GameCommand.GIVEMINE.nPermissionMin := nLoadInteger;
//------------------------------------------------------------------------------
//20080123 将指定坐标的怪物移动到新坐标
  LoadString := CommandConf.ReadString('Command', 'MOVEMOBTO', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MOVEMOBTO', g_GameCommand.MOVEMOBTO.sCmd)
  else g_GameCommand.MOVEMOBTO.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MOVEMOBTO', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MOVEMOBTO', g_GameCommand.MOVEMOBTO.nPermissionMin)
  else g_GameCommand.MOVEMOBTO.nPermissionMin := nLoadInteger;
//------------------------------------------------------------------------------
//20080124 清除地图物品
  LoadString := CommandConf.ReadString('Command', 'CLEARITEMMAP', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CLEARITEMMAP', g_GameCommand.CLEARITEMMAP.sCmd)
  else g_GameCommand.CLEARITEMMAP.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'CLEARITEMMAP', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CLEARITEMMAP', g_GameCommand.CLEARITEMMAP.nPermissionMin)
  else g_GameCommand.CLEARITEMMAP.nPermissionMin := nLoadInteger;
//------------------------------------------------------------------------------
  LoadString := CommandConf.ReadString('Command', 'LuckPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LuckPoint', g_GameCommand.LUCKYPOINT.sCmd)
  else g_GameCommand.LUCKYPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'LuckPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'LuckPoint', g_GameCommand.LUCKYPOINT.nPermissionMin)
  else g_GameCommand.LUCKYPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'LotteryTicket', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LotteryTicket', g_GameCommand.LOTTERYTICKET.sCmd)
  else g_GameCommand.LOTTERYTICKET.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'LotteryTicket', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'LotteryTicket', g_GameCommand.LOTTERYTICKET.nPermissionMin)
  else g_GameCommand.LOTTERYTICKET.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadGuild', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadGuild', g_GameCommand.RELOADGUILD.sCmd)
  else g_GameCommand.RELOADGUILD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadGuild', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadGuild', g_GameCommand.RELOADGUILD.nPermissionMin)
  else g_GameCommand.RELOADGUILD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadLineNotice', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadLineNotice', g_GameCommand.RELOADLINENOTICE.sCmd)
  else g_GameCommand.RELOADLINENOTICE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadLineNotice', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadLineNotice', g_GameCommand.RELOADLINENOTICE.nPermissionMin)
  else g_GameCommand.RELOADLINENOTICE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadAbuse', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadAbuse', g_GameCommand.RELOADABUSE.sCmd)
  else g_GameCommand.RELOADABUSE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadAbuse', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadAbuse', g_GameCommand.RELOADABUSE.nPermissionMin)
  else g_GameCommand.RELOADABUSE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'BackStep', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'BackStep', g_GameCommand.BACKSTEP.sCmd)
  else g_GameCommand.BACKSTEP.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'BackStep', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'BackStep', g_GameCommand.BACKSTEP.nPermissionMin)
  else g_GameCommand.BACKSTEP.nPermissionMin := nLoadInteger;

  {LoadString := CommandConf.ReadString('Command', 'Ball', ''); //20080812 注释
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Ball', g_GameCommand.BALL.sCmd)
  else g_GameCommand.BALL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Ball', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Ball', g_GameCommand.BALL.nPermissionMin)
  else g_GameCommand.BALL.nPermissionMin := nLoadInteger; }

  LoadString := CommandConf.ReadString('Command', 'FreePenalty', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'FreePenalty', g_GameCommand.FREEPENALTY.sCmd)
  else g_GameCommand.FREEPENALTY.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'FreePenalty', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'FreePenalty', g_GameCommand.FREEPENALTY.nPermissionMin)
  else g_GameCommand.FREEPENALTY.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'PkPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'PkPoint', g_GameCommand.PKPOINT.sCmd)
  else g_GameCommand.PKPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'PkPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'PkPoint', g_GameCommand.PKPOINT.nPermissionMin)
  else g_GameCommand.PKPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'IncPkPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'IncPkPoint', g_GameCommand.IncPkPoint.sCmd)
  else g_GameCommand.IncPkPoint.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'IncPkPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'IncPkPoint', g_GameCommand.IncPkPoint.nPermissionMin)
  else g_GameCommand.IncPkPoint.nPermissionMin := nLoadInteger;

 { LoadString := CommandConf.ReadString('Command', 'ChangeLuck', '');//20080812 注释
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeLuck', g_GameCommand.CHANGELUCK.sCmd)
  else g_GameCommand.CHANGELUCK.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeLuck', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeLuck', g_GameCommand.CHANGELUCK.nPermissionMin)
  else g_GameCommand.CHANGELUCK.nPermissionMin := nLoadInteger; }

  LoadString := CommandConf.ReadString('Command', 'Hunger', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Hunger', g_GameCommand.HUNGER.sCmd)
  else g_GameCommand.HUNGER.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Hunger', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Hunger', g_GameCommand.HUNGER.nPermissionMin)
  else g_GameCommand.HUNGER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Hair', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Hair', g_GameCommand.HAIR.sCmd)
  else g_GameCommand.HAIR.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Hair', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Hair', g_GameCommand.HAIR.nPermissionMin)
  else g_GameCommand.HAIR.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Training', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Training', g_GameCommand.TRAINING.sCmd)
  else g_GameCommand.TRAINING.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Training', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Training', g_GameCommand.TRAINING.nPermissionMin)
  else g_GameCommand.TRAINING.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DeleteSkill', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DeleteSkill', g_GameCommand.DELETESKILL.sCmd)
  else g_GameCommand.DELETESKILL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DeleteSkill', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DeleteSkill', g_GameCommand.DELETESKILL.nPermissionMin)
  else g_GameCommand.DELETESKILL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeJob', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeJob', g_GameCommand.CHANGEJOB.sCmd)
  else g_GameCommand.CHANGEJOB.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeJob', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeJob', g_GameCommand.CHANGEJOB.nPermissionMin)
  else g_GameCommand.CHANGEJOB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeGender', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeGender', g_GameCommand.CHANGEGENDER.sCmd)
  else g_GameCommand.CHANGEGENDER.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeGender', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeGender', g_GameCommand.CHANGEGENDER.nPermissionMin)
  else g_GameCommand.CHANGEGENDER.nPermissionMin := nLoadInteger;

  {LoadString := CommandConf.ReadString('Command', 'NameColor', '');//20080812 注释
  if LoadString = '' then
    CommandConf.WriteString('Command', 'NameColor', g_GameCommand.NAMECOLOR.sCmd)
  else g_GameCommand.NAMECOLOR.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'NameColor', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'NameColor', g_GameCommand.NAMECOLOR.nPermissionMin)
  else g_GameCommand.NAMECOLOR.nPermissionMin := nLoadInteger;}

  LoadString := CommandConf.ReadString('Command', 'Mission', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Mission', g_GameCommand.Mission.sCmd)
  else g_GameCommand.Mission.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Mission', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Mission', g_GameCommand.Mission.nPermissionMin)
  else g_GameCommand.Mission.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MobPlace', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MobPlace', g_GameCommand.MobPlace.sCmd)
  else g_GameCommand.MobPlace.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MobPlace', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MobPlace', g_GameCommand.MobPlace.nPermissionMin)
  else g_GameCommand.MobPlace.nPermissionMin := nLoadInteger;

  {LoadString := CommandConf.ReadString('Command', 'Transparecy', '');//20080812 注释
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Transparecy', g_GameCommand.TRANSPARECY.sCmd)
  else g_GameCommand.TRANSPARECY.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Transparecy', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Transparecy', g_GameCommand.TRANSPARECY.nPermissionMin)
  else g_GameCommand.TRANSPARECY.nPermissionMin := nLoadInteger; }

  LoadString := CommandConf.ReadString('Command', 'DeleteItem', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DeleteItem', g_GameCommand.DELETEITEM.sCmd)
  else g_GameCommand.DELETEITEM.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DeleteItem', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DeleteItem', g_GameCommand.DELETEITEM.nPermissionMin)
  else g_GameCommand.DELETEITEM.nPermissionMin := nLoadInteger;

  {LoadString := CommandConf.ReadString('Command', 'Level0', '');//20080812 注释
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Level0', g_GameCommand.LEVEL0.sCmd)
  else g_GameCommand.LEVEL0.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Level0', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Level0', g_GameCommand.LEVEL0.nPermissionMin)
  else g_GameCommand.LEVEL0.nPermissionMin := nLoadInteger;}

  LoadString := CommandConf.ReadString('Command', 'ClearMission', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ClearMission', g_GameCommand.CLEARMISSION.sCmd)
  else g_GameCommand.CLEARMISSION.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ClearMission', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ClearMission', g_GameCommand.CLEARMISSION.nPermissionMin)
  else g_GameCommand.CLEARMISSION.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SetFlag', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SetFlag', g_GameCommand.SETFLAG.sCmd)
  else g_GameCommand.SETFLAG.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SetFlag', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SetFlag', g_GameCommand.SETFLAG.nPermissionMin)
  else g_GameCommand.SETFLAG.nPermissionMin := nLoadInteger;

 { LoadString := CommandConf.ReadString('Command', 'SetOpen', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SetOpen', g_GameCommand.SETOPEN.sCmd)
  else g_GameCommand.SETOPEN.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SetOpen', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SetOpen', g_GameCommand.SETOPEN.nPermissionMin)
  else g_GameCommand.SETOPEN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SetUnit', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SetUnit', g_GameCommand.SETUNIT.sCmd)
  else g_GameCommand.SETUNIT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SetUnit', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SetUnit', g_GameCommand.SETUNIT.nPermissionMin)
  else g_GameCommand.SETUNIT.nPermissionMin := nLoadInteger; }

  LoadString := CommandConf.ReadString('Command', 'ReConnection', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReConnection', g_GameCommand.RECONNECTION.sCmd)
  else g_GameCommand.RECONNECTION.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReConnection', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReConnection', g_GameCommand.RECONNECTION.nPermissionMin)
  else g_GameCommand.RECONNECTION.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DisableFilter', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DisableFilter', g_GameCommand.DISABLEFILTER.sCmd)
  else g_GameCommand.DISABLEFILTER.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DisableFilter', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DisableFilter', g_GameCommand.DISABLEFILTER.nPermissionMin)
  else g_GameCommand.DISABLEFILTER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeUserFull', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeUserFull', g_GameCommand.CHGUSERFULL.sCmd)
  else g_GameCommand.CHGUSERFULL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeUserFull', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeUserFull', g_GameCommand.CHGUSERFULL.nPermissionMin)
  else g_GameCommand.CHGUSERFULL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeZenFastStep', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeZenFastStep', g_GameCommand.CHGZENFASTSTEP.sCmd)
  else g_GameCommand.CHGZENFASTSTEP.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeZenFastStep', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeZenFastStep', g_GameCommand.CHGZENFASTSTEP.nPermissionMin)
  else g_GameCommand.CHGZENFASTSTEP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ContestPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ContestPoint', g_GameCommand.CONTESTPOINT.sCmd)
  else g_GameCommand.CONTESTPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ContestPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ContestPoint', g_GameCommand.CONTESTPOINT.nPermissionMin)
  else g_GameCommand.CONTESTPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'StartContest', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StartContest', g_GameCommand.STARTCONTEST.sCmd)
  else g_GameCommand.STARTCONTEST.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'StartContest', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'StartContest', g_GameCommand.STARTCONTEST.nPermissionMin)
  else g_GameCommand.STARTCONTEST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'EndContest', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'EndContest', g_GameCommand.ENDCONTEST.sCmd)
  else g_GameCommand.ENDCONTEST.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'EndContest', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'EndContest', g_GameCommand.ENDCONTEST.nPermissionMin)
  else g_GameCommand.ENDCONTEST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Announcement', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Announcement', g_GameCommand.ANNOUNCEMENT.sCmd)
  else g_GameCommand.ANNOUNCEMENT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Announcement', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Announcement', g_GameCommand.ANNOUNCEMENT.nPermissionMin)
  else g_GameCommand.ANNOUNCEMENT.nPermissionMin := nLoadInteger;

 { LoadString := CommandConf.ReadString('Command', 'OXQuizRoom', ''); //20080812 注释
  if LoadString = '' then
    CommandConf.WriteString('Command', 'OXQuizRoom', g_GameCommand.OXQUIZROOM.sCmd)
  else g_GameCommand.OXQUIZROOM.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'OXQuizRoom', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'OXQuizRoom', g_GameCommand.OXQUIZROOM.nPermissionMin)
  else g_GameCommand.OXQUIZROOM.nPermissionMin := nLoadInteger; 

  LoadString := CommandConf.ReadString('Command', 'Gsa', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Gsa', g_GameCommand.GSA.sCmd)
  else g_GameCommand.GSA.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Gsa', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Gsa', g_GameCommand.GSA.nPermissionMin)
  else g_GameCommand.GSA.nPermissionMin := nLoadInteger; }

  LoadString := CommandConf.ReadString('Command', 'ChangeItemName', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeItemName', g_GameCommand.CHANGEITEMNAME.sCmd)
  else g_GameCommand.CHANGEITEMNAME.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeItemName', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeItemName', g_GameCommand.CHANGEITEMNAME.nPermissionMin)
  else g_GameCommand.CHANGEITEMNAME.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DisableSendMsg', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DisableSendMsg', g_GameCommand.DISABLESENDMSG.sCmd)
  else g_GameCommand.DISABLESENDMSG.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DisableSendMsg', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DisableSendMsg', g_GameCommand.DISABLESENDMSG.nPermissionMin)
  else g_GameCommand.DISABLESENDMSG.nPermissionMin := nLoadInteger;


  LoadString := CommandConf.ReadString('Command', 'EnableSendMsg', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'EnableSendMsg', g_GameCommand.ENABLESENDMSG.sCmd)
  else g_GameCommand.ENABLESENDMSG.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'EnableSendMsg', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'EnableSendMsg', g_GameCommand.ENABLESENDMSG.nPermissionMin)
  else g_GameCommand.ENABLESENDMSG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DisableSendMsgList', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DisableSendMsgList', g_GameCommand.DISABLESENDMSGLIST.sCmd)
  else g_GameCommand.DISABLESENDMSGLIST.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DisableSendMsgList', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DisableSendMsgList', g_GameCommand.DISABLESENDMSGLIST.nPermissionMin)
  else g_GameCommand.DISABLESENDMSGLIST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Kill', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Kill', g_GameCommand.KILL.sCmd)
  else g_GameCommand.KILL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Kill', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Kill', g_GameCommand.KILL.nPermissionMin)
  else g_GameCommand.KILL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Make', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Make', g_GameCommand.MAKE.sCmd)
  else g_GameCommand.MAKE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MakeMin', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MakeMin', g_GameCommand.MAKE.nPermissionMin)
  else g_GameCommand.MAKE.nPermissionMin := nLoadInteger;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MakeMax', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MakeMax', g_GameCommand.MAKE.nPermissionMax)
  else g_GameCommand.MAKE.nPermissionMax := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SuperMake', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SuperMake', g_GameCommand.SMAKE.sCmd)
  else g_GameCommand.SMAKE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SuperMake', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SuperMake', g_GameCommand.SMAKE.nPermissionMin)
  else g_GameCommand.SMAKE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'BonusPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'BonusPoint', g_GameCommand.BonusPoint.sCmd)
  else g_GameCommand.BonusPoint.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'BonusPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'BonusPoint', g_GameCommand.BonusPoint.nPermissionMin)
  else g_GameCommand.BonusPoint.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelBonuPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelBonuPoint', g_GameCommand.DELBONUSPOINT.sCmd)
  else g_GameCommand.DELBONUSPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelBonuPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelBonuPoint', g_GameCommand.DELBONUSPOINT.nPermissionMin)
  else g_GameCommand.DELBONUSPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RestBonuPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RestBonuPoint', g_GameCommand.RESTBONUSPOINT.sCmd)
  else g_GameCommand.RESTBONUSPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'RestBonuPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RestBonuPoint', g_GameCommand.RESTBONUSPOINT.nPermissionMin)
  else g_GameCommand.RESTBONUSPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'FireBurn', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'FireBurn', g_GameCommand.FIREBURN.sCmd)
  else g_GameCommand.FIREBURN.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'FireBurn', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'FireBurn', g_GameCommand.FIREBURN.nPermissionMin)
  else g_GameCommand.FIREBURN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TestStatus', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TestStatus', g_GameCommand.TESTSTATUS.sCmd)
  else g_GameCommand.TESTSTATUS.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'TestStatus', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TestStatus', g_GameCommand.TESTSTATUS.nPermissionMin)
  else g_GameCommand.TESTSTATUS.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelGold', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelGold', g_GameCommand.DELGOLD.sCmd)
  else g_GameCommand.DELGOLD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelGold', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelGold', g_GameCommand.DELGOLD.nPermissionMin)
  else g_GameCommand.DELGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AddGold', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AddGold', g_GameCommand.ADDGOLD.sCmd)
  else g_GameCommand.ADDGOLD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AddGold', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AddGold', g_GameCommand.ADDGOLD.nPermissionMin)
  else g_GameCommand.ADDGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelGameGold', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelGameGold', g_GameCommand.DELGAMEGOLD.sCmd)
  else g_GameCommand.DELGAMEGOLD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelGameGold', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelGameGold', g_GameCommand.DELGAMEGOLD.nPermissionMin)
  else g_GameCommand.DELGAMEGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AddGamePoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AddGamePoint', g_GameCommand.ADDGAMEGOLD.sCmd)
  else g_GameCommand.ADDGAMEGOLD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AddGameGold', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AddGameGold', g_GameCommand.ADDGAMEGOLD.nPermissionMin)
  else g_GameCommand.ADDGAMEGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'GameGold', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GameGold', g_GameCommand.GAMEGOLD.sCmd)
  else g_GameCommand.GAMEGOLD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'GameGold', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GameGold', g_GameCommand.GAMEGOLD.nPermissionMin)
  else g_GameCommand.GAMEGOLD.nPermissionMin := nLoadInteger;

//20071226 add
  LoadString := CommandConf.ReadString('Command', 'GAMEDIAMOND', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GAMEDIAMOND', g_GameCommand.GAMEDIAMOND.sCmd)
  else g_GameCommand.GAMEDIAMOND.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'GAMEDIAMOND', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GAMEDIAMOND', g_GameCommand.GAMEDIAMOND.nPermissionMin)
  else g_GameCommand.GAMEDIAMOND.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'GAMEGIRD', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GAMEGIRD', g_GameCommand.GAMEGIRD.sCmd)
  else g_GameCommand.GAMEGIRD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'GAMEGIRD', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GAMEGIRD', g_GameCommand.GAMEGIRD.nPermissionMin)
  else g_GameCommand.GAMEGIRD.nPermissionMin := nLoadInteger;
//20071226 end
//------------------------------------------------------------------------------
//调整人物的荣誉值 20080511
  LoadString := CommandConf.ReadString('Command', 'GAMEGLORY', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GAMEGLORY', g_GameCommand.GAMEGLORY.sCmd)
  else g_GameCommand.GAMEGLORY.sCmd := LoadString;
//------------------------------------------------------------------------------
//调整英雄的忠诚度 20080109
  LoadString := CommandConf.ReadString('Command', 'HEROLOYAL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'HEROLOYAL', '改变忠诚'{g_GameCommand.HEROLOYAL.sCmd})
  else g_GameCommand.HEROLOYAL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'HEROLOYAL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'HEROLOYAL', g_GameCommand.HEROLOYAL.nPermissionMin)
  else g_GameCommand.HEROLOYAL.nPermissionMin := nLoadInteger;
//------------------------------------------------------------------------------

  LoadString := CommandConf.ReadString('Command', 'GamePoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GamePoint', g_GameCommand.GAMEPOINT.sCmd)
  else g_GameCommand.GAMEPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'GamePoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GamePoint', g_GameCommand.GAMEPOINT.nPermissionMin)
  else g_GameCommand.GAMEPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CreditPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CreditPoint', g_GameCommand.CREDITPOINT.sCmd)
  else g_GameCommand.CREDITPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'CreditPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CreditPoint', g_GameCommand.CREDITPOINT.nPermissionMin)
  else g_GameCommand.CREDITPOINT.nPermissionMin := nLoadInteger;

 { LoadString := CommandConf.ReadString('Command', 'TestGoldChange', '');//20080812 注释
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TestGoldChange', g_GameCommand.TESTGOLDCHANGE.sCmd)
  else g_GameCommand.TESTGOLDCHANGE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'TestGoldChange', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TestGoldChange', g_GameCommand.TESTGOLDCHANGE.nPermissionMin)
  else g_GameCommand.TESTGOLDCHANGE.nPermissionMin := nLoadInteger; }

  LoadString := CommandConf.ReadString('Command', 'RefineWeapon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RefineWeapon', g_GameCommand.REFINEWEAPON.sCmd)
  else g_GameCommand.REFINEWEAPON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'RefineWeapon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RefineWeapon', g_GameCommand.REFINEWEAPON.nPermissionMin)
  else g_GameCommand.REFINEWEAPON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadAdmin', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadAdmin', g_GameCommand.RELOADADMIN.sCmd)
  else g_GameCommand.RELOADADMIN.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadAdmin', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadAdmin', g_GameCommand.RELOADADMIN.nPermissionMin)
  else g_GameCommand.RELOADADMIN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadNpc', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadNpc', g_GameCommand.ReLoadNpc.sCmd)
  else g_GameCommand.ReLoadNpc.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadNpc', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadNpc', g_GameCommand.ReLoadNpc.nPermissionMin)
  else g_GameCommand.ReLoadNpc.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadManage', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadManage', g_GameCommand.RELOADMANAGE.sCmd)
  else g_GameCommand.RELOADMANAGE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadManage', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadManage', g_GameCommand.RELOADMANAGE.nPermissionMin)
  else g_GameCommand.RELOADMANAGE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadRobotManage', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadRobotManage', g_GameCommand.RELOADROBOTMANAGE.sCmd)
  else g_GameCommand.RELOADROBOTMANAGE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadRobotManage', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadRobotManage', g_GameCommand.RELOADROBOTMANAGE.nPermissionMin)
  else g_GameCommand.RELOADROBOTMANAGE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadRobot', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadRobot', g_GameCommand.RELOADROBOT.sCmd)
  else g_GameCommand.RELOADROBOT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadRobot', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadRobot', g_GameCommand.RELOADROBOT.nPermissionMin)
  else g_GameCommand.RELOADROBOT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadMonitems', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadMonitems', g_GameCommand.RELOADMONITEMS.sCmd)
  else g_GameCommand.RELOADMONITEMS.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadMonitems', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadMonitems', g_GameCommand.RELOADMONITEMS.nPermissionMin)
  else g_GameCommand.RELOADMONITEMS.nPermissionMin := nLoadInteger;

 { LoadString := CommandConf.ReadString('Command', 'ReloadDiary', '');//20080812 注释
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadDiary', g_GameCommand.RELOADDIARY.sCmd)
  else g_GameCommand.RELOADDIARY.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadDiary', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadDiary', g_GameCommand.RELOADDIARY.nPermissionMin)
  else g_GameCommand.RELOADDIARY.nPermissionMin := nLoadInteger;  }

  LoadString := CommandConf.ReadString('Command', 'ReloadItemDB', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadItemDB', g_GameCommand.RELOADITEMDB.sCmd)
  else g_GameCommand.RELOADITEMDB.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadItemDB', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadItemDB', g_GameCommand.RELOADITEMDB.nPermissionMin)
  else g_GameCommand.RELOADITEMDB.nPermissionMin := nLoadInteger;
  {$IF M2Version <> 2}
  LoadString := CommandConf.ReadString('Command', 'ReloadHumTitleDB', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadHumTitleDB', g_GameCommand.RELOADHUMTITLEDB.sCmd)
  else g_GameCommand.RELOADHUMTITLEDB.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadHumTitleDB', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadHumTitleDB', g_GameCommand.RELOADHUMTITLEDB.nPermissionMin)
  else g_GameCommand.RELOADHUMTITLEDB.nPermissionMin := nLoadInteger;
  {$IFEND}
  LoadString := CommandConf.ReadString('Command', 'ReloadMagicDB', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadMagicDB', g_GameCommand.RELOADMAGICDB.sCmd)
  else g_GameCommand.RELOADMAGICDB.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadMagicDB', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadMagicDB', g_GameCommand.RELOADMAGICDB.nPermissionMin)
  else g_GameCommand.RELOADMAGICDB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadMonsterDB', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadMonsterDB', g_GameCommand.RELOADMONSTERDB.sCmd)
  else g_GameCommand.RELOADMONSTERDB.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadMonsterDB', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadMonsterDB', g_GameCommand.RELOADMONSTERDB.nPermissionMin)
  else g_GameCommand.RELOADMONSTERDB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReAlive', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReAlive', g_GameCommand.ReAlive.sCmd)
  else g_GameCommand.ReAlive.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReAlive', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReAlive', g_GameCommand.ReAlive.nPermissionMin)
  else g_GameCommand.ReAlive.nPermissionMin := nLoadInteger;

//千里传音 20071228 begin
  LoadString := CommandConf.ReadString('Command', 'SysMsg', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SysMsg','传'{g_GameCommand.SysMsg.sCmd})
  else g_GameCommand.SysMsg.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SysMsg', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SysMsg', g_GameCommand.SysMsg.nPermissionMin)
  else g_GameCommand.SysMsg.nPermissionMin := nLoadInteger;


//调整英雄等级 20071227 begin
  LoadString := CommandConf.ReadString('Command', 'HEROLEVEL', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'HEROLEVEL', g_GameCommand.HEROLEVEL.sCmd)
  else g_GameCommand.HEROLEVEL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'HEROLEVEL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'HEROLEVEL', g_GameCommand.HEROLEVEL.nPermissionMin)
  else g_GameCommand.HEROLEVEL.nPermissionMin := nLoadInteger;
//调整英雄等级 20071227 end

  LoadString := CommandConf.ReadString('Command', 'AdjuestTLevel', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AdjuestTLevel', g_GameCommand.ADJUESTLEVEL.sCmd)
  else g_GameCommand.ADJUESTLEVEL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AdjuestTLevel', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AdjuestTLevel', g_GameCommand.ADJUESTLEVEL.nPermissionMin)
  else g_GameCommand.ADJUESTLEVEL.nPermissionMin := nLoadInteger;

//调整人物内功等级 20081221
  LoadString := CommandConf.ReadString('Command', 'NGLevel', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'NGLEVEL', g_GameCommand.NGLEVEL.sCmd)
  else g_GameCommand.NGLEVEL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'NGLEVEL', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'NGLEVEL', g_GameCommand.NGLEVEL.nPermissionMin)
  else g_GameCommand.NGLEVEL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AdjuestExp', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AdjuestExp', g_GameCommand.ADJUESTEXP.sCmd)
  else g_GameCommand.ADJUESTEXP.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AdjuestExp', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AdjuestExp', g_GameCommand.ADJUESTEXP.nPermissionMin)
  else g_GameCommand.ADJUESTEXP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AddGuild', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AddGuild', g_GameCommand.AddGuild.sCmd)
  else g_GameCommand.AddGuild.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AddGuild', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AddGuild', g_GameCommand.AddGuild.nPermissionMin)
  else g_GameCommand.AddGuild.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelGuild', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelGuild', g_GameCommand.DELGUILD.sCmd)
  else g_GameCommand.DELGUILD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelGuild', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelGuild', g_GameCommand.DELGUILD.nPermissionMin)
  else g_GameCommand.DELGUILD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeSabukLord', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeSabukLord', g_GameCommand.CHANGESABUKLORD.sCmd)
  else g_GameCommand.CHANGESABUKLORD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeSabukLord', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeSabukLord', g_GameCommand.CHANGESABUKLORD.nPermissionMin)
  else g_GameCommand.CHANGESABUKLORD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ForcedWallConQuestWar', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ForcedWallConQuestWar', g_GameCommand.FORCEDWALLCONQUESTWAR.sCmd)
  else g_GameCommand.FORCEDWALLCONQUESTWAR.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ForcedWallConQuestWar', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ForcedWallConQuestWar', g_GameCommand.FORCEDWALLCONQUESTWAR.nPermissionMin)
  else g_GameCommand.FORCEDWALLCONQUESTWAR.nPermissionMin := nLoadInteger;

  {LoadString := CommandConf.ReadString('Command', 'AddToItemEvent', '');//20080812 注释
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AddToItemEvent', g_GameCommand.ADDTOITEMEVENT.sCmd)
  else g_GameCommand.ADDTOITEMEVENT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AddToItemEvent', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AddToItemEvent', g_GameCommand.ADDTOITEMEVENT.nPermissionMin)
  else g_GameCommand.ADDTOITEMEVENT.nPermissionMin := nLoadInteger; 

  LoadString := CommandConf.ReadString('Command', 'AddToItemEventAspieces', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AddToItemEventAspieces', g_GameCommand.ADDTOITEMEVENTASPIECES.sCmd)
  else g_GameCommand.ADDTOITEMEVENTASPIECES.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AddToItemEventAspieces', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AddToItemEventAspieces', g_GameCommand.ADDTOITEMEVENTASPIECES.nPermissionMin)
  else g_GameCommand.ADDTOITEMEVENTASPIECES.nPermissionMin := nLoadInteger; 

  LoadString := CommandConf.ReadString('Command', 'ItemEventList', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ItemEventList', g_GameCommand.ItemEventList.sCmd)
  else g_GameCommand.ItemEventList.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ItemEventList', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ItemEventList', g_GameCommand.ItemEventList.nPermissionMin)
  else g_GameCommand.ItemEventList.nPermissionMin := nLoadInteger; 

  LoadString := CommandConf.ReadString('Command', 'StartIngGiftNO', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StartIngGiftNO', g_GameCommand.STARTINGGIFTNO.sCmd)
  else g_GameCommand.STARTINGGIFTNO.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'StartIngGiftNO', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'StartIngGiftNO', g_GameCommand.STARTINGGIFTNO.nPermissionMin)
  else g_GameCommand.STARTINGGIFTNO.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DeleteAllItemEvent', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DeleteAllItemEvent', g_GameCommand.DELETEALLITEMEVENT.sCmd)
  else g_GameCommand.DELETEALLITEMEVENT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DeleteAllItemEvent', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DeleteAllItemEvent', g_GameCommand.DELETEALLITEMEVENT.nPermissionMin)
  else g_GameCommand.DELETEALLITEMEVENT.nPermissionMin := nLoadInteger; 

  LoadString := CommandConf.ReadString('Command', 'StartItemEvent', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StartItemEvent', g_GameCommand.STARTITEMEVENT.sCmd)
  else g_GameCommand.STARTITEMEVENT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'StartItemEvent', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'StartItemEvent', g_GameCommand.STARTITEMEVENT.nPermissionMin)
  else g_GameCommand.STARTITEMEVENT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ItemEventTerm', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ItemEventTerm', g_GameCommand.ITEMEVENTTERM.sCmd)
  else g_GameCommand.ITEMEVENTTERM.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ItemEventTerm', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ItemEventTerm', g_GameCommand.ITEMEVENTTERM.nPermissionMin)
  else g_GameCommand.ITEMEVENTTERM.nPermissionMin := nLoadInteger; }

  LoadString := CommandConf.ReadString('Command', 'AdjuestTestLevel', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AdjuestTestLevel', g_GameCommand.ADJUESTTESTLEVEL.sCmd)
  else g_GameCommand.ADJUESTTESTLEVEL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AdjuestTestLevel', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AdjuestTestLevel', g_GameCommand.ADJUESTTESTLEVEL.nPermissionMin)
  else g_GameCommand.ADJUESTTESTLEVEL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'OpTraining', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'OpTraining', g_GameCommand.TRAININGSKILL.sCmd)
  else g_GameCommand.TRAININGSKILL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'OpTraining', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'OpTraining', g_GameCommand.TRAININGSKILL.nPermissionMin)
  else g_GameCommand.TRAININGSKILL.nPermissionMin := nLoadInteger;

  {LoadString := CommandConf.ReadString('Command', 'OpDeleteSkill', '');//20080812 注释
  if LoadString = '' then
    CommandConf.WriteString('Command', 'OpDeleteSkill', g_GameCommand.OPDELETESKILL.sCmd)
  else g_GameCommand.OPDELETESKILL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'OpDeleteSkill', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'OpDeleteSkill', g_GameCommand.OPDELETESKILL.nPermissionMin)
  else g_GameCommand.OPDELETESKILL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeWeaponDura', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeWeaponDura', g_GameCommand.CHANGEWEAPONDURA.sCmd)
  else g_GameCommand.CHANGEWEAPONDURA.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeWeaponDura', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeWeaponDura', g_GameCommand.CHANGEWEAPONDURA.nPermissionMin)
  else g_GameCommand.CHANGEWEAPONDURA.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadGuildAll', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadGuildAll', g_GameCommand.RELOADGUILDALL.sCmd)
  else g_GameCommand.RELOADGUILDALL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadGuildAll', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadGuildAll', g_GameCommand.RELOADGUILDALL.nPermissionMin)
  else g_GameCommand.RELOADGUILDALL.nPermissionMin := nLoadInteger; }

  LoadString := CommandConf.ReadString('Command', 'Who', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Who', g_GameCommand.WHO.sCmd)
  else g_GameCommand.WHO.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'Who', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Who', g_GameCommand.WHO.nPermissionMin)
  else g_GameCommand.WHO.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Total', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Total', g_GameCommand.TOTAL.sCmd)
  else g_GameCommand.TOTAL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Total', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Total', g_GameCommand.TOTAL.nPermissionMin)
  else g_GameCommand.TOTAL.nPermissionMin := nLoadInteger;

  {LoadString := CommandConf.ReadString('Command', 'TestGa', '');//20081014 注释
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TestGa', g_GameCommand.TESTGA.sCmd)
  else g_GameCommand.TESTGA.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'TestGa', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TestGa', g_GameCommand.TESTGA.nPermissionMin)
  else g_GameCommand.TESTGA.nPermissionMin := nLoadInteger; }

  LoadString := CommandConf.ReadString('Command', 'MapInfo', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MapInfo', g_GameCommand.MAPINFO.sCmd)
  else g_GameCommand.MAPINFO.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MapInfo', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MapInfo', g_GameCommand.MAPINFO.nPermissionMin)
  else g_GameCommand.MAPINFO.nPermissionMin := nLoadInteger;

  {LoadString := CommandConf.ReadString('Command', 'SbkDoor', '');//20080812 注释
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SbkDoor', g_GameCommand.SBKDOOR.sCmd)
  else g_GameCommand.SBKDOOR.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SbkDoor', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SbkDoor', g_GameCommand.SBKDOOR.nPermissionMin)
  else g_GameCommand.SBKDOOR.nPermissionMin := nLoadInteger;}

  LoadString := CommandConf.ReadString('Command', 'ChangeDearName', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeDearName', g_GameCommand.CHANGEDEARNAME.sCmd)
  else g_GameCommand.CHANGEDEARNAME.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeDearName', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeDearName', g_GameCommand.CHANGEDEARNAME.nPermissionMin)
  else g_GameCommand.CHANGEDEARNAME.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeMasterName', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeMasterrName', g_GameCommand.CHANGEMASTERNAME.sCmd)
  else g_GameCommand.CHANGEMASTERNAME.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeMasterName', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeMasterName', g_GameCommand.CHANGEMASTERNAME.nPermissionMin)
  else g_GameCommand.CHANGEMASTERNAME.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'StartQuest', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StartQuest', g_GameCommand.STARTQUEST.sCmd)
  else g_GameCommand.STARTQUEST.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'StartQuest', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'StartQuest', g_GameCommand.STARTQUEST.nPermissionMin)
  else g_GameCommand.STARTQUEST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SetPermission', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SetPermission', g_GameCommand.SETPERMISSION.sCmd)
  else g_GameCommand.SETPERMISSION.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SetPermission', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SetPermission', g_GameCommand.SETPERMISSION.nPermissionMin)
  else g_GameCommand.SETPERMISSION.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ClearMon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ClearMon', g_GameCommand.CLEARMON.sCmd)
  else g_GameCommand.CLEARMON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ClearMon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ClearMon', g_GameCommand.CLEARMON.nPermissionMin)
  else g_GameCommand.CLEARMON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReNewLevel', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReNewLevel', g_GameCommand.RENEWLEVEL.sCmd)
  else g_GameCommand.RENEWLEVEL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReNewLevel', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReNewLevel', g_GameCommand.RENEWLEVEL.nPermissionMin)
  else g_GameCommand.RENEWLEVEL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DenyIPaddrLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DenyIPaddrLogon', g_GameCommand.DENYIPLOGON.sCmd)
  else g_GameCommand.DENYIPLOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DenyIPaddrLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DenyIPaddrLogon', g_GameCommand.DENYIPLOGON.nPermissionMin)
  else g_GameCommand.DENYIPLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DenyAccountLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DenyAccountLogon', g_GameCommand.DENYACCOUNTLOGON.sCmd)
  else g_GameCommand.DENYACCOUNTLOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DenyAccountLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DenyAccountLogon', g_GameCommand.DENYACCOUNTLOGON.nPermissionMin)
  else g_GameCommand.DENYACCOUNTLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DenyCharNameLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DenyCharNameLogon', g_GameCommand.DENYCHARNAMELOGON.sCmd)
  else g_GameCommand.DENYCHARNAMELOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DenyCharNameLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DenyCharNameLogon', g_GameCommand.DENYCHARNAMELOGON.nPermissionMin)
  else g_GameCommand.DENYCHARNAMELOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelDenyIPLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelDenyIPLogon', g_GameCommand.DELDENYIPLOGON.sCmd)
  else g_GameCommand.DELDENYIPLOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelDenyIPLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelDenyIPLogon', g_GameCommand.DELDENYIPLOGON.nPermissionMin)
  else g_GameCommand.DELDENYIPLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelDenyAccountLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelDenyAccountLogon', g_GameCommand.DELDENYACCOUNTLOGON.sCmd)
  else g_GameCommand.DELDENYACCOUNTLOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelDenyAccountLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelDenyAccountLogon', g_GameCommand.DELDENYACCOUNTLOGON.nPermissionMin)
  else g_GameCommand.DELDENYACCOUNTLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelDenyCharNameLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelDenyCharNameLogon', g_GameCommand.DELDENYCHARNAMELOGON.sCmd)
  else g_GameCommand.DELDENYCHARNAMELOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelDenyCharNameLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelDenyCharNameLogon', g_GameCommand.DELDENYCHARNAMELOGON.nPermissionMin)
  else g_GameCommand.DELDENYCHARNAMELOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ShowDenyIPLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ShowDenyIPLogon', g_GameCommand.SHOWDENYIPLOGON.sCmd)
  else g_GameCommand.SHOWDENYIPLOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ShowDenyIPLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ShowDenyIPLogon', g_GameCommand.SHOWDENYIPLOGON.nPermissionMin)
  else g_GameCommand.SHOWDENYIPLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ShowDenyAccountLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ShowDenyAccountLogon', g_GameCommand.SHOWDENYACCOUNTLOGON.sCmd)
  else g_GameCommand.SHOWDENYACCOUNTLOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ShowDenyAccountLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ShowDenyAccountLogon', g_GameCommand.SHOWDENYACCOUNTLOGON.nPermissionMin)
  else g_GameCommand.SHOWDENYACCOUNTLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ShowDenyCharNameLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ShowDenyCharNameLogon', g_GameCommand.SHOWDENYCHARNAMELOGON.sCmd)
  else g_GameCommand.SHOWDENYCHARNAMELOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ShowDenyCharNameLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ShowDenyCharNameLogon', g_GameCommand.SHOWDENYCHARNAMELOGON.nPermissionMin)
  else g_GameCommand.SHOWDENYCHARNAMELOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ViewWhisper', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ViewWhisper', g_GameCommand.VIEWWHISPER.sCmd)
  else g_GameCommand.VIEWWHISPER.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ViewWhisper', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ViewWhisper', g_GameCommand.VIEWWHISPER.nPermissionMin)
  else g_GameCommand.VIEWWHISPER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SpiritStart', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SpiritStart', g_GameCommand.SPIRIT.sCmd)
  else g_GameCommand.SPIRIT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SpiritStart', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SpiritStart', g_GameCommand.SPIRIT.nPermissionMin)
  else g_GameCommand.SPIRIT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SpiritStop', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SpiritStop', g_GameCommand.SPIRITSTOP.sCmd)
  else g_GameCommand.SPIRITSTOP.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SpiritStop', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SpiritStop', g_GameCommand.SPIRITSTOP.nPermissionMin)
  else g_GameCommand.SPIRITSTOP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SetMapMode', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SetMapMode', g_GameCommand.SetMapMode.sCmd)
  else g_GameCommand.SetMapMode.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SetMapMode', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SetMapMode', g_GameCommand.SetMapMode.nPermissionMin)
  else g_GameCommand.SetMapMode.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ShoweMapMode', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ShoweMapMode', g_GameCommand.SHOWMAPMODE.sCmd)
  else g_GameCommand.SHOWMAPMODE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ShoweMapMode', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ShoweMapMode', g_GameCommand.SHOWMAPMODE.nPermissionMin)
  else g_GameCommand.SHOWMAPMODE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ClearBag', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ClearBag', g_GameCommand.CLEARBAG.sCmd)
  else g_GameCommand.CLEARBAG.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ClearBag', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ClearBag', g_GameCommand.CLEARBAG.nPermissionMin)
  else g_GameCommand.CLEARBAG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RemoteMsg', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RemoteMsg', g_GameCommand.REMTEMSG.sCmd)
  else g_GameCommand.REMTEMSG.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'RemoteMsg', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RemoteMsg', g_GameCommand.REMTEMSG.nPermissionMin)
  else g_GameCommand.REMTEMSG.nPermissionMin := nLoadInteger;


  LoadString := CommandConf.ReadString('Command', 'ColorSay', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ColorSay', g_GameCommand.COLORSAY.sCmd)
  else g_GameCommand.COLORSAY.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ColorSay', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ColorSay', g_GameCommand.COLORSAY.nPermissionMin)
  else g_GameCommand.COLORSAY.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SETCOLORSAY', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SETCOLORSAY', g_GameCommand.SETCOLORSAY.sCmd)
  else g_GameCommand.SETCOLORSAY.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SETCOLORSAY', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SETCOLORSAY', g_GameCommand.SETCOLORSAY.nPermissionMin)
  else g_GameCommand.SETCOLORSAY.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AllowRebirth', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AllowReAlive', g_GameCommand.AllowReAlive.sCmd)
  else g_GameCommand.AllowReAlive.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AllowReAlive', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AllowReAlive', g_GameCommand.AllowReAlive.nPermissionMin)
  else g_GameCommand.AllowReAlive.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'USERITEM', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'USERITEM', g_GameCommand.UserItem.sCmd)
  else g_GameCommand.UserItem.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'USERITEM', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'USERITEM', g_GameCommand.UserItem.nPermissionMin)
  else g_GameCommand.UserItem.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SIGNMOVE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SIGNMOVE', g_GameCommand.SIGNMOVE.sCmd)
  else g_GameCommand.SIGNMOVE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SIGNMOVE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SIGNMOVE', g_GameCommand.SIGNMOVE.nPermissionMin)
  else g_GameCommand.SIGNMOVE.nPermissionMin := nLoadInteger;

//20080816 清理指定玩家复制品
  LoadString := CommandConf.ReadString('Command', 'CLEARCOPYITEM', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CLEARCOPYITEM', g_GameCommand.CLEARCOPYITEM.sCmd)
  else g_GameCommand.CLEARCOPYITEM.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'CLEARCOPYITEM', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CLEARCOPYITEM', g_GameCommand.CLEARCOPYITEM.nPermissionMin)
  else g_GameCommand.CLEARCOPYITEM.nPermissionMin := nLoadInteger;

{$IF M2Version <> 2}
  LoadString := CommandConf.ReadString('Command', 'CLEARHUMTITLE', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CLEARHUMTITLE', g_GameCommand.CLEARHUMTITLE.sCmd)
  else g_GameCommand.CLEARHUMTITLE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'CLEARHUMTITLE', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CLEARHUMTITLE', g_GameCommand.CLEARHUMTITLE.nPermissionMin)
  else g_GameCommand.CLEARHUMTITLE.nPermissionMin := nLoadInteger;
{$IFEND}
  LoadString := CommandConf.ReadString('Command', 'SHOWEFFECT', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SHOWEFFECT', g_GameCommand.SHOWEFFECT.sCmd)
  else g_GameCommand.SHOWEFFECT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SHOWEFFECT', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SHOWEFFECT', g_GameCommand.SHOWEFFECT.nPermissionMin)
  else g_GameCommand.SHOWEFFECT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'LockLogin', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LockLogin', g_GameCommand.LOCKLOGON.sCmd)
  else g_GameCommand.LOCKLOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'LockLogin', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'LockLogin', g_GameCommand.LOCKLOGON.nPermissionMin)
  else g_GameCommand.LOCKLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'GMRedMsgCmd', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GMRedMsgCmd', g_GMRedMsgCmd)
  else g_GMRedMsgCmd := LoadString[1];
  nLoadInteger := CommandConf.ReadInteger('Permission', 'GMRedMsgCmd', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GMRedMsgCmd', g_nGMREDMSGCMD)
  else g_nGMREDMSGCMD := nLoadInteger;
end;

procedure LoadString();
  function LoadConfigString(sSection, sIdent, sDefault: string): string;
  var
    sString: string;
  begin
    sString := StringConf.ReadString(sSection, sIdent, 'NoString');
    if sString = 'NoString' then begin
      StringConf.WriteString(sSection, sIdent, sDefault);
      Result := sDefault;
    end else begin
      Result := sString;
    end;
  end;
var
  LoadString: string;
begin
  LoadString := StringConf.ReadString('String', 'ClientSoftVersionError', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ClientSoftVersionError', sClientSoftVersionError)
  else sClientSoftVersionError := LoadString;

  LoadString := StringConf.ReadString('String', 'DownLoadNewClientSoft', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DownLoadNewClientSoft', sDownLoadNewClientSoft)
  else sDownLoadNewClientSoft := LoadString;

  LoadString := StringConf.ReadString('String', 'ForceDisConnect', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ForceDisConnect', sForceDisConnect)
  else sForceDisConnect := LoadString;

(*  {$IF M2Version = 2}
  LoadString := StringConf.ReadString('String', 'PayMentPointOver', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PayMentPointOver', sPayMentPointOver)
  else sPayMentPointOver := LoadString;
  {$IFEND}        *)

  LoadString := StringConf.ReadString('String', 'ClientSoftVersionTooOld', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ClientSoftVersionTooOld', sClientSoftVersionTooOld)
  else sClientSoftVersionTooOld := LoadString;

  LoadString := StringConf.ReadString('String', 'DownLoadAndUseNewClient', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DownLoadAndUseNewClient', sDownLoadAndUseNewClient)
  else sDownLoadAndUseNewClient := LoadString;

  LoadString := StringConf.ReadString('String', 'OnlineUserFull', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'OnlineUserFull', sOnlineUserFull)
  else sOnlineUserFull := LoadString;

  LoadString := StringConf.ReadString('String', 'YouNowIsTryPlayMode', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YouNowIsTryPlayMode', sYouNowIsTryPlayMode)
  else sYouNowIsTryPlayMode := LoadString;

  LoadString := StringConf.ReadString('String', 'NowIsFreePlayMode', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'NowIsFreePlayMode', g_sNowIsFreePlayMode)
  else g_sNowIsFreePlayMode := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfDear', '');//夫妻攻击模式 20080409
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfDear', sAttackModeOfDear)
  else sAttackModeOfDear := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfMaster', '');//师徒攻击模式 20080409
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfMaster', sAttackModeOfMaster)
  else sAttackModeOfMaster := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfAll', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfAll', sAttackModeOfAll)
  else sAttackModeOfAll := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfPeaceful', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfPeaceful', sAttackModeOfPeaceful)
  else sAttackModeOfPeaceful := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfGroup', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfGroup', sAttackModeOfGroup)
  else sAttackModeOfGroup := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfGuild', sAttackModeOfGuild)
  else sAttackModeOfGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfRedWhite', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfRedWhite', sAttackModeOfRedWhite)
  else sAttackModeOfRedWhite := LoadString;

  {$IF M2Version <> 2}
  LoadString := StringConf.ReadString('String', 'AttackModeOfDivision', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfDivision', sAttackModeOfDivision)
  else sAttackModeOfDivision := LoadString;
  {$IFEND}

  LoadString := StringConf.ReadString('String', 'StartChangeAttackModeHelp', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'StartChangeAttackModeHelp', sStartChangeAttackModeHelp)
  else sStartChangeAttackModeHelp := LoadString;

  LoadString := StringConf.ReadString('String', 'StartNoticeMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'StartNoticeMsg', sStartNoticeMsg)
  else sStartNoticeMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ThrustingOn', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ThrustingOn', sThrustingOn)
  else sThrustingOn := LoadString;

  LoadString := StringConf.ReadString('String', 'ThrustingOff', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ThrustingOff', sThrustingOff)
  else sThrustingOff := LoadString;

  LoadString := StringConf.ReadString('String', 'HalfMoonOn', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'HalfMoonOn', sHalfMoonOn)
  else sHalfMoonOn := LoadString;

  LoadString := StringConf.ReadString('String', 'HalfMoonOff', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'HalfMoonOff', sHalfMoonOff)
  else sHalfMoonOff := LoadString;

  LoadString := StringConf.ReadString('String', 'HalfMoonOn4', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'HalfMoonOn4', sHalfMoonOn4)
  else sHalfMoonOn4 := LoadString;

  LoadString := StringConf.ReadString('String', 'HalfMoonOff4', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'HalfMoonOff4', sHalfMoonOff4)
  else sHalfMoonOff4 := LoadString;

  sCrsHitOn := LoadConfigString('String', 'CrsHitOn', sCrsHitOn);
  sCrsHitOff := LoadConfigString('String', 'CrsHitOff', sCrsHitOff);

  sSkill43On := LoadConfigString('String', 'TwinSkillSummoned2', sSkill43On);
  sSkill43Off := LoadConfigString('String', 'TwinSkillsFail2', sSkill43Off);

  sSkill42On:= LoadConfigString('String', 'KTZSpiritsSummoned', sSkill42On);
  sSkill42Off:= LoadConfigString('String', 'KTZSpiritsGone', sSkill42Off);
{$IF M2Version <> 2}
  sHeartUpLevelHit:= LoadConfigString('String', 'HeartUpLevelHit', sHeartUpLevelHit);
  sIncreaseSkillLevel := LoadConfigString('String', 'IncreaseSkillLevel', sIncreaseSkillLevel);
  sSavvyHeartOK := LoadConfigString('String', 'SavvyHeartOK', sSavvyHeartOK);
  sActivMemberHeart := LoadConfigString('String', 'ActivMemberHeart', sActivMemberHeart);
  sSkill105Fail := LoadConfigString('String', 'Skill105Fail', sSkill105Fail);
  sSkill69On := LoadConfigString('String', 'HeavenHitOn', sSkill69On);
  sSkill69Off := LoadConfigString('String', 'HeavenHitOff', sSkill69Off);

  sSkill101On := LoadConfigString('String', 'Skill101On', sSkill101On);
  sSkill101Off := LoadConfigString('String', 'Skill101Off', sSkill101Off);
  sSkill101Off1 := LoadConfigString('String', 'Skill101Off1', sSkill101Off1);

  sSkill102On := LoadConfigString('String', 'Skill102On', sSkill102On);
  sSkill102Off := LoadConfigString('String', 'Skill102Off', sSkill102Off);
  sSkill102Off1 := LoadConfigString('String', 'Skill102Off1', sSkill102Off1);
{$IFEND}
  LoadString := StringConf.ReadString('String', 'FireSpiritsSummoned', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'FireSpiritsSummoned', sFireSpiritsSummoned)
  else sFireSpiritsSummoned := LoadString;

  LoadString := StringConf.ReadString('String', 'FireSpiritsFail', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'FireSpiritsFail', sFireSpiritsFail)
  else sFireSpiritsFail := LoadString;

  LoadString := StringConf.ReadString('String', 'SpiritsGone', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'SpiritsGone', sSpiritsGone)
  else sSpiritsGone := LoadString;

  LoadString := StringConf.ReadString('String', 'DailySuSlaveFail', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DailySuSlaveFail', sDailySuSlaveFail)
  else sDailySuSlaveFail := LoadString;

  LoadString := StringConf.ReadString('String', 'DailySkillSummoned', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DailySkillSummoned', sDailySkillSummoned)
  else sDailySkillSummoned := LoadString;

  LoadString := StringConf.ReadString('String', 'DailySkillFail', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DailySkillFail', sDailySkillFail)
  else sDailySkillFail := LoadString;

  LoadString := StringConf.ReadString('String', 'DailySpiritsGone', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DailySpiritsGone', sDailySpiritsGone)
  else sDailySpiritsGone := LoadString;

  LoadString := StringConf.ReadString('String', 'BloodSoulSkillSummoned', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'BloodSoulSkillSummoned', sBloodSoulSkillSummoned)
  else sBloodSoulSkillSummoned := LoadString;

  LoadString := StringConf.ReadString('String', 'BloodSoulSkillFail', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'BloodSoulSkillFail', sBloodSoulSkillFail)
  else sBloodSoulSkillFail := LoadString;

  LoadString := StringConf.ReadString('String', 'BloodSoulSpiritsGone', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'BloodSoulSpiritsGone', sBloodSoulSpiritsGone)
  else sBloodSoulSpiritsGone := LoadString;

  LoadString := StringConf.ReadString('String', 'MateDoTooweak', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'MateDoTooweak', sMateDoTooweak)
  else sMateDoTooweak := LoadString;

  LoadString := StringConf.ReadString('String', 'TheWeaponBroke', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'TheWeaponBroke', g_sTheWeaponBroke)
  else g_sTheWeaponBroke := LoadString;

  LoadString := StringConf.ReadString('String', 'TheWeaponRefineSuccessfull', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'TheWeaponRefineSuccessfull', sTheWeaponRefineSuccessfull)
  else sTheWeaponRefineSuccessfull := LoadString;

  LoadString := StringConf.ReadString('String', 'AutoSendMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'AutoSendMsg', sAutoSendMsg)
  else sAutoSendMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouPoisoned', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YouPoisoned', sYouPoisoned)
  else sYouPoisoned := LoadString;

  LoadString := StringConf.ReadString('String', 'DecRunTime', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DecRunTime', sDecRunTime)
  else sDecRunTime := LoadString;

  LoadString := StringConf.ReadString('String', 'YouPoisonedSpider', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YouPoisonedSpider', sYouPoisonedSpider)
  else sYouPoisonedSpider := LoadString;

  LoadString := StringConf.ReadString('String', 'YouPoisonedFreeze', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YouPoisonedFreeze', sYouPoisonedFreeze)
  else sYouPoisonedFreeze := LoadString;

  LoadString := StringConf.ReadString('String', 'GetSellOffGlod', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'GetSellOffGlod', sGetSellOffGlod)
  else sGetSellOffGlod := LoadString;

  LoadString := StringConf.ReadString('String', 'ButchEnoughBagHintMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ButchEnoughBagHintMsg', sButchEnoughBagHintMsg)
  else sButchEnoughBagHintMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'HumLevelOrderDropMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'HumLevelOrderDropMsg', sHumLevelOrderDropMsg)
  else sHumLevelOrderDropMsg := LoadString;
{$IF M2Version <> 2}
  LoadString := StringConf.ReadString('String', 'RefineItemSuccess', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'RefineItemSuccess', sRefineItemSuccessMsg)
  else sRefineItemSuccessMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'RefineItemFail', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'RefineItemFail', sRefineItemFailMsg)
  else sRefineItemFailMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'RefineItemError', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'RefineItemError', sRefineItemErrorMsg)
  else sRefineItemErrorMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'JudgeItemsMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'JudgeItemsMsg', sJudgeItemsMsg)
  else sJudgeItemsMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'AutoFindMonMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'AutoFindMonMsg', sAutoFindMonMsg)
  else sAutoFindMonMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'AutoFindMonMsg1', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'AutoFindMonMsg1', sAutoFindMonMsg1)
  else sAutoFindMonMsg1 := LoadString;

  LoadString := StringConf.ReadString('String', 'DigJewelItemMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DigJewelItemMsg', sDigJewelItemMsg)
  else sDigJewelItemMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MapIncCritMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'MapIncCritMsg', sMapIncCritMsg)
  else sMapIncCritMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MapPaekMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'MapPaekMsg', sMapPaekMsg)
  else sMapPaekMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MapPaekMsg1', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'MapPaekMsg1', sMapPaekMsg1)
  else sMapPaekMsg1 := LoadString;
{$IFEND}
  LoadString := StringConf.ReadString('String', 'NeedLevelToXYErrorMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'NeedLevelToXYErrorMsg', sNEEDLEVELToXYErrorMsg)
  else sNEEDLEVELToXYErrorMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PetRest', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'PetRest', sPetRest)
  else sPetRest := LoadString;

  LoadString := StringConf.ReadString('String', 'PetAttack', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'PetAttack', sPetAttack)
  else sPetAttack := LoadString;

  LoadString := StringConf.ReadString('String', 'WearNotOfWoMan', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'WearNotOfWoMan', sWearNotOfWoMan)
  else sWearNotOfWoMan := LoadString;

  LoadString := StringConf.ReadString('String', 'WearNotOfMan', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'WearNotOfMan', sWearNotOfMan)
  else sWearNotOfMan := LoadString;

  LoadString := StringConf.ReadString('String', 'HandWeightNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'HandWeightNot', sHandWeightNot)
  else sHandWeightNot := LoadString;

  LoadString := StringConf.ReadString('String', 'WearWeightNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'WearWeightNot', sWearWeightNot)
  else sWearWeightNot := LoadString;

  LoadString := StringConf.ReadString('String', 'ItemIsNotThisAccount', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ItemIsNotThisAccount', g_sItemIsNotThisAccount)
  else g_sItemIsNotThisAccount := LoadString;

  LoadString := StringConf.ReadString('String', 'ItemIsNotThisIPaddr', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ItemIsNotThisIPaddr', g_sItemIsNotThisIPaddr)
  else g_sItemIsNotThisIPaddr := LoadString;

  LoadString := StringConf.ReadString('String', 'ItemIsNotThisCharName', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ItemIsNotThisCharName', g_sItemIsNotThisCharName)
  else g_sItemIsNotThisCharName := LoadString;

  LoadString := StringConf.ReadString('String', 'LevelNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'LevelNot', g_sLevelNot)
  else g_sLevelNot := LoadString;

  LoadString := StringConf.ReadString('String', 'JobOrLevelNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'JobOrLevelNot', g_sJobOrLevelNot)
  else g_sJobOrLevelNot := LoadString;

  LoadString := StringConf.ReadString('String', 'JobOrDCNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'JobOrDCNot', g_sJobOrDCNot)
  else g_sJobOrDCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'JobOrMCNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'JobOrMCNot', g_sJobOrMCNot)
  else g_sJobOrMCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'JobOrSCNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'JobOrSCNot', g_sJobOrSCNot)
  else g_sJobOrSCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'DCNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DCNot', g_sDCNot)
  else g_sDCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'MCNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'MCNot', g_sMCNot)
  else g_sMCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'SCNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'SCNot', g_sSCNot)
  else g_sSCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'CreditPointNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'CreditPointNot', g_sCreditPointNot)
  else g_sCreditPointNot := LoadString;

  LoadString := StringConf.ReadString('String', 'ReNewLevelNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ReNewLevelNot', g_sReNewLevelNot)
  else g_sReNewLevelNot := LoadString;

  LoadString := StringConf.ReadString('String', 'GuildNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'GuildNot', g_sGuildNot)
  else g_sGuildNot := LoadString;

  LoadString := StringConf.ReadString('String', 'GuildMasterNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'GuildMasterNot', g_sGuildMasterNot)
  else g_sGuildMasterNot := LoadString;

  LoadString := StringConf.ReadString('String', 'SabukHumanNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'SabukHumanNot', g_sSabukHumanNot)
  else g_sSabukHumanNot := LoadString;

  LoadString := StringConf.ReadString('String', 'SabukMasterManNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'SabukMasterManNot', g_sSabukMasterManNot)
  else g_sSabukMasterManNot := LoadString;

  LoadString := StringConf.ReadString('String', 'MemberNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'MemberNot', g_sMemberNot)
  else g_sMemberNot := LoadString;

  LoadString := StringConf.ReadString('String', 'MemberTypeNot', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'MemberTypeNot', g_sMemberTypeNot)
  else g_sMemberTypeNot := LoadString;

  LoadString := StringConf.ReadString('String', 'HeroCanUse', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'HeroCanUse', g_sHeroCanUse)
  else g_sHeroCanUse := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotUseDrugOnThisMap', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'CanotUseDrugOnThisMap', sCanotUseDrugOnThisMap)
  else sCanotUseDrugOnThisMap := LoadString;

  LoadString := StringConf.ReadString('String', 'GameMasterMode', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'GameMasterMode', sGameMasterMode)
  else sGameMasterMode := LoadString;

  LoadString := StringConf.ReadString('String', 'ReleaseGameMasterMode', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ReleaseGameMasterMode', sReleaseGameMasterMode)
  else sReleaseGameMasterMode := LoadString;

  LoadString := StringConf.ReadString('String', 'ObserverMode', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ObserverMode', sObserverMode)
  else sObserverMode := LoadString;

  LoadString := StringConf.ReadString('String', 'ReleaseObserverMode', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ReleaseObserverMode', g_sReleaseObserverMode)
  else g_sReleaseObserverMode := LoadString;

  LoadString := StringConf.ReadString('String', 'SupermanMode', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'SupermanMode', sSupermanMode)
  else sSupermanMode := LoadString;

  LoadString := StringConf.ReadString('String', 'ReleaseSupermanMode', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ReleaseSupermanMode', sReleaseSupermanMode)
  else sReleaseSupermanMode := LoadString;

  LoadString := StringConf.ReadString('String', 'YouFoundNothing', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YouFoundNothing', sYouFoundNothing)
  else sYouFoundNothing := LoadString;

  LoadString := StringConf.ReadString('String', 'LineNoticePreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'LineNoticePreFix', g_Config.sLineNoticePreFix)
  else g_Config.sLineNoticePreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'SysMsgPreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SysMsgPreFix', g_Config.sSysMsgPreFix)
  else g_Config.sSysMsgPreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'GuildMsgPreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GuildMsgPreFix', g_Config.sGuildMsgPreFix)
  else g_Config.sGuildMsgPreFix := LoadString;

  {$IF M2Version <> 2}
  LoadString := StringConf.ReadString('String', 'DivisionMsgPreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DivisionMsgPreFix', g_Config.sDivisionMsgPreFix)
  else g_Config.sDivisionMsgPreFix := LoadString;
  {$IFEND}

  LoadString := StringConf.ReadString('String', 'GroupMsgPreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GroupMsgPreFix', g_Config.sGroupMsgPreFix)
  else g_Config.sGroupMsgPreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'HintMsgPreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HintMsgPreFix', g_Config.sHintMsgPreFix)
  else g_Config.sHintMsgPreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'GMRedMsgpreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GMRedMsgpreFix', g_Config.sGMRedMsgpreFix)
  else g_Config.sGMRedMsgpreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'MonSayMsgpreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MonSayMsgpreFix', g_Config.sMonSayMsgpreFix)
  else g_Config.sMonSayMsgpreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'CustMsgpreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CustMsgpreFix', g_Config.sCustMsgpreFix)
  else g_Config.sCustMsgpreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'CastleMsgpreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CastleMsgpreFix', g_Config.sCastleMsgpreFix)
  else g_Config.sCastleMsgpreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'NoPasswordLockSystemMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'NoPasswordLockSystemMsg', g_sNoPasswordLockSystemMsg)
  else g_sNoPasswordLockSystemMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'AlreadySetPassword', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'AlreadySetPassword', g_sAlreadySetPasswordMsg)
  else g_sAlreadySetPasswordMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ReSetPassword', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ReSetPassword', g_sReSetPasswordMsg)
  else g_sReSetPasswordMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PasswordOverLong', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'PasswordOverLong', g_sPasswordOverLongMsg)
  else g_sPasswordOverLongMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ReSetPasswordOK', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ReSetPasswordOK', g_sReSetPasswordOKMsg)
  else g_sReSetPasswordOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ReSetPasswordNotMatch', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ReSetPasswordNotMatch', g_sReSetPasswordNotMatchMsg)
  else g_sReSetPasswordNotMatchMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PleaseInputUnLockPassword', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'PleaseInputUnLockPassword', g_sPleaseInputUnLockPasswordMsg)
  else g_sPleaseInputUnLockPasswordMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StorageUnLockOK', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'StorageUnLockOK', g_sStorageUnLockOKMsg)
  else g_sStorageUnLockOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StorageAlreadyUnLock', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'StorageAlreadyUnLock', g_sStorageAlreadyUnLockMsg)
  else g_sStorageAlreadyUnLockMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StorageNoPassword', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'StorageNoPassword', g_sStorageNoPasswordMsg)
  else g_sStorageNoPasswordMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UnLockPasswordFail', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'UnLockPasswordFail', g_sUnLockPasswordFailMsg)
  else g_sUnLockPasswordFailMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'LockStorageSuccess', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'LockStorageSuccess', g_sLockStorageSuccessMsg)
  else g_sLockStorageSuccessMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StoragePasswordClearMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'StoragePasswordClearMsg', g_sStoragePasswordClearMsg)
  else g_sStoragePasswordClearMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PleaseUnloadStoragePasswordMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'PleaseUnloadStoragePasswordMsg', g_sPleaseUnloadStoragePasswordMsg)
  else g_sPleaseUnloadStoragePasswordMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StorageAlreadyLock', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'StorageAlreadyLock', g_sStorageAlreadyLockMsg)
  else g_sStorageAlreadyLockMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StoragePasswordLocked', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'StoragePasswordLocked', g_sStoragePasswordLockedMsg)
  else g_sStoragePasswordLockedMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StorageSetPassword', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'StorageSetPassword', g_sSetPasswordMsg)
  else g_sSetPasswordMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PleaseInputOldPassword', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'PleaseInputOldPassword', g_sPleaseInputOldPasswordMsg)
  else g_sPleaseInputOldPasswordMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PasswordIsClearMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'PasswordIsClearMsg', g_sOldPasswordIsClearMsg)
  else g_sOldPasswordIsClearMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'NoPasswordSet', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'NoPasswordSet', g_sNoPasswordSetMsg)
  else g_sNoPasswordSetMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'OldPasswordIncorrect', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'OldPasswordIncorrect', g_sOldPasswordIncorrectMsg)
  else g_sOldPasswordIncorrectMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StorageIsLocked', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StorageIsLocked', g_sStorageIsLockedMsg)
  else g_sStorageIsLockedMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PleaseTryDealLaterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PleaseTryDealLaterMsg', g_sPleaseTryDealLaterMsg)
  else g_sPleaseTryDealLaterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DealItemsDenyGetBackMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DealItemsDenyGetBackMsg', g_sDealItemsDenyGetBackMsg)
  else g_sDealItemsDenyGetBackMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableDealItemsMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableDealItemsMsg', g_sDisableDealItemsMsg)
  else g_sDisableDealItemsMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotTryDealMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotTryDealMsg', g_sCanotTryDealMsg)
  else g_sCanotTryDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DealActionCancelMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DealActionCancelMsg', g_sDealActionCancelMsg)
  else g_sDealActionCancelMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PoseDisableDealMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'PoseDisableDealMsg', g_sPoseDisableDealMsg)
  else g_sPoseDisableDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DealSuccessMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DealSuccessMsg', g_sDealSuccessMsg)
  else g_sDealSuccessMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DealOKTooFast', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DealOKTooFast', g_sDealOKTooFast)
  else g_sDealOKTooFast := LoadString;

  LoadString := StringConf.ReadString('String', 'YourBagSizeTooSmall', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YourBagSizeTooSmall', g_sYourBagSizeTooSmall)
  else g_sYourBagSizeTooSmall := LoadString;

  LoadString := StringConf.ReadString('String', 'DealHumanBagSizeTooSmall', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DealHumanBagSizeTooSmall', g_sDealHumanBagSizeTooSmall)
  else g_sDealHumanBagSizeTooSmall := LoadString;

  LoadString := StringConf.ReadString('String', 'YourGoldLargeThenLimit', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YourGoldLargeThenLimit', g_sYourGoldLargeThenLimit)
  else g_sYourGoldLargeThenLimit := LoadString;

  LoadString := StringConf.ReadString('String', 'DealHumanGoldLargeThenLimit', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DealHumanGoldLargeThenLimit', g_sDealHumanGoldLargeThenLimit)
  else g_sDealHumanGoldLargeThenLimit := LoadString;

  LoadString := StringConf.ReadString('String', 'YouDealOKMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YouDealOKMsg', g_sYouDealOKMsg)
  else g_sYouDealOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PoseDealOKMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'PoseDealOKMsg', g_sPoseDealOKMsg)
  else g_sPoseDealOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'KickClientUserMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'KickClientUserMsg', g_sKickClientUserMsg)
  else g_sKickClientUserMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ActionIsLockedMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ActionIsLockedMsg', g_sActionIsLockedMsg)
  else g_sActionIsLockedMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PasswordNotSetMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PasswordNotSetMsg', g_sPasswordNotSetMsg)
  else g_sPasswordNotSetMsg := LoadString;
{$IF M2Version = 1}
  LoadString := StringConf.ReadString('String', 'UseBatterSummoned', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'UseBatterSummoned', g_sUseBatterSummoned)
  else g_sUseBatterSummoned := LoadString;

  LoadString := StringConf.ReadString('String', 'UseBatterFail', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'UseBatterFail', g_sUseBatterFail)
  else g_sUseBatterFail := LoadString;

  LoadString := StringConf.ReadString('String', 'CanUseBatter', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'CanUseBatter', g_sCanUseBatter)
  else g_sCanUseBatter := LoadString;

  LoadString := StringConf.ReadString('String', 'UseBatterStorms', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'UseBatterStorms', g_sUseBatterStorms)
  else g_sUseBatterStorms := LoadString;
{$IFEND}
//20080426 召唤英雄提示
  LoadString := StringConf.ReadString('String', 'CallHeroTime', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CallHeroTime', g_sRecallHeroHint)
  else g_sRecallHeroHint := LoadString;
//20090413 注释
  {LoadString := StringConf.ReadString('String', 'NotHero', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NotHero', g_sNotHero)
  else g_sNotHero := LoadString;}

  LoadString := StringConf.ReadString('String', 'OpenShieldTickMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'OpenShieldTickMsg', g_sOpenShieldTickMsg)
  else g_sOpenShieldTickMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ButchItemHintMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ButchItemHintMsg', g_sButchItemHintMsg)
  else g_sButchItemHintMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'BoxsItemHintMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'BoxsItemHintMsg', g_sBoxsItemHintMsg)
  else g_sBoxsItemHintMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'BoxsItemHintMsg1', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'BoxsItemHintMsg1', g_sBoxsItemHintMsg1)
  else g_sBoxsItemHintMsg1 := LoadString;

  LoadString := StringConf.ReadString('String', 'BoxsItemHintMsg2', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'BoxsItemHintMsg2', g_sBoxsItemHintMsg2)
  else g_sBoxsItemHintMsg2 := LoadString;

  LoadString := StringConf.ReadString('String', 'ItmeDropHintMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ItmeDropHintMsg', g_sItmeDropHintMsg)
  else g_sItmeDropHintMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'JiujinOverHintMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'JiujinOverHintMsg', g_sJiujinOverHintMsg)
  else g_sJiujinOverHintMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UpAlcoholHintMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'UpAlcoholHintMsg', g_sUpAlcoholHintMsg)
  else g_sUpAlcoholHintMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChallengeWinMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ChallengeWinMsg', g_sChallengeWinMsg)
  else g_sChallengeWinMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChallengeLoseMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ChallengeLoseMsg', g_sChallengeLoseMsg)
  else g_sChallengeLoseMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PleaseTryChallengeLaterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PleaseTryChallengeLaterMsg', g_sPleaseTryChallengeLaterMsg)
  else g_sPleaseTryChallengeLaterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChallengeActionCancelMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ChallengeActionCancelMsg', g_sChallengeActionCancelMsg)
  else g_sChallengeActionCancelMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChallengeItemsDenyGetBackMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChallengeItemsDenyGetBackMsg', g_sChallengeItemsDenyGetBackMsg)
  else g_sChallengeItemsDenyGetBackMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChallengeOKTooFast', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ChallengeOKTooFast', g_sChallengeOKTooFast)
  else g_sChallengeOKTooFast := LoadString;

  LoadString := StringConf.ReadString('String', 'ChallengeYourBagSizeTooSmall', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ChallengeYourBagSizeTooSmall', g_sChallengeYourBagSizeTooSmall)
  else g_sChallengeYourBagSizeTooSmall := LoadString;

  LoadString := StringConf.ReadString('String', 'ChallengeYourGoldLargeThenLimit', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ChallengeYourGoldLargeThenLimit', g_sChallengeYourGoldLargeThenLimit)
  else g_sChallengeYourGoldLargeThenLimit := LoadString;

  LoadString := StringConf.ReadString('String', 'ChallengeHumanBagSizeTooSmall', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ChallengeHumanBagSizeTooSmall', g_sChallengeHumanBagSizeTooSmall)
  else g_sChallengeHumanBagSizeTooSmall := LoadString;

  LoadString := StringConf.ReadString('String', 'ChallengeHumanGoldLargeThenLimit', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ChallengeHumanGoldLargeThenLimit', g_sChallengeHumanGoldLargeThenLimit)
  else g_sChallengeHumanGoldLargeThenLimit := LoadString;

  LoadString := StringConf.ReadString('String', 'YouChallengeOKMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YouChallengeOKMsg', g_sYouChallengeOKMsg)
  else g_sYouChallengeOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PoseChallengeOKMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'PoseChallengeOKMsg', g_sPoseChallengeOKMsg)
  else g_sPoseChallengeOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChallengeTimeOverMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ChallengeTimeOverMsg', g_sChallengeTimeOverMsg)
  else g_sChallengeTimeOverMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PickUpItemHintMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'PickUpItemHintMsg', g_sPickUpItemHintMsg)
  else g_sPickUpItemHintMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ArmsExhangeItemHintMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ArmsExhangeItemHintMsg', g_sArmsExhangeItemHintMsg)
  else g_sArmsExhangeItemHintMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'OpenShieldOKMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'OpenShieldOKMsg', g_sOpenShieldOKMsg)
  else g_sOpenShieldOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'HeroHit', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'HeroHit', g_sHeroLoginMsg)
  else g_sHeroLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'HeroProtect', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HeroProtect', g_sHeroProtect)
  else g_sHeroProtect := LoadString;

  LoadString := StringConf.ReadString('String', 'HeroNotProtect', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HeroNotProtect', g_sHeroNotProtect)
  else g_sHeroNotProtect := LoadString;

  LoadString := StringConf.ReadString('String', 'HeroClose', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'HeroClose', g_sHeroClose)
  else g_sHeroClose := LoadString;

  LoadString := StringConf.ReadString('String', 'HeroRest', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'HeroRest', g_sHeroRest)
  else g_sHeroRest := LoadString;

  LoadString := StringConf.ReadString('String', 'HeroAttack', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'HeroAttack', g_sHeroAttack)
  else g_sHeroAttack := LoadString;

  LoadString := StringConf.ReadString('String', 'HeroFollow', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'HeroFollow', g_sHeroFollow)
  else g_sHeroFollow := LoadString;

  LoadString := StringConf.ReadString('String', 'NotPasswordProtectMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NotPasswordProtectMode', g_sNotPasswordProtectMode)
  else g_sNotPasswordProtectMode := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotDropGoldMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotDropGoldMsg', g_sCanotDropGoldMsg)
  else g_sCanotDropGoldMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotDropInSafeZoneMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotDropInSafeZoneMsg', g_sCanotDropInSafeZoneMsg)
  else g_sCanotDropInSafeZoneMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotDropItemMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotDropItemMsg', g_sCanotDropItemMsg)
  else g_sCanotDropItemMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotDropItemMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotDropItemMsg', g_sCanotDropItemMsg)
  else g_sCanotDropItemMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotUseItemMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotUseItemMsg', g_sCanotUseItemMsg)
  else g_sCanotUseItemMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StartMarryManMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartMarryManMsg', g_sStartMarryManMsg)
  else g_sStartMarryManMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StartMarryWoManMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartMarryWoManMsg', g_sStartMarryWoManMsg)
  else g_sStartMarryWoManMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StartMarryManAskQuestionMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartMarryManAskQuestionMsg', g_sStartMarryManAskQuestionMsg)
  else g_sStartMarryManAskQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StartMarryWoManAskQuestionMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartMarryWoManAskQuestionMsg', g_sStartMarryWoManAskQuestionMsg)
  else g_sStartMarryWoManAskQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryManAnswerQuestionMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryManAnswerQuestionMsg', g_sMarryManAnswerQuestionMsg)
  else g_sMarryManAnswerQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryManAskQuestionMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryManAskQuestionMsg', g_sMarryManAskQuestionMsg)
  else g_sMarryManAskQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryWoManAnswerQuestionMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryWoManAnswerQuestionMsg', g_sMarryWoManAnswerQuestionMsg)
  else g_sMarryWoManAnswerQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryWoManGetMarryMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryWoManGetMarryMsg', g_sMarryWoManGetMarryMsg)
  else g_sMarryWoManGetMarryMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryWoManDenyMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryWoManDenyMsg', g_sMarryWoManDenyMsg)
  else g_sMarryWoManDenyMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryWoManCancelMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryWoManCancelMsg', g_sMarryWoManCancelMsg)
  else g_sMarryWoManCancelMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ForceUnMarryManLoginMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ForceUnMarryManLoginMsg', g_sfUnMarryManLoginMsg)
  else g_sfUnMarryManLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ForceUnMarryWoManLoginMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ForceUnMarryWoManLoginMsg', g_sfUnMarryWoManLoginMsg)
  else g_sfUnMarryWoManLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ManLoginDearOnlineSelfMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ManLoginDearOnlineSelfMsg', g_sManLoginDearOnlineSelfMsg)
  else g_sManLoginDearOnlineSelfMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ManLoginDearOnlineDearMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ManLoginDearOnlineDearMsg', g_sManLoginDearOnlineDearMsg)
  else g_sManLoginDearOnlineDearMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManLoginDearOnlineSelfMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WoManLoginDearOnlineSelfMsg', g_sWoManLoginDearOnlineSelfMsg)
  else g_sWoManLoginDearOnlineSelfMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManLoginDearOnlineDearMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WoManLoginDearOnlineDearMsg', g_sWoManLoginDearOnlineDearMsg)
  else g_sWoManLoginDearOnlineDearMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ManLoginDearNotOnlineMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ManLoginDearNotOnlineMsg', g_sManLoginDearNotOnlineMsg)
  else g_sManLoginDearNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManLoginDearNotOnlineMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'WoManLoginDearNotOnlineMsg', g_sWoManLoginDearNotOnlineMsg)
  else g_sWoManLoginDearNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ManLongOutDearOnlineMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ManLongOutDearOnlineMsg', g_sManLongOutDearOnlineMsg)
  else g_sManLongOutDearOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManLongOutDearOnlineMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'WoManLongOutDearOnlineMsg', g_sWoManLongOutDearOnlineMsg)
  else g_sWoManLongOutDearOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouAreNotMarryedMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YouAreNotMarryedMsg', g_sYouAreNotMarryedMsg)
  else g_sYouAreNotMarryedMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourWifeNotOnlineMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YourWifeNotOnlineMsg', g_sYourWifeNotOnlineMsg)
  else g_sYourWifeNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourHusbandNotOnlineMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YourHusbandNotOnlineMsg', g_sYourHusbandNotOnlineMsg)
  else g_sYourHusbandNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourWifeNowLocateMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YourWifeNowLocateMsg', g_sYourWifeNowLocateMsg)
  else g_sYourWifeNowLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourHusbandSearchLocateMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YourHusbandSearchLocateMsg', g_sYourHusbandSearchLocateMsg)
  else g_sYourHusbandSearchLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourHusbandNowLocateMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YourHusbandNowLocateMsg', g_sYourHusbandNowLocateMsg)
  else g_sYourHusbandNowLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourWifeSearchLocateMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YourWifeSearchLocateMsg', g_sYourWifeSearchLocateMsg)
  else g_sYourWifeSearchLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'FUnMasterLoginMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'FUnMasterLoginMsg', g_sfUnMasterLoginMsg)
  else g_sfUnMasterLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UnMasterListLoginMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'UnMasterListLoginMsg', g_sfUnMasterListLoginMsg)
  else g_sfUnMasterListLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterListOnlineSelfMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterListOnlineSelfMsg', g_sMasterListOnlineSelfMsg)
  else g_sMasterListOnlineSelfMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterListOnlineMasterMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'MasterListOnlineMasterMsg', g_sMasterListOnlineMasterMsg)
  else g_sMasterListOnlineMasterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterOnlineSelfMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'MasterOnlineSelfMsg', g_sMasterOnlineSelfMsg)
  else g_sMasterOnlineSelfMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterOnlineMasterListMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'MasterOnlineMasterListMsg', g_sMasterOnlineMasterListMsg)
  else g_sMasterOnlineMasterListMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterLongOutMasterListOnlineMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'MasterLongOutMasterListOnlineMsg', g_sMasterLongOutMasterListOnlineMsg)
  else g_sMasterLongOutMasterListOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterListLongOutMasterOnlineMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'MasterListLongOutMasterOnlineMsg', g_sMasterListLongOutMasterOnlineMsg)
  else g_sMasterListLongOutMasterOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterListNotOnlineMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'MasterListNotOnlineMsg', g_sMasterListNotOnlineMsg)
  else g_sMasterListNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterNotOnlineMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'MasterNotOnlineMsg', g_sMasterNotOnlineMsg)
  else g_sMasterNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouAreNotMasterMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YouAreNotMasterMsg', g_sYouAreNotMasterMsg)
  else g_sYouAreNotMasterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterNotOnlineMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YourMasterNotOnlineMsg', g_sYourMasterNotOnlineMsg)
  else g_sYourMasterNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterListNotOnlineMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YourMasterListNotOnlineMsg', g_sYourMasterListNotOnlineMsg)
  else g_sYourMasterListNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterNowLocateMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YourMasterNowLocateMsg', g_sYourMasterNowLocateMsg)
  else g_sYourMasterNowLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterListSearchLocateMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YourMasterListSearchLocateMsg', g_sYourMasterListSearchLocateMsg)
  else g_sYourMasterListSearchLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterListNowLocateMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YourMasterListNowLocateMsg', g_sYourMasterListNowLocateMsg)
  else g_sYourMasterListNowLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterSearchLocateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterSearchLocateMsg', g_sYourMasterSearchLocateMsg)
  else g_sYourMasterSearchLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterListUnMasterOKMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterListUnMasterOKMsg', g_sYourMasterListUnMasterOKMsg)
  else g_sYourMasterListUnMasterOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouAreUnMasterOKMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'YouAreUnMasterOKMsg', g_sYouAreUnMasterOKMsg)
  else g_sYouAreUnMasterOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UnMasterLoginMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'UnMasterLoginMsg', g_sUnMasterLoginMsg)
  else g_sUnMasterLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'NPCSayUnMasterOKMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NPCSayUnMasterOKMsg', g_sNPCSayUnMasterOKMsg)
  else g_sNPCSayUnMasterOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'NPCSayForceUnMasterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NPCSayForceUnMasterMsg', g_sNPCSayForceUnMasterMsg)
  else g_sNPCSayForceUnMasterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MyInfo', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MyInfo', g_sMyInfo)
  else g_sMyInfo := LoadString;

  LoadString := StringConf.ReadString('String', 'OpenedDealMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'OpenedDealMsg', g_sOpenedDealMsg)
  else g_sOpenedDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'SendCustMsgCanNotUseNowMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SendCustMsgCanNotUseNowMsg', g_sSendCustMsgCanNotUseNowMsg)
  else g_sSendCustMsgCanNotUseNowMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'SubkMasterMsgCanNotUseNowMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SubkMasterMsgCanNotUseNowMsg', g_sSubkMasterMsgCanNotUseNowMsg)
  else g_sSubkMasterMsgCanNotUseNowMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'SendOnlineCountMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SendOnlineCountMsg', g_sSendOnlineCountMsg)
  else g_sSendOnlineCountMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WeaponRepairSuccess', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'WeaponRepairSuccess', g_sWeaponRepairSuccess)
  else g_sWeaponRepairSuccess := LoadString;

  LoadString := StringConf.ReadString('String', 'DefenceUpTime', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DefenceUpTime', g_sDefenceUpTime)
  else g_sDefenceUpTime := LoadString;

  LoadString := StringConf.ReadString('String', 'MagDefenceUpTime', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MagDefenceUpTime', g_sMagDefenceUpTime)
  else g_sMagDefenceUpTime := LoadString;

  LoadString := StringConf.ReadString('String', 'DefenceUpTimeOver', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DefenceUpTimeOver', g_sDefenceUpTimeOver)
  else g_sDefenceUpTimeOver := LoadString;

  LoadString := StringConf.ReadString('String', 'MagDefenceUpTimeOver', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MagDefenceUpTimeOver', g_sMagDefenceUpTimeOver)
  else g_sMagDefenceUpTimeOver := LoadString;

  LoadString := StringConf.ReadString('String', 'MagSkill102Time', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MagSkill102Time', g_sSkill102Time)
  else g_sSkill102Time := LoadString;

  LoadString := StringConf.ReadString('String', 'MagSkill102TimeOver', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MagSkill102TimeOver', g_sSkill102TimeOver)
  else g_sSkill102TimeOver := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery1Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery1Msg', g_sWinLottery1Msg)
  else g_sWinLottery1Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery2Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery2Msg', g_sWinLottery2Msg)
  else g_sWinLottery2Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery3Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery3Msg', g_sWinLottery3Msg)
  else g_sWinLottery3Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery4Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery4Msg', g_sWinLottery4Msg)
  else g_sWinLottery4Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery5Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery5Msg', g_sWinLottery5Msg)
  else g_sWinLottery5Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery6Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery6Msg', g_sWinLottery6Msg)
  else g_sWinLottery6Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'NotWinLotteryMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'NotWinLotteryMsg', g_sNotWinLotteryMsg)
  else g_sNotWinLotteryMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WeaptonMakeLuck', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'WeaptonMakeLuck', g_sWeaptonMakeLuck)
  else g_sWeaptonMakeLuck := LoadString;

  LoadString := StringConf.ReadString('String', 'WeaptonNotMakeLuck', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'WeaptonNotMakeLuck', g_sWeaptonNotMakeLuck)
  else g_sWeaptonNotMakeLuck := LoadString;

  LoadString := StringConf.ReadString('String', 'TheWeaponIsCursed', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'TheWeaponIsCursed', g_sTheWeaponIsCursed)
  else g_sTheWeaponIsCursed := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotTakeOffItem', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'CanotTakeOffItem', g_sCanotTakeOffItem)
  else g_sCanotTakeOffItem := LoadString;

  LoadString := StringConf.ReadString('String', 'JoinGroupMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'JoinGroupMsg', g_sJoinGroup)
  else g_sJoinGroup := LoadString;

  LoadString := StringConf.ReadString('String', 'TryModeCanotUseStorage', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'TryModeCanotUseStorage', g_sTryModeCanotUseStorage)
  else g_sTryModeCanotUseStorage := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotGetItemsMsg', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'CanotGetItemsMsg', g_sCanotGetItems)
  else g_sCanotGetItems := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableDearRecall', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'EnableDearRecall', g_sEnableDearRecall)
  else g_sEnableDearRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableDearRecall', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DisableDearRecall', g_sDisableDearRecall)
  else g_sDisableDearRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableMasterRecall', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'EnableMasterRecall', g_sEnableMasterRecall)
  else g_sEnableMasterRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableMasterRecall', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'DisableMasterRecall', g_sDisableMasterRecall)
  else g_sDisableMasterRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'NowCurrDateTime', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NowCurrDateTime', g_sNowCurrDateTime)
  else g_sNowCurrDateTime := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableAllowRebirth', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableAllowRebirth', g_sEnableAllowRebirth)
  else g_sEnableAllowRebirth := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableAllowRebirth', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableAllowRebirth', g_sDisableAllowRebirth)
  else g_sDisableAllowRebirth := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableReadMasterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableReadMasterMsg', g_sEnableReadMasterMsg)
  else g_sEnableHearWhisper := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableReadMasterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableReadMasterMsg', g_sDisableReadMasterMsg)
  else g_sEnableHearWhisper := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableMarryMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableMarryMsg', g_sEnableMarryMsg)
  else g_sEnableMarryMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableMarryMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableMarryMsg', g_sDisableMarryMsg)
  else g_sDisableMarryMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableHearWhisper', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableHearWhisper', g_sEnableHearWhisper)
  else g_sEnableHearWhisper := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableHearWhisper', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableHearWhisper', g_sDisableHearWhisper)
  else g_sDisableHearWhisper := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableShoutMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableShoutMsg', g_sEnableShoutMsg)
  else g_sEnableShoutMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableShoutMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableShoutMsg', g_sDisableShoutMsg)
  else g_sDisableShoutMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableDealMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableDealMsg', g_sEnableDealMsg)
  else g_sEnableDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableDealMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableDealMsg', g_sDisableDealMsg)
  else g_sDisableDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableGuildChat', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableGuildChat', g_sEnableGuildChat)
  else g_sEnableGuildChat := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableGuildChat', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableGuildChat', g_sDisableGuildChat)
  else g_sDisableGuildChat := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableJoinGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableJoinGuild', g_sEnableJoinGuild)
  else g_sEnableJoinGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableJoinGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableJoinGuild', g_sDisableJoinGuild)
  else g_sDisableJoinGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableAuthAllyGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableAuthAllyGuild', g_sEnableAuthAllyGuild)
  else g_sEnableAuthAllyGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableAuthAllyGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableAuthAllyGuild', g_sDisableAuthAllyGuild)
  else g_sDisableAuthAllyGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableGroupRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableGroupRecall', g_sEnableGroupRecall)
  else g_sEnableGroupRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableGroupRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableGroupRecall', g_sDisableGroupRecall)
  else g_sDisableGroupRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableGuildRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableGuildRecall', g_sEnableGuildRecall)
  else g_sEnableGuildRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableGuildRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableGuildRecall', g_sDisableGuildRecall)
  else g_sDisableGuildRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'PleaseInputPassword', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PleaseInputPassword', g_sPleaseInputPassword)
  else g_sPleaseInputPassword := LoadString;

  LoadString := StringConf.ReadString('String', 'TheMapDisableMove', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TheMapDisableMove', g_sTheMapDisableMove)
  else g_sTheMapDisableMove := LoadString;

  LoadString := StringConf.ReadString('String', 'TheMapNotFound', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TheMapNotFound', g_sTheMapNotFound)
  else g_sTheMapNotFound := LoadString;

  LoadString := StringConf.ReadString('String', 'YourIPaddrDenyLogon', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourIPaddrDenyLogon', g_sYourIPaddrDenyLogon)
  else g_sYourIPaddrDenyLogon := LoadString;

  LoadString := StringConf.ReadString('String', 'YourAccountDenyLogon', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourAccountDenyLogon', g_sYourAccountDenyLogon)
  else g_sYourAccountDenyLogon := LoadString;

  LoadString := StringConf.ReadString('String', 'YourCharNameDenyLogon', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourCharNameDenyLogon', g_sYourCharNameDenyLogon)
  else g_sYourCharNameDenyLogon := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotPickUpItem', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotPickUpItem', g_sCanotPickUpItem)
  else g_sCanotPickUpItem := LoadString;

  LoadString := StringConf.ReadString('String', 'CanNotPickBindUpItem', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanNotPickBindUpItem', g_sCanNotPickBindUpItem)
  else g_sCanNotPickBindUpItem := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotSendmsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotSendmsg', g_sCanotSendmsg)
  else g_sCanotSendmsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UserDenyWhisperMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'UserDenyWhisperMsg', g_sUserDenyWhisperMsg)
  else g_sUserDenyWhisperMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UserNotOnLine', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'UserNotOnLine', g_sUserNotOnLine)
  else g_sUserNotOnLine := LoadString;

  LoadString := StringConf.ReadString('String', 'RevivalRecoverMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'RevivalRecoverMsg', g_sRevivalRecoverMsg)
  else g_sRevivalRecoverMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'RebirthRecoverMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'RebirthRecoverMsg', g_sRebirthRecoverMsg)
  else g_sRebirthRecoverMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ClientVersionTooOld', 'NoString');
  if LoadString = 'NoString' then
    StringConf.WriteString('String', 'ClientVersionTooOld', g_sClientVersionTooOld)
  else g_sClientVersionTooOld := LoadString;

  LoadString := StringConf.ReadString('String', 'CastleGuildName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CastleGuildName', g_sCastleGuildName)
  else g_sCastleGuildName := LoadString;

  LoadString := StringConf.ReadString('String', 'NoCastleGuildName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NoCastleGuildName', g_sNoCastleGuildName)
  else g_sNoCastleGuildName := LoadString;

  LoadString := StringConf.ReadString('String', 'WarrReNewName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WarrReNewName', g_sWarrReNewName)
  else g_sWarrReNewName := LoadString;

  LoadString := StringConf.ReadString('String', 'WizardReNewName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WizardReNewName', g_sWizardReNewName)
  else g_sWizardReNewName := LoadString;

  LoadString := StringConf.ReadString('String', 'TaosReNewName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TaosReNewName', g_sTaosReNewName)
  else g_sTaosReNewName := LoadString;

  LoadString := StringConf.ReadString('String', 'RankLevelName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'RankLevelName', g_sRankLevelName)
  else g_sRankLevelName := LoadString;

  LoadString := StringConf.ReadString('String', 'ManDearName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ManDearName', g_sManDearName)
  else g_sManDearName := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManDearName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WoManDearName', g_sWoManDearName)
  else g_sWoManDearName := LoadString;
  {$IF M2Version <> 2}
  LoadString := StringConf.ReadString('String', 'ComradeName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ComradeName', g_sComradeName)
  else g_sComradeName := LoadString;

  LoadString := StringConf.ReadString('String', 'HuhuashizheName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HuhuashizheName', g_sHuhuashizheName)
  else g_sHuhuashizheName := LoadString;
  {$IFEND}
  LoadString := StringConf.ReadString('String', 'MasterName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterName', g_sMasterName)
  else g_sMasterName := LoadString;

  LoadString := StringConf.ReadString('String', 'NoMasterName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NoMasterName', g_sNoMasterName)
  else g_sNoMasterName := LoadString;

  LoadString := StringConf.ReadString('String', 'HumanShowName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HumanShowName', g_sHumanShowName)
  else g_sHumanShowName := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangePermissionMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangePermissionMsg', g_sChangePermissionMsg)
  else g_sChangePermissionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangeKillMonExpRateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangeKillMonExpRateMsg', g_sChangeKillMonExpRateMsg)
  else g_sChangeKillMonExpRateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'HighLevelKillMonFixExpMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HighLevelKillMonFixExpMsg', g_sHighLevelKillMonFixExpMsg)
  else g_sHighLevelKillMonFixExpMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangHearMsgColorMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangHearMsgColorMsg', g_sChangHearMsgColorMsg)
  else g_sChangHearMsgColorMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangePowerRateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangePowerRateMsg', g_sChangePowerRateMsg)
  else g_sChangePowerRateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangeMemberLevelMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangeMemberLevelMsg', g_sChangeMemberLevelMsg)
  else g_sChangeMemberLevelMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangeMemberTypeMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangeMemberTypeMsg', g_sChangeMemberTypeMsg)
  else g_sChangeMemberTypeMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ScriptChangeHumanHPMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptChangeHumanHPMsg', g_sScriptChangeHumanHPMsg)
  else g_sScriptChangeHumanHPMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ScriptChangeHumanMPMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptChangeHumanMPMsg', g_sScriptChangeHumanMPMsg)
  else g_sScriptChangeHumanMPMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouCanotDisableSayMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouCanotDisableSayMsg', g_sDisableSayMsg)
  else g_sDisableSayMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'OnlineCountMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'OnlineCountMsg', g_sOnlineCountMsg)
  else g_sOnlineCountMsg := LoadString;
                                                 
  LoadString := StringConf.ReadString('String', 'TotalOnlineCountMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TotalOnlineCountMsg', g_sTotalOnlineCountMsg)
  else g_sTotalOnlineCountMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouNeedLevelSendMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouNeedLevelSendMsg', g_sYouNeedLevelMsg)
  else g_sYouNeedLevelMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ThisMapDisableSendCyCyMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ThisMapDisableSendCyCyMsg', g_sThisMapDisableSendCyCyMsg)
  else g_sThisMapDisableSendCyCyMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouCanSendCyCyLaterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouCanSendCyCyLaterMsg', g_sYouCanSendCyCyLaterMsg)
  else g_sYouCanSendCyCyLaterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouIsDisableSendMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouIsDisableSendMsg', g_sYouIsDisableSendMsg)
  else g_sYouIsDisableSendMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouMurderedMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouMurderedMsg', g_sYouMurderedMsg)
  else g_sYouMurderedMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouKilledByMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouKilledByMsg', g_sYouKilledByMsg)
  else g_sYouKilledByMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouProtectedByLawOfDefense', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouProtectedByLawOfDefense', g_sYouProtectedByLawOfDefense)
  else g_sYouProtectedByLawOfDefense := LoadString;
  
 { LoadString:=StringConf.ReadString('String','GameCommandPermissionTooLow','');
  if LoadString = '' then
    StringConf.WriteString('String','GameCommandPermissionTooLow',g_sGameCommandPermissionTooLow)
  else g_sGameCommandPermissionTooLow:=LoadString;  }
end;

procedure LoadConfig(boReload: Boolean);
var
  I: Integer;
  nLoadInteger: Integer;
  nLoadFloat: Double;
  sLoadString: string;
begin
  StartFixExp(boReload);
  {LoadString();//加载String.ini   20110713 从LoadConfig过程分离
  LoadGameCommand();//加载Command.ini
  LoadExp(boReload);   }
//============================================================================
  {$IF M2Version <> 2}
  if StringConf.ReadString('Division', 'DivisionNotice', '') = '' then
    StringConf.WriteString('Division', 'DivisionNotice', g_Config.sDivisionNotice);
  g_Config.sDivisionNotice := StringConf.ReadString('Division', 'DivisionNotice', g_Config.sDivisionNotice);

  if StringConf.ReadString('Division', 'DivisionMember', '') = '' then
    StringConf.WriteString('Division', 'DivisionMember', g_Config.sDivisionMember);
  g_Config.sDivisionMember := StringConf.ReadString('Division', 'DivisionMember', g_Config.sDivisionMember);

  if StringConf.ReadString('Division', 'ApplyDivision', '') = '' then
    StringConf.WriteString('Division', 'ApplyDivision', g_Config.sApplyDivision);
  g_Config.sApplyDivision := StringConf.ReadString('Division', 'ApplyDivision', g_Config.sApplyDivision);

  if StringConf.ReadString('Division', 'DivisionChief', '') = '' then
    StringConf.WriteString('Division', 'DivisionChief', g_Config.sDivisionChief);
  g_Config.sDivisionChief := StringConf.ReadString('Division', 'DivisionChief', g_Config.sDivisionChief);
  {$IFEND}

  if StringConf.ReadString('Guild', 'GuildNotice', '') = '' then
    StringConf.WriteString('Guild', 'GuildNotice', g_Config.sGuildNotice);
  g_Config.sGuildNotice := StringConf.ReadString('Guild', 'GuildNotice', g_Config.sGuildNotice);

  if StringConf.ReadString('Guild', 'GuildWar', '') = '' then
    StringConf.WriteString('Guild', 'GuildWar', g_Config.sGuildWar);
  g_Config.sGuildWar := StringConf.ReadString('Guild', 'GuildWar', g_Config.sGuildWar);

  if StringConf.ReadString('Guild', 'GuildAll', '') = '' then
    StringConf.WriteString('Guild', 'GuildAll', g_Config.sGuildAll);
  g_Config.sGuildAll := StringConf.ReadString('Guild', 'GuildAll', g_Config.sGuildAll);

  if StringConf.ReadString('Guild', 'GuildMember', '') = '' then
    StringConf.WriteString('Guild', 'GuildMember', g_Config.sGuildMember);
  g_Config.sGuildMember := StringConf.ReadString('Guild', 'GuildMember', g_Config.sGuildMember);

  if StringConf.ReadString('Guild', 'GuildMemberRank', '') = '' then
    StringConf.WriteString('Guild', 'GuildMemberRank', g_Config.sGuildMemberRank);
  g_Config.sGuildMemberRank := StringConf.ReadString('Guild', 'GuildMemberRank', g_Config.sGuildMemberRank);

  if StringConf.ReadString('Guild', 'GuildChief', '') = '' then
    StringConf.WriteString('Guild', 'GuildChief', g_Config.sGuildChief);
  g_Config.sGuildChief := StringConf.ReadString('Guild', 'GuildChief', g_Config.sGuildChief);

  //服务器设置
  if Config.ReadInteger('Server', 'ServerIndex', -1) < 0 then
    Config.WriteInteger('Server', 'ServerIndex', nServerIndex);
  nServerIndex := Config.ReadInteger('Server', 'ServerIndex', nServerIndex);

  if Config.ReadString('Server', 'ServerName', '') = '' then
    Config.WriteString('Server', 'ServerName', g_Config.sServerName);
  g_Config.sServerName := Config.ReadString('Server', 'ServerName', g_Config.sServerName);

  if StringConf.ReadString('Server', 'ServerIP', '') = '' then
    StringConf.WriteString('Server', 'ServerIP', g_Config.sServerIPaddr);
  g_Config.sServerIPaddr := StringConf.ReadString('Server', 'ServerIP', g_Config.sServerIPaddr);

  if Config.ReadInteger('Server', 'Minimize', -1) < 0 then
    Config.WriteBool('Server', 'Minimize', g_boMinimize);
  g_boMinimize := Config.ReadBool('Server', 'Minimize', g_boMinimize);

  {if Config.ReadString('Reg','ServerAddr','') = '' then
    Config.WriteString('Reg','ServerAddr',g_Config.sRegServerAddr);
  g_Config.sRegServerAddr:=Config.ReadString('Reg','ServerAddr',g_Config.sRegServerAddr);

  if Config.ReadString('Reg','Key','') = '' then
    Config.WriteString('Reg','Key',g_Config.sRegKey);
  g_Config.sRegKey:=Config.ReadString('Reg','Key',g_Config.sRegKey);

  if Config.ReadInteger('Reg','ServerPort',-1) < 0 then
    Config.WriteInteger('Reg','ServerPort',g_Config.nRegServerPort);
  g_Config.nRegServerPort:=Config.ReadInteger('Reg','ServerPort',g_Config.nRegServerPort); }

  if StringConf.ReadString('Server', 'WebSite', '') = '' then
    StringConf.WriteString('Server', 'WebSite', g_Config.sWebSite);
  g_Config.sWebSite := StringConf.ReadString('Server', 'WebSite', g_Config.sWebSite);

  if StringConf.ReadString('Server', 'BbsSite', '') = '' then
    StringConf.WriteString('Server', 'BbsSite', g_Config.sBbsSite);
  g_Config.sBbsSite := StringConf.ReadString('Server', 'BbsSite', g_Config.sBbsSite);

  if StringConf.ReadString('Server', 'ClientDownload', '') = '' then
    StringConf.WriteString('Server', 'ClientDownload', g_Config.sClientDownload);
  g_Config.sClientDownload := StringConf.ReadString('Server', 'ClientDownload', g_Config.sClientDownload);

  if StringConf.ReadString('Server', 'QQ', '') = '' then
    StringConf.WriteString('Server', 'QQ', g_Config.sQQ);
  g_Config.sQQ := StringConf.ReadString('Server', 'QQ', g_Config.sQQ);

  if StringConf.ReadString('Server', 'Phone', '') = '' then
    StringConf.WriteString('Server', 'Phone', g_Config.sPhone);
  g_Config.sPhone := StringConf.ReadString('Server', 'Phone', g_Config.sPhone);

  if StringConf.ReadString('Server', 'BankAccount0', '') = '' then
    StringConf.WriteString('Server', 'BankAccount0', g_Config.sBankAccount0);
  g_Config.sBankAccount0 := StringConf.ReadString('Server', 'BankAccount0', g_Config.sBankAccount0);

  if StringConf.ReadString('Server', 'BankAccount1', '') = '' then
    StringConf.WriteString('Server', 'BankAccount1', g_Config.sBankAccount1);
  g_Config.sBankAccount1 := StringConf.ReadString('Server', 'BankAccount1', g_Config.sBankAccount1);

  if StringConf.ReadString('Server', 'BankAccount2', '') = '' then
    StringConf.WriteString('Server', 'BankAccount2', g_Config.sBankAccount2);
  g_Config.sBankAccount2 := StringConf.ReadString('Server', 'BankAccount2', g_Config.sBankAccount2);

  if StringConf.ReadString('Server', 'BankAccount3', '') = '' then
    StringConf.WriteString('Server', 'BankAccount3', g_Config.sBankAccount3);
  g_Config.sBankAccount3 := StringConf.ReadString('Server', 'BankAccount3', g_Config.sBankAccount3);

  if StringConf.ReadString('Server', 'BankAccount4', '') = '' then
    StringConf.WriteString('Server', 'BankAccount4', g_Config.sBankAccount4);
  g_Config.sBankAccount4 := StringConf.ReadString('Server', 'BankAccount4', g_Config.sBankAccount4);

  if StringConf.ReadString('Server', 'BankAccount5', '') = '' then
    StringConf.WriteString('Server', 'BankAccount5', g_Config.sBankAccount5);
  g_Config.sBankAccount5 := StringConf.ReadString('Server', 'BankAccount5', g_Config.sBankAccount5);

  if StringConf.ReadString('Server', 'BankAccount6', '') = '' then
    StringConf.WriteString('Server', 'BankAccount6', g_Config.sBankAccount6);
  g_Config.sBankAccount6 := StringConf.ReadString('Server', 'BankAccount6', g_Config.sBankAccount6);

  if StringConf.ReadString('Server', 'BankAccount7', '') = '' then
    StringConf.WriteString('Server', 'BankAccount7', g_Config.sBankAccount7);
  g_Config.sBankAccount7 := StringConf.ReadString('Server', 'BankAccount7', g_Config.sBankAccount7);

  if StringConf.ReadString('Server', 'BankAccount8', '') = '' then
    StringConf.WriteString('Server', 'BankAccount8', g_Config.sBankAccount8);
  g_Config.sBankAccount8 := StringConf.ReadString('Server', 'BankAccount8', g_Config.sBankAccount8);

  if StringConf.ReadString('Server', 'BankAccount9', '') = '' then
    StringConf.WriteString('Server', 'BankAccount9', g_Config.sBankAccount9);
  g_Config.sBankAccount9 := StringConf.ReadString('Server', 'BankAccount9', g_Config.sBankAccount9);

  if Config.ReadInteger('Server', 'ServerNumber', -1) < 0 then
    Config.WriteInteger('Server', 'ServerNumber', g_Config.nServerNumber);
  g_Config.nServerNumber := Config.ReadInteger('Server', 'ServerNumber', g_Config.nServerNumber);

  if Config.ReadString('Server', 'VentureServer', '') = '' then
    Config.WriteString('Server', 'VentureServer', BoolToStr(g_Config.boVentureServer));
  g_Config.boVentureServer := CompareText(Config.ReadString('Server', 'VentureServer', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'TestServer', '') = '' then
    Config.WriteString('Server', 'TestServer', BoolToStr(g_Config.boTestServer));
  g_Config.boTestServer := CompareText(Config.ReadString('Server', 'TestServer', 'FALSE'), 'TRUE') = 0;

  if Config.ReadInteger('Server', 'TestLevel', -1) < 0 then
    Config.WriteInteger('Server', 'TestLevel', g_Config.nTestLevel);
  g_Config.nTestLevel := Config.ReadInteger('Server', 'TestLevel', g_Config.nTestLevel);

  if Config.ReadInteger('Server', 'TestGold', -1) < 0 then
    Config.WriteInteger('Server', 'TestGold', g_Config.nTestGold);
  g_Config.nTestGold := Config.ReadInteger('Server', 'TestGold', g_Config.nTestGold);

  if Config.ReadInteger('Server', 'TestServerUserLimit', -1) < 0 then
    Config.WriteInteger('Server', 'TestServerUserLimit', g_Config.nTestUserLimit);
  g_Config.nTestUserLimit := Config.ReadInteger('Server', 'TestServerUserLimit', g_Config.nTestUserLimit);

  if Config.ReadString('Server', 'ServiceMode', '') = '' then
    Config.WriteString('Server', 'ServiceMode', BoolToStr(g_Config.boServiceMode));
  g_Config.boServiceMode := CompareText(Config.ReadString('Server', 'ServiceMode', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'NonPKServer', '') = '' then
    Config.WriteString('Server', 'NonPKServer', BoolToStr(g_Config.boNonPKServer));
  g_Config.boNonPKServer := CompareText(Config.ReadString('Server', 'NonPKServer', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'ViewHackMessage', '') = '' then
    Config.WriteString('Server', 'ViewHackMessage', BoolToStr(g_Config.boViewHackMessage));
  g_Config.boViewHackMessage := CompareText(Config.ReadString('Server', 'ViewHackMessage', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'ViewAdmissionFailure', '') = '' then
    Config.WriteString('Server', 'ViewAdmissionFailure', BoolToStr(g_Config.boViewAdmissionFailure));
  g_Config.boViewAdmissionFailure := CompareText(Config.ReadString('Server', 'ViewAdmissionFailure', 'FALSE'), 'TRUE') = 0;

{$IF DBTYPE = ADO}
  if Config.ReadString('Server', 'SQLDatabase', '') = '' then Config.WriteString('Server', 'SQLDatabase', g_sSQLDatabase);
  g_sSQLDatabase := Config.ReadString('Server', 'SQLDatabase', g_sSQLDatabase);

  if Config.ReadString('Server', 'SQLHost', '') = '' then Config.WriteString('Server', 'SQLHost', g_sSQLHost);
  g_sSQLHost := Config.ReadString('Server', 'SQLHost', g_sSQLHost);

  if Config.ReadString('Server', 'SQLUserName', '') = '' then Config.WriteString('Server', 'SQLUserName', g_sSQLUserName);
  g_sSQLUserName := Config.ReadString('Server', 'SQLUserName', g_sSQLUserName);

  if Config.ReadString('Server', 'SQLPassword', '') = '' then Config.WriteString('Server', 'SQLPassword', g_sSQLPassword);
  g_sSQLPassword := Config.ReadString('Server', 'SQLPassword', g_sSQLPassword);
{$ELSE}
  if Config.ReadString('Server', 'DBName', '') = '' then Config.WriteString('Server', 'DBName', sDBName);
  sDBName := Config.ReadString('Server', 'DBName', sDBName);
{$IFEND}

  if Config.ReadString('Server', 'GateAddr', '') = '' then
    Config.WriteString('Server', 'GateAddr', g_Config.sGateAddr);
  g_Config.sGateAddr := Config.ReadString('Server', 'GateAddr', g_Config.sGateAddr);

  if Config.ReadInteger('Server', 'GatePort', -1) < 0 then
    Config.WriteInteger('Server', 'GatePort', g_Config.nGatePort);
  g_Config.nGatePort := Config.ReadInteger('Server', 'GatePort', g_Config.nGatePort);

  if Config.ReadString('Server', 'DBAddr', '') = '' then
    Config.WriteString('Server', 'DBAddr', g_Config.sDBAddr);
  g_Config.sDBAddr := Config.ReadString('Server', 'DBAddr', g_Config.sDBAddr);

  if Config.ReadInteger('Server', 'DBPort', -1) < 0 then
    Config.WriteInteger('Server', 'DBPort', g_Config.nDBPort);
  g_Config.nDBPort := Config.ReadInteger('Server', 'DBPort', g_Config.nDBPort);

  if Config.ReadString('Server', 'IDSAddr', '') = '' then
    Config.WriteString('Server', 'IDSAddr', g_Config.sIDSAddr);
  g_Config.sIDSAddr := Config.ReadString('Server', 'IDSAddr', g_Config.sIDSAddr);

  if Config.ReadInteger('Server', 'IDSPort', -1) < 0 then
    Config.WriteInteger('Server', 'IDSPort', g_Config.nIDSPort);
  g_Config.nIDSPort := Config.ReadInteger('Server', 'IDSPort', g_Config.nIDSPort);

  if Config.ReadString('Server', 'MsgSrvAddr', '') = '' then
    Config.WriteString('Server', 'MsgSrvAddr', g_Config.sMsgSrvAddr);
  g_Config.sMsgSrvAddr := Config.ReadString('Server', 'MsgSrvAddr', g_Config.sMsgSrvAddr);

  if Config.ReadInteger('Server', 'MsgSrvPort', -1) < 0 then
    Config.WriteInteger('Server', 'MsgSrvPort', g_Config.nMsgSrvPort);
  g_Config.nMsgSrvPort := Config.ReadInteger('Server', 'MsgSrvPort', g_Config.nMsgSrvPort);

  if Config.ReadString('Server', 'LogServerAddr', '') = '' then
    Config.WriteString('Server', 'LogServerAddr', g_Config.sLogServerAddr);
  g_Config.sLogServerAddr := Config.ReadString('Server', 'LogServerAddr', g_Config.sLogServerAddr);

  if Config.ReadInteger('Server', 'LogServerPort', -1) < 0 then
    Config.WriteInteger('Server', 'LogServerPort', g_Config.nLogServerPort);
  g_Config.nLogServerPort := Config.ReadInteger('Server', 'LogServerPort', g_Config.nLogServerPort);

  if Config.ReadString('Server', 'DiscountForNightTime', '') = '' then
    Config.WriteString('Server', 'DiscountForNightTime', BoolToStr(g_Config.boDiscountForNightTime));
  g_Config.boDiscountForNightTime := CompareText(Config.ReadString('Server', 'DiscountForNightTime', 'FALSE'), 'TRUE') = 0;

  if Config.ReadInteger('Server', 'HalfFeeStart', -1) < 0 then
    Config.WriteInteger('Server', 'HalfFeeStart', g_Config.nHalfFeeStart);
  g_Config.nHalfFeeStart := Config.ReadInteger('Server', 'HalfFeeStart', g_Config.nHalfFeeStart);

  if Config.ReadInteger('Server', 'HalfFeeEnd', -1) < 0 then
    Config.WriteInteger('Server', 'HalfFeeEnd', g_Config.nHalfFeeEnd);
  g_Config.nHalfFeeEnd := Config.ReadInteger('Server', 'HalfFeeEnd', g_Config.nHalfFeeEnd);

  if Config.ReadInteger('Server', 'HumLimit', -1) < 0 then
    Config.WriteInteger('Server', 'HumLimit', g_dwHumLimit);
  g_dwHumLimit := Config.ReadInteger('Server', 'HumLimit', g_dwHumLimit);

  if Config.ReadInteger('Server', 'MonLimit', -1) < 0 then
    Config.WriteInteger('Server', 'MonLimit', g_dwMonLimit);
  g_dwMonLimit := Config.ReadInteger('Server', 'MonLimit', g_dwMonLimit);

  if Config.ReadInteger('Server', 'ZenLimit', -1) < 0 then
    Config.WriteInteger('Server', 'ZenLimit', g_dwZenLimit);
  g_dwZenLimit := Config.ReadInteger('Server', 'ZenLimit', g_dwZenLimit);

  if Config.ReadInteger('Server', 'NpcLimit', -1) < 0 then
    Config.WriteInteger('Server', 'NpcLimit', g_dwNpcLimit);
  g_dwNpcLimit := Config.ReadInteger('Server', 'NpcLimit', g_dwNpcLimit);

  if Config.ReadInteger('Server', 'SocLimit', -1) < 0 then
    Config.WriteInteger('Server', 'SocLimit', g_dwSocLimit);
  g_dwSocLimit := Config.ReadInteger('Server', 'SocLimit', g_dwSocLimit);

  if Config.ReadInteger('Server', 'DecLimit', -1) < 0 then
    Config.WriteInteger('Server', 'DecLimit', nDecLimit);
  nDecLimit := Config.ReadInteger('Server', 'DecLimit', nDecLimit);

  if Config.ReadInteger('Server', 'SendBlock', -1) < 0 then
    Config.WriteInteger('Server', 'SendBlock', g_Config.nSendBlock);
  g_Config.nSendBlock := Config.ReadInteger('Server', 'SendBlock', g_Config.nSendBlock);

  if Config.ReadInteger('Server', 'CheckBlock', -1) < 0 then
    Config.WriteInteger('Server', 'CheckBlock', g_Config.nCheckBlock);
  g_Config.nCheckBlock := Config.ReadInteger('Server', 'CheckBlock', g_Config.nCheckBlock);

  if Config.ReadInteger('Server', 'SocCheckTimeOut', -1) < 0 then
    Config.WriteInteger('Server', 'SocCheckTimeOut', g_dwSocCheckTimeOut);
  g_dwSocCheckTimeOut := Config.ReadInteger('Server', 'SocCheckTimeOut', g_dwSocCheckTimeOut);

  if Config.ReadInteger('Server', 'AvailableBlock', -1) < 0 then
    Config.WriteInteger('Server', 'AvailableBlock', g_Config.nAvailableBlock);
  g_Config.nAvailableBlock := Config.ReadInteger('Server', 'AvailableBlock', g_Config.nAvailableBlock);
{$IF TESTMODE = 1}
  if Config.ReadInteger('Server', 'GateLoad', -1) < 0 then
    Config.WriteInteger('Server', 'GateLoad', g_Config.nGateLoad);
  g_Config.nGateLoad := Config.ReadInteger('Server', 'GateLoad', g_Config.nGateLoad);
{$IFEND}
  if Config.ReadInteger('Server', 'UserFull', -1) < 0 then
    Config.WriteInteger('Server', 'UserFull', g_Config.nUserFull);
  g_Config.nUserFull := Config.ReadInteger('Server', 'UserFull', g_Config.nUserFull);

  if Config.ReadInteger('Server', 'ZenFastStep', -1) < 0 then
    Config.WriteInteger('Server', 'ZenFastStep', g_Config.nZenFastStep);
  g_Config.nZenFastStep := Config.ReadInteger('Server', 'ZenFastStep', g_Config.nZenFastStep);

{  if Config.ReadInteger('Server', 'ProcessMonstersTime', -1) < 0 then//20091103 注释
    Config.WriteInteger('Server', 'ProcessMonstersTime', g_Config.dwProcessMonstersTime);
  g_Config.dwProcessMonstersTime := Config.ReadInteger('Server', 'ProcessMonstersTime', g_Config.dwProcessMonstersTime);  }

  if Config.ReadInteger('Server', 'RegenMonstersTime', -1) < 0 then
    Config.WriteInteger('Server', 'RegenMonstersTime', g_Config.dwRegenMonstersTime);
  g_Config.dwRegenMonstersTime := Config.ReadInteger('Server', 'RegenMonstersTime', g_Config.dwRegenMonstersTime);

  if Config.ReadInteger('Server', 'HumanGetMsgTimeLimit', -1) < 0 then
    Config.WriteInteger('Server', 'HumanGetMsgTimeLimit', g_Config.dwHumanGetMsgTime);
  g_Config.dwHumanGetMsgTime := Config.ReadInteger('Server', 'HumanGetMsgTimeLimit', g_Config.dwHumanGetMsgTime);

  {if (MD5.EncryptString(g_sProductName) <> '82700a24a055c27073062735c233d6e5') or
     (MD5.EncryptString(g_sVersion) <> 'dfd2a178f1728b926f1c748cfb1dfd94') or
     (MD5.EncryptString(g_sProgram) <> 'eb8c6063b27da4f3906e96c4882a20ac') or
     (MD5.EncryptString(g_sWebSite) <> '98802f43ff881556bb02ad2ca116198b') or
     (MD5.EncryptString(g_sBbsSite) <> '34eacca1b042f154e6c8807aa6b11727') then begin
    g_Config.boCheckFail:=True;
  end; }

  //============================================================================
  //目录设置
  if Config.ReadString('Share', 'BaseDir', '') = '' then
    Config.WriteString('Share', 'BaseDir', g_Config.sBaseDir);
  g_Config.sBaseDir := Config.ReadString('Share', 'BaseDir', g_Config.sBaseDir);

  if Config.ReadString('Share', 'DivisionDir', '') = '' then
    Config.WriteString('Share', 'DivisionDir', g_Config.sDivisionDir);
  g_Config.sDivisionDir := Config.ReadString('Share', 'DivisionDir', g_Config.sDivisionDir);

  if Config.ReadString('Share', 'DivisionFile', '') = '' then
    Config.WriteString('Share', 'DivisionFile', g_Config.sDivisionFile);
  g_Config.sDivisionFile := Config.ReadString('Share', 'DivisionFile', g_Config.sDivisionFile);

  if Config.ReadString('Share', 'ApplyDivisionFile', '') = '' then
    Config.WriteString('Share', 'ApplyDivisionFile', g_Config.sApplyDivisionFile);
  g_Config.sApplyDivisionFile := Config.ReadString('Share', 'ApplyDivisionFile', g_Config.sApplyDivisionFile);

  if Config.ReadString('Share', 'GuildDir', '') = '' then
    Config.WriteString('Share', 'GuildDir', g_Config.sGuildDir);
  g_Config.sGuildDir := Config.ReadString('Share', 'GuildDir', g_Config.sGuildDir);

  if Config.ReadString('Share', 'GuildFile', '') = '' then
    Config.WriteString('Share', 'GuildFile', g_Config.sGuildFile);
  g_Config.sGuildFile := Config.ReadString('Share', 'GuildFile', g_Config.sGuildFile);

  if Config.ReadString('Share', 'VentureDir', '') = '' then
    Config.WriteString('Share', 'VentureDir', g_Config.sVentureDir);
  g_Config.sVentureDir := Config.ReadString('Share', 'VentureDir', g_Config.sVentureDir);

  if Config.ReadString('Share', 'ConLogDir', '') = '' then
    Config.WriteString('Share', 'ConLogDir', g_Config.sConLogDir);
  g_Config.sConLogDir := Config.ReadString('Share', 'ConLogDir', g_Config.sConLogDir);

  if Config.ReadString('Share', 'CastleDir', '') = '' then
    Config.WriteString('Share', 'CastleDir', g_Config.sCastleDir);
  g_Config.sCastleDir := Config.ReadString('Share', 'CastleDir', g_Config.sCastleDir);
//沙巴克文件
  if Config.ReadString('Share', 'CastleFile', '') = '' then
    Config.WriteString('Share', 'CastleFile', g_Config.sCastleDir + 'List.txt');
  g_Config.sCastleFile := Config.ReadString('Share', 'CastleFile', g_Config.sCastleFile);
//排行榜路径 20080220
  if Config.ReadString('Share', 'SortDir', '') = '' then
    Config.WriteString('Share', 'SortDir', g_Config.sSortDir);
  g_Config.sSortDir := Config.ReadString('Share', 'SortDir', g_Config.sSortDir);
//------------------------------------------------------------------------------
//宝箱路径,文件 20080114
  if Config.ReadString('Share', 'BoxsDir', '') = '' then
    Config.WriteString('Share', 'BoxsDir', g_Config.sBoxsDir);
  g_Config.sBoxsDir := Config.ReadString('Share', 'BoxsDir', g_Config.sBoxsDir);

  if Config.ReadString('Share', 'BoxsFile', '') = '' then
    Config.WriteString('Share', 'BoxsFile', g_Config.sBoxsFile);
  g_Config.sBoxsFile := Config.ReadString('Share', 'BoxsFile', g_Config.sBoxsFile);
//------------------------------------------------------------------------------
  if Config.ReadString('Share', 'EnvirDir', '') = '' then
    Config.WriteString('Share', 'EnvirDir', g_Config.sEnvirDir);
  g_Config.sEnvirDir := Config.ReadString('Share', 'EnvirDir', g_Config.sEnvirDir);

  if Config.ReadString('Share', 'MapDir', '') = '' then
    Config.WriteString('Share', 'MapDir', g_Config.sMapDir);
  g_Config.sMapDir := Config.ReadString('Share', 'MapDir', g_Config.sMapDir);

  if Config.ReadString('Share', 'NoticeDir', '') = '' then
    Config.WriteString('Share', 'NoticeDir', g_Config.sNoticeDir);
  g_Config.sNoticeDir := Config.ReadString('Share', 'NoticeDir', g_Config.sNoticeDir);

  sLoadString := Config.ReadString('Share', 'LogDir', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'LogDir', g_Config.sLogDir)
  else g_Config.sLogDir := sLoadString;

  if Config.ReadString('Share', 'PlugDir', '') = '' then
    Config.WriteString('Share', 'PlugDir', g_Config.sPlugDir);
  g_Config.sPlugDir := Config.ReadString('Share', 'PlugDir', g_Config.sPlugDir);

  //============================================================================
  //名称设置
  if Config.ReadString('Names', 'HealSkill', '') = '' then
    Config.WriteString('Names', 'HealSkill', g_Config.sHealSkill);
  g_Config.sHealSkill := Config.ReadString('Names', 'HealSkill', g_Config.sHealSkill);

  if Config.ReadString('Names', 'FireBallSkill', '') = '' then
    Config.WriteString('Names', 'FireBallSkill', g_Config.sFireBallSkill);
  g_Config.sFireBallSkill := Config.ReadString('Names', 'FireBallSkill', g_Config.sFireBallSkill);

  if Config.ReadString('Names', 'MeteorSKill', '') = '' then
    Config.WriteString('Names', 'MeteorSKill', g_Config.sMeteorSKill);
  g_Config.sMeteorSKill := Config.ReadString('Names', 'MeteorSKill', g_Config.sMeteorSKill);

  if Config.ReadString('Names', 'HeavenSKill', '') = '' then
    Config.WriteString('Names', 'HeavenSKill', g_Config.sHeavenSKill);
  g_Config.sHeavenSKill := Config.ReadString('Names', 'HeavenSKill', g_Config.sHeavenSKill);

  if Config.ReadString('Names', 'DragonSkill', '') = '' then
    Config.WriteString('Names', 'DragonSkill', g_Config.sDragonSkill);
  g_Config.sDragonSkill := Config.ReadString('Names', 'DragonSkill', g_Config.sDragonSkill);

  if Config.ReadString('Names', 'CallTrollSkill', '') = '' then
    Config.WriteString('Names', 'CallTrollSkill', g_Config.sCallTrollSkill);
  g_Config.sCallTrollSkill := Config.ReadString('Names', 'CallTrollSkill', g_Config.sCallTrollSkill);

  if Config.ReadString('Names', 'ClothsMan', '') = '' then
    Config.WriteString('Names', 'ClothsMan', g_Config.sClothsMan);
  g_Config.sClothsMan := Config.ReadString('Names', 'ClothsMan', g_Config.sClothsMan);

  if Config.ReadString('Names', 'ClothsWoman', '') = '' then
    Config.WriteString('Names', 'ClothsWoman', g_Config.sClothsWoman);
  g_Config.sClothsWoman := Config.ReadString('Names', 'ClothsWoman', g_Config.sClothsWoman);

  if Config.ReadString('Names', 'WoodenSword', '') = '' then
    Config.WriteString('Names', 'WoodenSword', g_Config.sWoodenSword);
  g_Config.sWoodenSword := Config.ReadString('Names', 'WoodenSword', g_Config.sWoodenSword);

  if Config.ReadString('Names', 'Candle', '') = '' then
    Config.WriteString('Names', 'Candle', g_Config.sCandle);
  g_Config.sCandle := Config.ReadString('Names', 'Candle', g_Config.sCandle);

  if Config.ReadString('Names', 'BasicDrug', '') = '' then
    Config.WriteString('Names', 'BasicDrug', g_Config.sBasicDrug);
  g_Config.sBasicDrug := Config.ReadString('Names', 'BasicDrug', g_Config.sBasicDrug);

  if Config.ReadString('Names', 'GoldStone', '') = '' then
    Config.WriteString('Names', 'GoldStone', g_Config.sGoldStone);
  g_Config.sGoldStone := Config.ReadString('Names', 'GoldStone', g_Config.sGoldStone);

  if Config.ReadString('Names', 'SilverStone', '') = '' then
    Config.WriteString('Names', 'SilverStone', g_Config.sSilverStone);
  g_Config.sSilverStone := Config.ReadString('Names', 'SilverStone', g_Config.sSilverStone);

  if Config.ReadString('Names', 'SteelStone', '') = '' then
    Config.WriteString('Names', 'SteelStone', g_Config.sSteelStone);
  g_Config.sSteelStone := Config.ReadString('Names', 'SteelStone', g_Config.sSteelStone);

  if Config.ReadString('Names', 'CopperStone', '') = '' then
    Config.WriteString('Names', 'CopperStone', g_Config.sCopperStone);
  g_Config.sCopperStone := Config.ReadString('Names', 'CopperStone', g_Config.sCopperStone);

  if Config.ReadString('Names', 'BlackStone', '') = '' then
    Config.WriteString('Names', 'BlackStone', g_Config.sBlackStone);
  g_Config.sBlackStone := Config.ReadString('Names', 'BlackStone', g_Config.sBlackStone);

  if Config.ReadString('Names', 'Zuma1', '') = '' then
    Config.WriteString('Names', 'Zuma1', g_Config.sZuma[0]);
  g_Config.sZuma[0] := Config.ReadString('Names', 'Zuma1', g_Config.sZuma[0]);

  if Config.ReadString('Names', 'Zuma2', '') = '' then
    Config.WriteString('Names', 'Zuma2', g_Config.sZuma[1]);
  g_Config.sZuma[1] := Config.ReadString('Names', 'Zuma2', g_Config.sZuma[1]);

  if Config.ReadString('Names', 'Zuma3', '') = '' then
    Config.WriteString('Names', 'Zuma3', g_Config.sZuma[2]);
  g_Config.sZuma[2] := Config.ReadString('Names', 'Zuma3', g_Config.sZuma[2]);

  if Config.ReadString('Names', 'Zuma4', '') = '' then
    Config.WriteString('Names', 'Zuma4', g_Config.sZuma[3]);
  g_Config.sZuma[3] := Config.ReadString('Names', 'Zuma4', g_Config.sZuma[3]);

  if Config.ReadString('Names', 'Bee', '') = '' then
    Config.WriteString('Names', 'Bee', g_Config.sBee);
  g_Config.sBee := Config.ReadString('Names', 'Bee', g_Config.sBee);

  if Config.ReadString('Names', 'ZhuFire', '') = '' then
    Config.WriteString('Names', 'ZhuFire', g_Config.sZhuFire);
  g_Config.sZhuFire := Config.ReadString('Names', 'ZhuFire', g_Config.sZhuFire);

  if Config.ReadString('Names', 'FoxBeads', '') = '' then
    Config.WriteString('Names', 'FoxBeads', g_Config.sFoxBeads);
  g_Config.sFoxBeads := Config.ReadString('Names', 'FoxBeads', g_Config.sFoxBeads);

  if Config.ReadString('Names', 'Spider', '') = '' then
    Config.WriteString('Names', 'Spider', g_Config.sSpider);
  g_Config.sSpider := Config.ReadString('Names', 'Spider', g_Config.sSpider);

  if Config.ReadString('Names', 'WomaHorn', '') = '' then
    Config.WriteString('Names', 'WomaHorn', g_Config.sWomaHorn);
  g_Config.sWomaHorn := Config.ReadString('Names', 'WomaHorn', g_Config.sWomaHorn);

  if Config.ReadString('Names', 'ZumaPiece', '') = '' then
    Config.WriteString('Names', 'ZumaPiece', g_Config.sZumaPiece);
  g_Config.sZumaPiece := Config.ReadString('Names', 'ZumaPiece', g_Config.sZumaPiece);

  if Config.ReadString('Names', 'Dogz', '') = '' then
    Config.WriteString('Names', 'Dogz', g_Config.sDogz);
  g_Config.sDogz := Config.ReadString('Names', 'Dogz', g_Config.sDogz);

  //召唤圣兽怪物名
  if Config.ReadString('Names', 'Sacred', '') = '' then
    Config.WriteString('Names', 'Sacred', g_Config.sSacredName);
  g_Config.sSacredName := Config.ReadString('Names', 'Sacred', g_Config.sSacredName);

//0级召唤巨魔 迷你型巨魔
  if Config.ReadString('Names', 'CallTroll', '') = '' then
    Config.WriteString('Names', 'CallTroll', g_Config.sCallTroll);
  g_Config.sCallTroll := Config.ReadString('Names', 'CallTroll', g_Config.sCallTroll);

//1级召唤巨魔 中号迷你型巨魔
  if Config.ReadString('Names', 'CallTroll1', '') = '' then
    Config.WriteString('Names', 'CallTroll1', g_Config.sCallTroll1);
  g_Config.sCallTroll1 := Config.ReadString('Names', 'CallTroll1', g_Config.sCallTroll1);

//2-4级召唤巨魔 大型型巨魔
  if Config.ReadString('Names', 'CallTroll2', '') = '' then
    Config.WriteString('Names', 'CallTroll2', g_Config.sCallTroll2);
  g_Config.sCallTroll2 := Config.ReadString('Names', 'CallTroll2', g_Config.sCallTroll2);
//---------------------------火灵-------------------------
  if Config.ReadString('Names', 'FireFairy', '') = '' then
    Config.WriteString('Names', 'FireFairy', g_Config.sFireFairy);
  g_Config.sFireFairy := Config.ReadString('Names', 'FireFairy', g_Config.sFireFairy);

  if Config.ReadInteger('Setup', 'FireFairyCount', -1) < 0 then
    Config.WriteInteger('Setup', 'FireFairyCount', g_Config.nFireFairyCount);
  g_Config.nFireFairyCount := Config.ReadInteger('Setup', 'FireFairyCount', g_Config.nFireFairyCount);

  if Config.ReadInteger('Setup', 'FireFairyDuntRate', -1) < 0 then
    Config.WriteInteger('Setup', 'FireFairyDuntRate', g_Config.nFireFairyDuntRate);
  g_Config.nFireFairyDuntRate := Config.ReadInteger('Setup', 'FireFairyDuntRate', g_Config.nFireFairyDuntRate);

  if Config.ReadInteger('Setup', 'FireFairyDuntRateBelow', -1) < 0 then
    Config.WriteInteger('Setup', 'FireFairyDuntRateBelow', g_Config.nFireFairyDuntRateBelow);
  g_Config.nFireFairyDuntRateBelow := Config.ReadInteger('Setup', 'FireFairyDuntRateBelow', g_Config.nFireFairyDuntRateBelow);

  if Config.ReadInteger('Setup', 'FireFairyAttackRate', -1) < 0 then
    Config.WriteInteger('Setup', 'FireFairyAttackRate', g_Config.nFireFairyAttackRate);
  g_Config.nFireFairyAttackRate := Config.ReadInteger('Setup', 'FireFairyAttackRate', g_Config.nFireFairyAttackRate);

  if Config.ReadInteger('Setup', 'FireFairyShareMasterMP', -1) < 0 then
    Config.WriteBool('Setup', 'FireFairyShareMasterMP', g_Config.boFireFairyShareMasterMP);
  g_Config.boFireFairyShareMasterMP := Config.ReadBool('Setup', 'FireFairyShareMasterMP', g_Config.boFireFairyShareMasterMP);

  if Config.ReadInteger('Setup', 'FireFairyNeglectACMAC', -1) < 0 then
    Config.WriteBool('Setup', 'FireFairyNeglectACMAC', g_Config.boFireFairyNeglectACMAC);
  g_Config.boFireFairyNeglectACMAC := Config.ReadBool('Setup', 'FireFairyNeglectACMAC', g_Config.boFireFairyNeglectACMAC);
  //----------------------------------------------------------
  //月灵
  if Config.ReadString('Names', 'Fairy', '') = '' then
    Config.WriteString('Names', 'Fairy', g_Config.sFairy);
  g_Config.sFairy := Config.ReadString('Names', 'Fairy', g_Config.sFairy);

  if Config.ReadString('Names', 'BoneFamm', '') = '' then
    Config.WriteString('Names', 'BoneFamm', g_Config.sBoneFamm);
  g_Config.sBoneFamm := Config.ReadString('Names', 'BoneFamm', g_Config.sBoneFamm);

  sLoadString := Config.ReadString('Share', 'GameGold', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'GameGold', g_Config.sGameGoldName)
  else g_Config.sGameGoldName := sLoadString;

//20071226 金刚石
  sLoadString := Config.ReadString('Share', 'GameDiaMond', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'GameDiaMond', g_Config.sGameDiaMond)
  else g_Config.sGameDiaMond := sLoadString;
//20071226 灵符
  sLoadString := Config.ReadString('Share', 'GameGird', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'GameGird', g_Config.sGameGird)
  else g_Config.sGameGird := sLoadString;
//20080511 荣誉
  sLoadString := Config.ReadString('Share', 'GameGlory', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'GameGlory', g_Config.sGameGlory)
  else g_Config.sGameGlory := sLoadString;

  sLoadString := Config.ReadString('Share', 'GamePoint', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'GamePoint', g_Config.sGamePointName)
  else g_Config.sGamePointName := sLoadString;

  sLoadString := Config.ReadString('Share', 'PayMentPointName', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'PayMentPointName', g_Config.sPayMentPointName)
  else g_Config.sPayMentPointName := sLoadString;

  //g_Config.boCheckFail := False;//20080806 注释，用于检查是否失败
  //if g_Config.nAppIconCrc <> 1242102148 then
    //g_Config.boCheckFail := True;
  //============================================================================
  //游戏设置
  if Config.ReadInteger('Setup', 'ItemNumber', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemNumber', g_Config.nItemNumber);
  g_Config.nItemNumber := Config.ReadInteger('Setup', 'ItemNumber', g_Config.nItemNumber);

  if Config.ReadInteger('Setup', 'ItemNumberEx', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemNumberEx', g_Config.nItemNumberEx);
  g_Config.nItemNumberEx := Config.ReadInteger('Setup', 'ItemNumberEx', g_Config.nItemNumberEx);

  if Config.ReadInteger('Setup', 'FengHaoNumber', -1) < 0 then
    Config.WriteInteger('Setup', 'FengHaoNumber', g_Config.nFengHaoNumber);
  g_Config.nFengHaoNumber := Config.ReadInteger('Setup', 'FengHaoNumber', g_Config.nFengHaoNumber);

  if Config.ReadString('Setup', 'ClientFile1', '') = '' then
    Config.WriteString('Setup', 'ClientFile1', g_Config.sClientFile1);
  g_Config.sClientFile1 := Config.ReadString('Setup', 'ClientFile1', g_Config.sClientFile1);

  {if Config.ReadString('Setup', 'ClientFile2', '') = '' then
    Config.WriteString('Setup', 'ClientFile2', g_Config.sClientFile2);
  g_Config.sClientFile2 := Config.ReadString('Setup', 'ClientFile2', g_Config.sClientFile2);

  if Config.ReadString('Setup', 'ClientFile3', '') = '' then
    Config.WriteString('Setup', 'ClientFile3', g_Config.sClientFile3);
  g_Config.sClientFile3 := Config.ReadString('Setup', 'ClientFile3', g_Config.sClientFile3); }

  if Config.ReadInteger('Setup', 'MonUpLvNeedKillBase', -1) < 0 then
    Config.WriteInteger('Setup', 'MonUpLvNeedKillBase', g_Config.nMonUpLvNeedKillBase);
  g_Config.nMonUpLvNeedKillBase := Config.ReadInteger('Setup', 'MonUpLvNeedKillBase', g_Config.nMonUpLvNeedKillBase);

  if Config.ReadInteger('Setup', 'MonUpLvRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MonUpLvRate', g_Config.nMonUpLvRate);
  g_Config.nMonUpLvRate := Config.ReadInteger('Setup', 'MonUpLvRate', g_Config.nMonUpLvRate);

  for I := Low(g_Config.MonUpLvNeedKillCount) to High(g_Config.MonUpLvNeedKillCount) do begin
    if Config.ReadInteger('Setup', 'MonUpLvNeedKillCount' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'MonUpLvNeedKillCount' + IntToStr(I), g_Config.MonUpLvNeedKillCount[I]);
    g_Config.MonUpLvNeedKillCount[I] := Config.ReadInteger('Setup', 'MonUpLvNeedKillCount' + IntToStr(I), g_Config.MonUpLvNeedKillCount[I]);
  end;

  for I := Low(g_Config.SlaveColor) to High(g_Config.SlaveColor) do begin
    if Config.ReadInteger('Setup', 'SlaveColor' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SlaveColor' + IntToStr(I), g_Config.SlaveColor[I]);
    g_Config.SlaveColor[I] := Config.ReadInteger('Setup', 'SlaveColor' + IntToStr(I), g_Config.SlaveColor[I]);
  end;

  if Config.ReadString('Setup', 'HomeMap', '') = '' then
    Config.WriteString('Setup', 'HomeMap', g_Config.sHomeMap);
  g_Config.sHomeMap := Config.ReadString('Setup', 'HomeMap', g_Config.sHomeMap);

  if Config.ReadInteger('Setup', 'HomeX', -1) < 0 then
    Config.WriteInteger('Setup', 'HomeX', g_Config.nHomeX);
  g_Config.nHomeX := Config.ReadInteger('Setup', 'HomeX', g_Config.nHomeX);

  if Config.ReadInteger('Setup', 'HomeY', -1) < 0 then
    Config.WriteInteger('Setup', 'HomeY', g_Config.nHomeY);
  g_Config.nHomeY := Config.ReadInteger('Setup', 'HomeY', g_Config.nHomeY);

  if Config.ReadString('Setup', 'RedHomeMap', '') = '' then
    Config.WriteString('Setup', 'RedHomeMap', g_Config.sRedHomeMap);
  g_Config.sRedHomeMap := Config.ReadString('Setup', 'RedHomeMap', g_Config.sRedHomeMap);

  if Config.ReadInteger('Setup', 'RedHomeX', -1) < 0 then
    Config.WriteInteger('Setup', 'RedHomeX', g_Config.nRedHomeX);
  g_Config.nRedHomeX := Config.ReadInteger('Setup', 'RedHomeX', g_Config.nRedHomeX);

  if Config.ReadInteger('Setup', 'RedHomeY', -1) < 0 then
    Config.WriteInteger('Setup', 'RedHomeY', g_Config.nRedHomeY);
  g_Config.nRedHomeY := Config.ReadInteger('Setup', 'RedHomeY', g_Config.nRedHomeY);

  if Config.ReadString('Setup', 'RedDieHomeMap', '') = '' then
    Config.WriteString('Setup', 'RedDieHomeMap', g_Config.sRedDieHomeMap);
  g_Config.sRedDieHomeMap := Config.ReadString('Setup', 'RedDieHomeMap', g_Config.sRedDieHomeMap);

  if Config.ReadInteger('Setup', 'RedDieHomeX', -1) < 0 then
    Config.WriteInteger('Setup', 'RedDieHomeX', g_Config.nRedDieHomeX);
  g_Config.nRedDieHomeX := Config.ReadInteger('Setup', 'RedDieHomeX', g_Config.nRedDieHomeX);

  if Config.ReadInteger('Setup', 'RedDieHomeY', -1) < 0 then
    Config.WriteInteger('Setup', 'RedDieHomeY', g_Config.nRedDieHomeY);
  g_Config.nRedDieHomeY := Config.ReadInteger('Setup', 'RedDieHomeY', g_Config.nRedDieHomeY);

  nLoadInteger := Config.ReadInteger('Setup', 'HealthFillTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HealthFillTime', g_Config.nHealthFillTime)
  else g_Config.nHealthFillTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'SpellFillTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SpellFillTime', g_Config.nSpellFillTime)
  else g_Config.nSpellFillTime := nLoadInteger;

  if Config.ReadInteger('Setup', 'DecPkPointTime', -1) < 0 then
    Config.WriteInteger('Setup', 'DecPkPointTime', g_Config.dwDecPkPointTime);
  g_Config.dwDecPkPointTime := Config.ReadInteger('Setup', 'DecPkPointTime', g_Config.dwDecPkPointTime);

  if Config.ReadInteger('Setup', 'DecPkPointCount', -1) < 0 then
    Config.WriteInteger('Setup', 'DecPkPointCount', g_Config.nDecPkPointCount);
  g_Config.nDecPkPointCount := Config.ReadInteger('Setup', 'DecPkPointCount', g_Config.nDecPkPointCount);

  if Config.ReadInteger('Setup', 'PKFlagTime', -1) < 0 then
    Config.WriteInteger('Setup', 'PKFlagTime', g_Config.dwPKFlagTime);
  g_Config.dwPKFlagTime := Config.ReadInteger('Setup', 'PKFlagTime', g_Config.dwPKFlagTime);

//杀人武器被诅咒机率 20081020
  if Config.ReadInteger('Setup', 'KillHumanWeaponUnlockRate', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanWeaponUnlockRate', g_Config.nKillHumanWeaponUnlockRate);
  g_Config.nKillHumanWeaponUnlockRate := Config.ReadInteger('Setup', 'KillHumanWeaponUnlockRate', g_Config.nKillHumanWeaponUnlockRate);

  if Config.ReadInteger('Setup', 'KillHumanAddPKPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanAddPKPoint', g_Config.nKillHumanAddPKPoint);
  g_Config.nKillHumanAddPKPoint := Config.ReadInteger('Setup', 'KillHumanAddPKPoint', g_Config.nKillHumanAddPKPoint);

  if Config.ReadInteger('Setup', 'KillHumanDecLuckPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanDecLuckPoint', g_Config.nKillHumanDecLuckPoint);
  g_Config.nKillHumanDecLuckPoint := Config.ReadInteger('Setup', 'KillHumanDecLuckPoint', g_Config.nKillHumanDecLuckPoint);

  if Config.ReadInteger('Setup', 'DecLightItemDrugTime', -1) < 0 then
    Config.WriteInteger('Setup', 'DecLightItemDrugTime', g_Config.dwDecLightItemDrugTime);
  g_Config.dwDecLightItemDrugTime := Config.ReadInteger('Setup', 'DecLightItemDrugTime', g_Config.dwDecLightItemDrugTime);

  if Config.ReadInteger('Setup', 'SafeZoneSize', -1) < 0 then
    Config.WriteInteger('Setup', 'SafeZoneSize', g_Config.nSafeZoneSize);
  g_Config.nSafeZoneSize := Config.ReadInteger('Setup', 'SafeZoneSize', g_Config.nSafeZoneSize);

  if Config.ReadInteger('Setup', 'StartPointSize', -1) < 0 then
    Config.WriteInteger('Setup', 'StartPointSize', g_Config.nStartPointSize);
  g_Config.nStartPointSize := Config.ReadInteger('Setup', 'StartPointSize', g_Config.nStartPointSize);

//脉穴打通所需内功等级 20090618
  for I := Low(g_Config.dwPulsePointNGLevel) to High(g_Config.dwPulsePointNGLevel) do begin
    if Config.ReadInteger('Setup', 'PulsePointNGLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'PulsePointNGLevel' + IntToStr(I), g_Config.dwPulsePointNGLevel[I]);
    g_Config.dwPulsePointNGLevel[I] := Config.ReadInteger('Setup', 'PulsePointNGLevel' + IntToStr(I), g_Config.dwPulsePointNGLevel[I]);

    if I <= High(g_Config.ReNewNameColor) then begin//20110713 修改
      if Config.ReadInteger('Setup', 'ReNewNameColor' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'ReNewNameColor' + IntToStr(I), g_Config.ReNewNameColor[I]);
      g_Config.ReNewNameColor[I] := Config.ReadInteger('Setup', 'ReNewNameColor' + IntToStr(I), g_Config.ReNewNameColor[I]);
    end;
  end;
  {for I := Low(g_Config.ReNewNameColor) to High(g_Config.ReNewNameColor) do begin
    if Config.ReadInteger('Setup', 'ReNewNameColor' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'ReNewNameColor' + IntToStr(I), g_Config.ReNewNameColor[I]);
    g_Config.ReNewNameColor[I] := Config.ReadInteger('Setup', 'ReNewNameColor' + IntToStr(I), g_Config.ReNewNameColor[I]);
  end;}
  if Config.ReadInteger('Setup', 'ReNewNameColorTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ReNewNameColorTime', g_Config.dwReNewNameColorTime);
  g_Config.dwReNewNameColorTime := Config.ReadInteger('Setup', 'ReNewNameColorTime', g_Config.dwReNewNameColorTime);

  if Config.ReadInteger('Setup', 'ReNewChangeColor', -1) < 0 then
    Config.WriteBool('Setup', 'ReNewChangeColor', g_Config.boReNewChangeColor);
  g_Config.boReNewChangeColor := Config.ReadBool('Setup', 'ReNewChangeColor', g_Config.boReNewChangeColor);

  if Config.ReadInteger('Setup', 'ReNewLevelClearExp', -1) < 0 then
    Config.WriteBool('Setup', 'ReNewLevelClearExp', g_Config.boReNewLevelClearExp);
  g_Config.boReNewLevelClearExp := Config.ReadBool('Setup', 'ReNewLevelClearExp', g_Config.boReNewLevelClearExp);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrDC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrDC', g_Config.BonusAbilofWarr.DC);
  g_Config.BonusAbilofWarr.DC := Config.ReadInteger('Setup', 'BonusAbilofWarrDC', g_Config.BonusAbilofWarr.DC);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrMC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrMC', g_Config.BonusAbilofWarr.MC);
  g_Config.BonusAbilofWarr.MC := Config.ReadInteger('Setup', 'BonusAbilofWarrMC', g_Config.BonusAbilofWarr.MC);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrSC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrSC', g_Config.BonusAbilofWarr.SC);
  g_Config.BonusAbilofWarr.SC := Config.ReadInteger('Setup', 'BonusAbilofWarrSC', g_Config.BonusAbilofWarr.SC);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrAC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrAC', g_Config.BonusAbilofWarr.AC);
  g_Config.BonusAbilofWarr.AC := Config.ReadInteger('Setup', 'BonusAbilofWarrAC', g_Config.BonusAbilofWarr.AC);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrMAC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrMAC', g_Config.BonusAbilofWarr.MAC);
  g_Config.BonusAbilofWarr.MAC := Config.ReadInteger('Setup', 'BonusAbilofWarrMAC', g_Config.BonusAbilofWarr.MAC);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrHP', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrHP', g_Config.BonusAbilofWarr.HP);
  g_Config.BonusAbilofWarr.HP := Config.ReadInteger('Setup', 'BonusAbilofWarrHP', g_Config.BonusAbilofWarr.HP);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrMP', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrMP', g_Config.BonusAbilofWarr.MP);
  g_Config.BonusAbilofWarr.MP := Config.ReadInteger('Setup', 'BonusAbilofWarrMP', g_Config.BonusAbilofWarr.MP);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrHit', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrHit', g_Config.BonusAbilofWarr.Hit);
  g_Config.BonusAbilofWarr.Hit := Config.ReadInteger('Setup', 'BonusAbilofWarrHit', g_Config.BonusAbilofWarr.Hit);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrSpeed', g_Config.BonusAbilofWarr.Speed);
  g_Config.BonusAbilofWarr.Speed := Config.ReadInteger('Setup', 'BonusAbilofWarrSpeed', g_Config.BonusAbilofWarr.Speed);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrX2', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrX2', g_Config.BonusAbilofWarr.X2);
  g_Config.BonusAbilofWarr.X2 := Config.ReadInteger('Setup', 'BonusAbilofWarrX2', g_Config.BonusAbilofWarr.X2);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardDC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardDC', g_Config.BonusAbilofWizard.DC);
  g_Config.BonusAbilofWizard.DC := Config.ReadInteger('Setup', 'BonusAbilofWizardDC', g_Config.BonusAbilofWizard.DC);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardMC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardMC', g_Config.BonusAbilofWizard.MC);
  g_Config.BonusAbilofWizard.MC := Config.ReadInteger('Setup', 'BonusAbilofWizardMC', g_Config.BonusAbilofWizard.MC);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardSC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardSC', g_Config.BonusAbilofWizard.SC);
  g_Config.BonusAbilofWizard.SC := Config.ReadInteger('Setup', 'BonusAbilofWizardSC', g_Config.BonusAbilofWizard.SC);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardAC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardAC', g_Config.BonusAbilofWizard.AC);
  g_Config.BonusAbilofWizard.AC := Config.ReadInteger('Setup', 'BonusAbilofWizardAC', g_Config.BonusAbilofWizard.AC);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardMAC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardMAC', g_Config.BonusAbilofWizard.MAC);
  g_Config.BonusAbilofWizard.MAC := Config.ReadInteger('Setup', 'BonusAbilofWizardMAC', g_Config.BonusAbilofWizard.MAC);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardHP', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardHP', g_Config.BonusAbilofWizard.HP);
  g_Config.BonusAbilofWizard.HP := Config.ReadInteger('Setup', 'BonusAbilofWizardHP', g_Config.BonusAbilofWizard.HP);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardMP', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardMP', g_Config.BonusAbilofWizard.MP);
  g_Config.BonusAbilofWizard.MP := Config.ReadInteger('Setup', 'BonusAbilofWizardMP', g_Config.BonusAbilofWizard.MP);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardHit', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardHit', g_Config.BonusAbilofWizard.Hit);
  g_Config.BonusAbilofWizard.Hit := Config.ReadInteger('Setup', 'BonusAbilofWizardHit', g_Config.BonusAbilofWizard.Hit);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardSpeed', g_Config.BonusAbilofWizard.Speed);
  g_Config.BonusAbilofWizard.Speed := Config.ReadInteger('Setup', 'BonusAbilofWizardSpeed', g_Config.BonusAbilofWizard.Speed);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardX2', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardX2', g_Config.BonusAbilofWizard.X2);
  g_Config.BonusAbilofWizard.X2 := Config.ReadInteger('Setup', 'BonusAbilofWizardX2', g_Config.BonusAbilofWizard.X2);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosDC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosDC', g_Config.BonusAbilofTaos.DC);
  g_Config.BonusAbilofTaos.DC := Config.ReadInteger('Setup', 'BonusAbilofTaosDC', g_Config.BonusAbilofTaos.DC);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosMC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosMC', g_Config.BonusAbilofTaos.MC);
  g_Config.BonusAbilofTaos.MC := Config.ReadInteger('Setup', 'BonusAbilofTaosMC', g_Config.BonusAbilofTaos.MC);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosSC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosSC', g_Config.BonusAbilofTaos.SC);
  g_Config.BonusAbilofTaos.SC := Config.ReadInteger('Setup', 'BonusAbilofTaosSC', g_Config.BonusAbilofTaos.SC);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosAC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosAC', g_Config.BonusAbilofTaos.AC);
  g_Config.BonusAbilofTaos.AC := Config.ReadInteger('Setup', 'BonusAbilofTaosAC', g_Config.BonusAbilofTaos.AC);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosMAC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosMAC', g_Config.BonusAbilofTaos.MAC);
  g_Config.BonusAbilofTaos.MAC := Config.ReadInteger('Setup', 'BonusAbilofTaosMAC', g_Config.BonusAbilofTaos.MAC);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosHP', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosHP', g_Config.BonusAbilofTaos.HP);
  g_Config.BonusAbilofTaos.HP := Config.ReadInteger('Setup', 'BonusAbilofTaosHP', g_Config.BonusAbilofTaos.HP);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosMP', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosMP', g_Config.BonusAbilofTaos.MP);
  g_Config.BonusAbilofTaos.MP := Config.ReadInteger('Setup', 'BonusAbilofTaosMP', g_Config.BonusAbilofTaos.MP);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosHit', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosHit', g_Config.BonusAbilofTaos.Hit);
  g_Config.BonusAbilofTaos.Hit := Config.ReadInteger('Setup', 'BonusAbilofTaosHit', g_Config.BonusAbilofTaos.Hit);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosSpeed', g_Config.BonusAbilofTaos.Speed);
  g_Config.BonusAbilofTaos.Speed := Config.ReadInteger('Setup', 'BonusAbilofTaosSpeed', g_Config.BonusAbilofTaos.Speed);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosX2', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosX2', g_Config.BonusAbilofTaos.X2);
  g_Config.BonusAbilofTaos.X2 := Config.ReadInteger('Setup', 'BonusAbilofTaosX2', g_Config.BonusAbilofTaos.X2);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrDC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrDC', g_Config.NakedAbilofWarr.DC);
  g_Config.NakedAbilofWarr.DC := Config.ReadInteger('Setup', 'NakedAbilofWarrDC', g_Config.NakedAbilofWarr.DC);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrMC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrMC', g_Config.NakedAbilofWarr.MC);
  g_Config.NakedAbilofWarr.MC := Config.ReadInteger('Setup', 'NakedAbilofWarrMC', g_Config.NakedAbilofWarr.MC);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrSC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrSC', g_Config.NakedAbilofWarr.SC);
  g_Config.NakedAbilofWarr.SC := Config.ReadInteger('Setup', 'NakedAbilofWarrSC', g_Config.NakedAbilofWarr.SC);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrAC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrAC', g_Config.NakedAbilofWarr.AC);
  g_Config.NakedAbilofWarr.AC := Config.ReadInteger('Setup', 'NakedAbilofWarrAC', g_Config.NakedAbilofWarr.AC);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrMAC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrMAC', g_Config.NakedAbilofWarr.MAC);
  g_Config.NakedAbilofWarr.MAC := Config.ReadInteger('Setup', 'NakedAbilofWarrMAC', g_Config.NakedAbilofWarr.MAC);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrHP', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrHP', g_Config.NakedAbilofWarr.HP);
  g_Config.NakedAbilofWarr.HP := Config.ReadInteger('Setup', 'NakedAbilofWarrHP', g_Config.NakedAbilofWarr.HP);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrMP', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrMP', g_Config.NakedAbilofWarr.MP);
  g_Config.NakedAbilofWarr.MP := Config.ReadInteger('Setup', 'NakedAbilofWarrMP', g_Config.NakedAbilofWarr.MP);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrHit', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrHit', g_Config.NakedAbilofWarr.Hit);
  g_Config.NakedAbilofWarr.Hit := Config.ReadInteger('Setup', 'NakedAbilofWarrHit', g_Config.NakedAbilofWarr.Hit);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrSpeed', g_Config.NakedAbilofWarr.Speed);
  g_Config.NakedAbilofWarr.Speed := Config.ReadInteger('Setup', 'NakedAbilofWarrSpeed', g_Config.NakedAbilofWarr.Speed);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrX2', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrX2', g_Config.NakedAbilofWarr.X2);
  g_Config.NakedAbilofWarr.X2 := Config.ReadInteger('Setup', 'NakedAbilofWarrX2', g_Config.NakedAbilofWarr.X2);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardDC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardDC', g_Config.NakedAbilofWizard.DC);
  g_Config.NakedAbilofWizard.DC := Config.ReadInteger('Setup', 'NakedAbilofWizardDC', g_Config.NakedAbilofWizard.DC);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardMC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardMC', g_Config.NakedAbilofWizard.MC);
  g_Config.NakedAbilofWizard.MC := Config.ReadInteger('Setup', 'NakedAbilofWizardMC', g_Config.NakedAbilofWizard.MC);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardSC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardSC', g_Config.NakedAbilofWizard.SC);
  g_Config.NakedAbilofWizard.SC := Config.ReadInteger('Setup', 'NakedAbilofWizardSC', g_Config.NakedAbilofWizard.SC);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardAC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardAC', g_Config.NakedAbilofWizard.AC);
  g_Config.NakedAbilofWizard.AC := Config.ReadInteger('Setup', 'NakedAbilofWizardAC', g_Config.NakedAbilofWizard.AC);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardMAC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardMAC', g_Config.NakedAbilofWizard.MAC);
  g_Config.NakedAbilofWizard.MAC := Config.ReadInteger('Setup', 'NakedAbilofWizardMAC', g_Config.NakedAbilofWizard.MAC);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardHP', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardHP', g_Config.NakedAbilofWizard.HP);
  g_Config.NakedAbilofWizard.HP := Config.ReadInteger('Setup', 'NakedAbilofWizardHP', g_Config.NakedAbilofWizard.HP);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardMP', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardMP', g_Config.NakedAbilofWizard.MP);
  g_Config.NakedAbilofWizard.MP := Config.ReadInteger('Setup', 'NakedAbilofWizardMP', g_Config.NakedAbilofWizard.MP);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardHit', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardHit', g_Config.NakedAbilofWizard.Hit);
  g_Config.NakedAbilofWizard.Hit := Config.ReadInteger('Setup', 'NakedAbilofWizardHit', g_Config.NakedAbilofWizard.Hit);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardSpeed', g_Config.NakedAbilofWizard.Speed);
  g_Config.NakedAbilofWizard.Speed := Config.ReadInteger('Setup', 'NakedAbilofWizardSpeed', g_Config.NakedAbilofWizard.Speed);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardX2', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardX2', g_Config.NakedAbilofWizard.X2);
  g_Config.NakedAbilofWizard.X2 := Config.ReadInteger('Setup', 'NakedAbilofWizardX2', g_Config.NakedAbilofWizard.X2);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosDC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosDC', g_Config.NakedAbilofTaos.DC);
  g_Config.NakedAbilofTaos.DC := Config.ReadInteger('Setup', 'NakedAbilofTaosDC', g_Config.NakedAbilofTaos.DC);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosMC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosMC', g_Config.NakedAbilofTaos.MC);
  g_Config.NakedAbilofTaos.MC := Config.ReadInteger('Setup', 'NakedAbilofTaosMC', g_Config.NakedAbilofTaos.MC);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosSC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosSC', g_Config.NakedAbilofTaos.SC);
  g_Config.NakedAbilofTaos.SC := Config.ReadInteger('Setup', 'NakedAbilofTaosSC', g_Config.NakedAbilofTaos.SC);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosAC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosAC', g_Config.NakedAbilofTaos.AC);
  g_Config.NakedAbilofTaos.AC := Config.ReadInteger('Setup', 'NakedAbilofTaosAC', g_Config.NakedAbilofTaos.AC);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosMAC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosMAC', g_Config.NakedAbilofTaos.MAC);
  g_Config.NakedAbilofTaos.MAC := Config.ReadInteger('Setup', 'NakedAbilofTaosMAC', g_Config.NakedAbilofTaos.MAC);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosHP', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosHP', g_Config.NakedAbilofTaos.HP);
  g_Config.NakedAbilofTaos.HP := Config.ReadInteger('Setup', 'NakedAbilofTaosHP', g_Config.NakedAbilofTaos.HP);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosMP', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosMP', g_Config.NakedAbilofTaos.MP);
  g_Config.NakedAbilofTaos.MP := Config.ReadInteger('Setup', 'NakedAbilofTaosMP', g_Config.NakedAbilofTaos.MP);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosHit', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosHit', g_Config.NakedAbilofTaos.Hit);
  g_Config.NakedAbilofTaos.Hit := Config.ReadInteger('Setup', 'NakedAbilofTaosHit', g_Config.NakedAbilofTaos.Hit);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosSpeed', g_Config.NakedAbilofTaos.Speed);
  g_Config.NakedAbilofTaos.Speed := Config.ReadInteger('Setup', 'NakedAbilofTaosSpeed', g_Config.NakedAbilofTaos.Speed);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosX2', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosX2', g_Config.NakedAbilofTaos.X2);
  g_Config.NakedAbilofTaos.X2 := Config.ReadInteger('Setup', 'NakedAbilofTaosX2', g_Config.NakedAbilofTaos.X2);

//新建行会成员上限 20090115
  if Config.ReadInteger('Setup', 'GuildMemberCount', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildMemberCount', g_Config.nGuildMemberCount);
  g_Config.nGuildMemberCount := Config.ReadInteger('Setup', 'GuildMemberCount', g_Config.nGuildMemberCount);

  if Config.ReadInteger('Setup', 'GroupMembersMax', -1) < 0 then
    Config.WriteInteger('Setup', 'GroupMembersMax', g_Config.nGroupMembersMax);
  g_Config.nGroupMembersMax := Config.ReadInteger('Setup', 'GroupMembersMax', g_Config.nGroupMembersMax);
{$IF M2Version <> 2}
  //拆分赤炎石费用类型 0-元宝 1-金币 2-灵符 3-金刚石
  if Config.ReadInteger('Setup', 'ArmsTearPriceType', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmsTearPriceType', g_Config.nArmsTearPriceType);
  g_Config.nArmsTearPriceType := Config.ReadInteger('Setup', 'ArmsTearPriceType', g_Config.nArmsTearPriceType);

  //拆分武器赤炎石费用倍数 20100709
  if Config.ReadInteger('Setup', 'ArmsTearPriceRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmsTearPriceRate', g_Config.nArmsTearPriceRate);
  g_Config.nArmsTearPriceRate := Config.ReadInteger('Setup', 'ArmsTearPriceRate', g_Config.nArmsTearPriceRate);

  //武器暴击等级出现暴击机率参数 20100709
  if Config.ReadInteger('Setup', 'ArmsCritRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmsCritRate', g_Config.nArmsCritRate);
  g_Config.nArmsCritRate := Config.ReadInteger('Setup', 'ArmsCritRate', g_Config.nArmsCritRate);

//武器暴击累积上限
  if Config.ReadInteger('Setup', 'MaxHeapStruckDamage', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxHeapStruckDamage', g_Config.nMaxHeapStruckDamage);
  g_Config.nMaxHeapStruckDamage := Config.ReadInteger('Setup', 'MaxHeapStruckDamage', g_Config.nMaxHeapStruckDamage);

  if Config.ReadString('Names', 'ArmsExchangeItme', '') = '' then
    Config.WriteString('Names', 'ArmsExchangeItme', g_Config.sArmsExchangeItme);
  g_Config.sArmsExchangeItme := Config.ReadString('Names', 'ArmsExchangeItme', g_Config.sArmsExchangeItme);
{$IFEND}  
  if Config.ReadInteger('Setup', 'UPgradeWeaponGetBackTime', -1) < 0 then
    Config.WriteInteger('Setup', 'UPgradeWeaponGetBackTime', g_Config.dwUPgradeWeaponGetBackTime);
  g_Config.dwUPgradeWeaponGetBackTime := Config.ReadInteger('Setup', 'UPgradeWeaponGetBackTime', g_Config.dwUPgradeWeaponGetBackTime);

  if Config.ReadInteger('Setup', 'ClearExpireUpgradeWeaponDays', -1) < 0 then
    Config.WriteInteger('Setup', 'ClearExpireUpgradeWeaponDays', g_Config.nClearExpireUpgradeWeaponDays);
  g_Config.nClearExpireUpgradeWeaponDays := Config.ReadInteger('Setup', 'ClearExpireUpgradeWeaponDays', g_Config.nClearExpireUpgradeWeaponDays);

  if Config.ReadInteger('Setup', 'UpgradeWeaponPrice', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponPrice', g_Config.nUpgradeWeaponPrice);
  g_Config.nUpgradeWeaponPrice := Config.ReadInteger('Setup', 'UpgradeWeaponPrice', g_Config.nUpgradeWeaponPrice);

  if Config.ReadInteger('Setup', 'UpgradeWeaponMaxPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponMaxPoint', g_Config.nUpgradeWeaponMaxPoint);
  g_Config.nUpgradeWeaponMaxPoint := Config.ReadInteger('Setup', 'UpgradeWeaponMaxPoint', g_Config.nUpgradeWeaponMaxPoint);

  if Config.ReadInteger('Setup', 'UpgradeWeaponDCRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponDCRate', g_Config.nUpgradeWeaponDCRate);
  g_Config.nUpgradeWeaponDCRate := Config.ReadInteger('Setup', 'UpgradeWeaponDCRate', g_Config.nUpgradeWeaponDCRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponDCTwoPointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponDCTwoPointRate', g_Config.nUpgradeWeaponDCTwoPointRate);
  g_Config.nUpgradeWeaponDCTwoPointRate := Config.ReadInteger('Setup', 'UpgradeWeaponDCTwoPointRate', g_Config.nUpgradeWeaponDCTwoPointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponDCThreePointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponDCThreePointRate', g_Config.nUpgradeWeaponDCThreePointRate);
  g_Config.nUpgradeWeaponDCThreePointRate := Config.ReadInteger('Setup', 'UpgradeWeaponDCThreePointRate', g_Config.nUpgradeWeaponDCThreePointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponMCRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponMCRate', g_Config.nUpgradeWeaponMCRate);
  g_Config.nUpgradeWeaponMCRate := Config.ReadInteger('Setup', 'UpgradeWeaponMCRate', g_Config.nUpgradeWeaponMCRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponMCTwoPointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponMCTwoPointRate', g_Config.nUpgradeWeaponMCTwoPointRate);
  g_Config.nUpgradeWeaponMCTwoPointRate := Config.ReadInteger('Setup', 'UpgradeWeaponMCTwoPointRate', g_Config.nUpgradeWeaponMCTwoPointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponMCThreePointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponMCThreePointRate', g_Config.nUpgradeWeaponMCThreePointRate);
  g_Config.nUpgradeWeaponMCThreePointRate := Config.ReadInteger('Setup', 'UpgradeWeaponMCThreePointRate', g_Config.nUpgradeWeaponMCThreePointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponSCRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponSCRate', g_Config.nUpgradeWeaponSCRate);
  g_Config.nUpgradeWeaponSCRate := Config.ReadInteger('Setup', 'UpgradeWeaponSCRate', g_Config.nUpgradeWeaponSCRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponSCTwoPointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponSCTwoPointRate', g_Config.nUpgradeWeaponSCTwoPointRate);
  g_Config.nUpgradeWeaponSCTwoPointRate := Config.ReadInteger('Setup', 'UpgradeWeaponSCTwoPointRate', g_Config.nUpgradeWeaponSCTwoPointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponSCThreePointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponSCThreePointRate', g_Config.nUpgradeWeaponSCThreePointRate);
  g_Config.nUpgradeWeaponSCThreePointRate := Config.ReadInteger('Setup', 'UpgradeWeaponSCThreePointRate', g_Config.nUpgradeWeaponSCThreePointRate);

  if Config.ReadInteger('Setup', 'BuildGuild', -1) < 0 then
    Config.WriteInteger('Setup', 'BuildGuild', g_Config.nBuildGuildPrice);
  g_Config.nBuildGuildPrice := Config.ReadInteger('Setup', 'BuildGuild', g_Config.nBuildGuildPrice);

  if Config.ReadInteger('Setup', 'MakeDurg', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeDurg', g_Config.nMakeDurgPrice);
  g_Config.nMakeDurgPrice := Config.ReadInteger('Setup', 'MakeDurg', g_Config.nMakeDurgPrice);

  if Config.ReadInteger('Setup', 'GuildWarFee', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildWarFee', g_Config.nGuildWarPrice);
  g_Config.nGuildWarPrice := Config.ReadInteger('Setup', 'GuildWarFee', g_Config.nGuildWarPrice);

  if Config.ReadInteger('Setup', 'HireGuard', -1) < 0 then
    Config.WriteInteger('Setup', 'HireGuard', g_Config.nHireGuardPrice);
  g_Config.nHireGuardPrice := Config.ReadInteger('Setup', 'HireGuard', g_Config.nHireGuardPrice);

  if Config.ReadInteger('Setup', 'HireArcher', -1) < 0 then
    Config.WriteInteger('Setup', 'HireArcher', g_Config.nHireArcherPrice);
  g_Config.nHireArcherPrice := Config.ReadInteger('Setup', 'HireArcher', g_Config.nHireArcherPrice);

  if Config.ReadInteger('Setup', 'RepairDoor', -1) < 0 then
    Config.WriteInteger('Setup', 'RepairDoor', g_Config.nRepairDoorPrice);
  g_Config.nRepairDoorPrice := Config.ReadInteger('Setup', 'RepairDoor', g_Config.nRepairDoorPrice);

  if Config.ReadInteger('Setup', 'RepairWall', -1) < 0 then
    Config.WriteInteger('Setup', 'RepairWall', g_Config.nRepairWallPrice);
  g_Config.nRepairWallPrice := Config.ReadInteger('Setup', 'RepairWall', g_Config.nRepairWallPrice);

  if Config.ReadInteger('Setup', 'CastleMemberPriceRate', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleMemberPriceRate', g_Config.nCastleMemberPriceRate);
  g_Config.nCastleMemberPriceRate := Config.ReadInteger('Setup', 'CastleMemberPriceRate', g_Config.nCastleMemberPriceRate);

  if Config.ReadInteger('Setup', 'CastleGoldMax', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleGoldMax', g_Config.nCastleGoldMax);
  g_Config.nCastleGoldMax := Config.ReadInteger('Setup', 'CastleGoldMax', g_Config.nCastleGoldMax);

  if Config.ReadInteger('Setup', 'CastleOneDayGold', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleOneDayGold', g_Config.nCastleOneDayGold);
  g_Config.nCastleOneDayGold := Config.ReadInteger('Setup', 'CastleOneDayGold', g_Config.nCastleOneDayGold);

  if Config.ReadString('Setup', 'CastleName', '') = '' then
    Config.WriteString('Setup', 'CastleName', g_Config.sCASTLENAME);
  g_Config.sCASTLENAME := Config.ReadString('Setup', 'CastleName', g_Config.sCASTLENAME);

  if Config.ReadString('Setup', 'CastleHomeMap', '') = '' then
    Config.WriteString('Setup', 'CastleHomeMap', g_Config.sCastleHomeMap);
  g_Config.sCastleHomeMap := Config.ReadString('Setup', 'CastleHomeMap', g_Config.sCastleHomeMap);

  if Config.ReadInteger('Setup', 'CastleHomeX', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleHomeX', g_Config.nCastleHomeX);
  g_Config.nCastleHomeX := Config.ReadInteger('Setup', 'CastleHomeX', g_Config.nCastleHomeX);

  if Config.ReadInteger('Setup', 'CastleHomeY', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleHomeY', g_Config.nCastleHomeY);
  g_Config.nCastleHomeY := Config.ReadInteger('Setup', 'CastleHomeY', g_Config.nCastleHomeY);

  if Config.ReadInteger('Setup', 'CastleWarRangeX', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleWarRangeX', g_Config.nCastleWarRangeX);
  g_Config.nCastleWarRangeX := Config.ReadInteger('Setup', 'CastleWarRangeX', g_Config.nCastleWarRangeX);

  if Config.ReadInteger('Setup', 'CastleWarRangeY', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleWarRangeY', g_Config.nCastleWarRangeY);
  g_Config.nCastleWarRangeY := Config.ReadInteger('Setup', 'CastleWarRangeY', g_Config.nCastleWarRangeY);

  if Config.ReadInteger('Setup', 'CastleTaxRate', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleTaxRate', g_Config.nCastleTaxRate);
  g_Config.nCastleTaxRate := Config.ReadInteger('Setup', 'CastleTaxRate', g_Config.nCastleTaxRate);

  if Config.ReadInteger('Setup', 'CastleGetAllNpcTax', -1) < 0 then
    Config.WriteBool('Setup', 'CastleGetAllNpcTax', g_Config.boGetAllNpcTax);
  g_Config.boGetAllNpcTax := Config.ReadBool('Setup', 'CastleGetAllNpcTax', g_Config.boGetAllNpcTax);

  nLoadInteger := Config.ReadInteger('Setup', 'GenMonRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'GenMonRate', g_Config.nMonGenRate)
  else g_Config.nMonGenRate := nLoadInteger;
{//未使用变量 20080504
  nLoadInteger := Config.ReadInteger('Setup', 'ProcessMonRandRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ProcessMonRandRate', g_Config.nProcessMonRandRate)
  else g_Config.nProcessMonRandRate := nLoadInteger; 

  nLoadInteger := Config.ReadInteger('Setup', 'ProcessMonLimitCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ProcessMonLimitCount', g_Config.nProcessMonLimitCount)
  else g_Config.nProcessMonLimitCount := nLoadInteger;}

  if Config.ReadInteger('Setup', 'HumanMaxGold', -1) < 0 then
    Config.WriteInteger('Setup', 'HumanMaxGold', g_Config.nHumanMaxGold);
  g_Config.nHumanMaxGold := Config.ReadInteger('Setup', 'HumanMaxGold', g_Config.nHumanMaxGold);

  if Config.ReadInteger('Setup', 'HumanTryModeMaxGold', -1) < 0 then
    Config.WriteInteger('Setup', 'HumanTryModeMaxGold', g_Config.nHumanTryModeMaxGold);
  g_Config.nHumanTryModeMaxGold := Config.ReadInteger('Setup', 'HumanTryModeMaxGold', g_Config.nHumanTryModeMaxGold);

  if Config.ReadInteger('Setup', 'TryModeLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'TryModeLevel', g_Config.nTryModeLevel);
  g_Config.nTryModeLevel := Config.ReadInteger('Setup', 'TryModeLevel', g_Config.nTryModeLevel);

  if Config.ReadInteger('Setup', 'TryModeUseStorage', -1) < 0 then
    Config.WriteBool('Setup', 'TryModeUseStorage', g_Config.boTryModeUseStorage);
  g_Config.boTryModeUseStorage := Config.ReadBool('Setup', 'TryModeUseStorage', g_Config.boTryModeUseStorage);

  if Config.ReadInteger('Setup', 'ShutRedMsgShowGMName', -1) < 0 then
    Config.WriteBool('Setup', 'ShutRedMsgShowGMName', g_Config.boShutRedMsgShowGMName);
  g_Config.boShutRedMsgShowGMName := Config.ReadBool('Setup', 'ShutRedMsgShowGMName', g_Config.boShutRedMsgShowGMName);

  if Config.ReadInteger('Setup', 'ShowMakeItemMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ShowMakeItemMsg', g_Config.boShowMakeItemMsg);
  g_Config.boShowMakeItemMsg := Config.ReadBool('Setup', 'ShowMakeItemMsg', g_Config.boShowMakeItemMsg);

//人物名是否显示行会信息  
  if Config.ReadInteger('Setup', 'ShowGuildName', -1) < 0 then
    Config.WriteBool('Setup', 'ShowGuildName', g_Config.boShowGuildName);
  g_Config.boShowGuildName := Config.ReadBool('Setup', 'ShowGuildName', g_Config.boShowGuildName);

  if Config.ReadInteger('Setup', 'ShowRankLevelName', -1) < 0 then
    Config.WriteBool('Setup', 'ShowRankLevelName', g_Config.boShowRankLevelName);
  g_Config.boShowRankLevelName := Config.ReadBool('Setup', 'ShowRankLevelName', g_Config.boShowRankLevelName);

  if Config.ReadInteger('Setup', 'MonSayMsg', -1) < 0 then
    Config.WriteBool('Setup', 'MonSayMsg', g_Config.boMonSayMsg);
  g_Config.boMonSayMsg := Config.ReadBool('Setup', 'MonSayMsg', g_Config.boMonSayMsg);

  if Config.ReadInteger('Setup', 'SayMsgMaxLen', -1) < 0 then
    Config.WriteInteger('Setup', 'SayMsgMaxLen', g_Config.nSayMsgMaxLen);
  g_Config.nSayMsgMaxLen := Config.ReadInteger('Setup', 'SayMsgMaxLen', g_Config.nSayMsgMaxLen);

  if Config.ReadInteger('Setup', 'SayMsgTime', -1) < 0 then
    Config.WriteInteger('Setup', 'SayMsgTime', g_Config.dwSayMsgTime);
  g_Config.dwSayMsgTime := Config.ReadInteger('Setup', 'SayMsgTime', g_Config.dwSayMsgTime);

  if Config.ReadInteger('Setup', 'SayMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'SayMsgCount', g_Config.nSayMsgCount);
  g_Config.nSayMsgCount := Config.ReadInteger('Setup', 'SayMsgCount', g_Config.nSayMsgCount);

  if Config.ReadInteger('Setup', 'DisableSayMsgTime', -1) < 0 then
    Config.WriteInteger('Setup', 'DisableSayMsgTime', g_Config.dwDisableSayMsgTime);
  g_Config.dwDisableSayMsgTime := Config.ReadInteger('Setup', 'DisableSayMsgTime', g_Config.dwDisableSayMsgTime);

  if Config.ReadInteger('Setup', 'SayRedMsgMaxLen', -1) < 0 then
    Config.WriteInteger('Setup', 'SayRedMsgMaxLen', g_Config.nSayRedMsgMaxLen);
  g_Config.nSayRedMsgMaxLen := Config.ReadInteger('Setup', 'SayRedMsgMaxLen', g_Config.nSayRedMsgMaxLen);

  if Config.ReadInteger('Setup', 'CanShoutMsgLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'CanShoutMsgLevel', g_Config.nCanShoutMsgLevel);
  g_Config.nCanShoutMsgLevel := Config.ReadInteger('Setup', 'CanShoutMsgLevel', g_Config.nCanShoutMsgLevel);

  if Config.ReadInteger('Setup', 'StartPermission', -1) < 0 then
    Config.WriteInteger('Setup', 'StartPermission', g_Config.nStartPermission);
  g_Config.nStartPermission := Config.ReadInteger('Setup', 'StartPermission', g_Config.nStartPermission);

  if Config.ReadInteger('Setup', 'SendRefMsgRange', -1) < 0 then
    Config.WriteInteger('Setup', 'SendRefMsgRange', g_Config.nSendRefMsgRange);
  g_Config.nSendRefMsgRange := Config.ReadInteger('Setup', 'SendRefMsgRange', g_Config.nSendRefMsgRange);

  if Config.ReadInteger('Setup', 'DecLampDura', -1) < 0 then
    Config.WriteBool('Setup', 'DecLampDura', g_Config.boDecLampDura);
  g_Config.boDecLampDura := Config.ReadBool('Setup', 'DecLampDura', g_Config.boDecLampDura);

  if Config.ReadInteger('Setup', 'HungerSystem', -1) < 0 then
    Config.WriteBool('Setup', 'HungerSystem', g_Config.boHungerSystem);
  g_Config.boHungerSystem := Config.ReadBool('Setup', 'HungerSystem', g_Config.boHungerSystem);

  {$IF M2Version <> 2}
  if Config.ReadInteger('Setup', 'UseFengHaoAbil', -1) < 0 then
    Config.WriteBool('Setup', 'UseFengHaoAbil', g_Config.boUseFengHaoAbil);
  g_Config.boUseFengHaoAbil := Config.ReadBool('Setup', 'UseFengHaoAbil', g_Config.boUseFengHaoAbil);
  {$IFEND}

  if Config.ReadInteger('Setup', 'ClearGamePoint', -1) < 0 then
    Config.WriteBool('Setup', 'ClearGamePoint', g_Config.boClearGamePoint);
  g_Config.boClearGamePoint := Config.ReadBool('Setup', 'ClearGamePoint', g_Config.boClearGamePoint);

  if Config.ReadInteger('Setup', 'HungerDecHP', -1) < 0 then
    Config.WriteBool('Setup', 'HungerDecHP', g_Config.boHungerDecHP);
  g_Config.boHungerDecHP := Config.ReadBool('Setup', 'HungerDecHP', g_Config.boHungerDecHP);

  if Config.ReadInteger('Setup', 'HungerDecPower', -1) < 0 then
    Config.WriteBool('Setup', 'HungerDecPower', g_Config.boHungerDecPower);
  g_Config.boHungerDecPower := Config.ReadBool('Setup', 'HungerDecPower', g_Config.boHungerDecPower);

  if Config.ReadInteger('Setup', 'DiableHumanRun', -1) < 0 then
    Config.WriteBool('Setup', 'DiableHumanRun', g_Config.boDiableHumanRun);
  g_Config.boDiableHumanRun := Config.ReadBool('Setup', 'DiableHumanRun', g_Config.boDiableHumanRun);

  if Config.ReadInteger('Setup', 'RunHuman', -1) < 0 then
    Config.WriteBool('Setup', 'RunHuman', g_Config.boRUNHUMAN);
  g_Config.boRUNHUMAN := Config.ReadBool('Setup', 'RunHuman', g_Config.boRUNHUMAN);

  if Config.ReadInteger('Setup', 'RunMon', -1) < 0 then
    Config.WriteBool('Setup', 'RunMon', g_Config.boRUNMON);
  g_Config.boRUNMON := Config.ReadBool('Setup', 'RunMon', g_Config.boRUNMON);

  if Config.ReadInteger('Setup', 'RunNpc', -1) < 0 then
    Config.WriteBool('Setup', 'RunNpc', g_Config.boRunNpc);
  g_Config.boRunNpc := Config.ReadBool('Setup', 'RunNpc', g_Config.boRunNpc);

  nLoadInteger := Config.ReadInteger('Setup', 'RunGuard', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'RunGuard', g_Config.boRunGuard)
  else g_Config.boRunGuard := nLoadInteger = 1;

  if Config.ReadInteger('Setup', 'WarDisableHumanRun', -1) < 0 then
    Config.WriteBool('Setup', 'WarDisableHumanRun', g_Config.boWarDisHumRun);
  g_Config.boWarDisHumRun := Config.ReadBool('Setup', 'WarDisableHumanRun', g_Config.boWarDisHumRun);

  //魔法盾效果 T-特色效果 F-盛大效果 20080808
  if Config.ReadInteger('Setup', 'Skill31Effect', -1) < 0 then
    Config.WriteBool('Setup', 'Skill31Effect', g_Config.boSkill31Effect);
  g_Config.boSkill31Effect := Config.ReadBool('Setup', 'Skill31Effect', g_Config.boSkill31Effect);

//四级魔法盾抵御伤害百分率 20080829
  if Config.ReadInteger('Setup', 'Skill66Rate', -1) < 0 then
    Config.WriteInteger('Setup', 'Skill66Rate', g_Config.nSkill66Rate);
  g_Config.nSkill66Rate := Config.ReadInteger('Setup', 'Skill66Rate', g_Config.nSkill66Rate);

//普通魔法盾抵御伤害百分率 20081226
  if Config.ReadInteger('Setup', 'OrdinarySkill66Rate', -1) < 0 then
    Config.WriteInteger('Setup', 'OrdinarySkill66Rate', g_Config.nOrdinarySkill66Rate);
  g_Config.nOrdinarySkill66Rate := Config.ReadInteger('Setup', 'OrdinarySkill66Rate', g_Config.nOrdinarySkill66Rate);
  if g_Config.nOrdinarySkill66Rate > 20 then g_Config.nOrdinarySkill66Rate:= 20;

//内功技能增强的攻防比率 20081223
  if Config.ReadInteger('Setup', 'NGSkillRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NGSkillRate', g_Config.nNGSkillRate);
  g_Config.nNGSkillRate := Config.ReadInteger('Setup', 'NGSkillRate', g_Config.nNGSkillRate);

//战内功等级+攻 200990812
  if Config.ReadInteger('Setup', 'WarrNGLevelIncDC', -1) < 0 then
    Config.WriteInteger('Setup', 'WarrNGLevelIncDC', g_Config.nWarrNGLevelIncDC);
  g_Config.nWarrNGLevelIncDC := Config.ReadInteger('Setup', 'WarrNGLevelIncDC', g_Config.nWarrNGLevelIncDC);

//战内功等级+防 200990812
  if Config.ReadInteger('Setup', 'WarrNGLevelIncAC', -1) < 0 then
    Config.WriteInteger('Setup', 'WarrNGLevelIncAC', g_Config.nWarrNGLevelIncAC);
  g_Config.nWarrNGLevelIncAC := Config.ReadInteger('Setup', 'WarrNGLevelIncAC', g_Config.nWarrNGLevelIncAC);

//法内功等级+攻 200990812
  if Config.ReadInteger('Setup', 'WizardNGLevelIncDC', -1) < 0 then
    Config.WriteInteger('Setup', 'WizardNGLevelIncDC', g_Config.nWizardNGLevelIncDC);
  g_Config.nWizardNGLevelIncDC := Config.ReadInteger('Setup', 'WizardNGLevelIncDC', g_Config.nWizardNGLevelIncDC);

//法内功等级+防 200990812
  if Config.ReadInteger('Setup', 'WizardNGLevelIncAC', -1) < 0 then
    Config.WriteInteger('Setup', 'WizardNGLevelIncAC', g_Config.nWizardNGLevelIncAC);
  g_Config.nWizardNGLevelIncAC := Config.ReadInteger('Setup', 'WizardNGLevelIncAC', g_Config.nWizardNGLevelIncAC);

//道内功等级+攻
  if Config.ReadInteger('Setup', 'TaosNGLevelIncDC', -1) < 0 then
    Config.WriteInteger('Setup', 'TaosNGLevelIncDC', g_Config.nTaosNGLevelIncDC);
  g_Config.nTaosNGLevelIncDC := Config.ReadInteger('Setup', 'TaosNGLevelIncDC', g_Config.nTaosNGLevelIncDC);

//道内功等级+防
  if Config.ReadInteger('Setup', 'TaosNGLevelIncAC', -1) < 0 then
    Config.WriteInteger('Setup', 'TaosNGLevelIncAC', g_Config.nTaosNGLevelIncAC);
  g_Config.nTaosNGLevelIncAC := Config.ReadInteger('Setup', 'TaosNGLevelIncAC', g_Config.nTaosNGLevelIncAC);

  //内力值参数 20081001
  if Config.ReadInteger('Setup', 'Skill69NG', -1) < 0 then
    Config.WriteInteger('Setup', 'Skill69NG', g_Config.nSkill69NG);
  g_Config.nSkill69NG := Config.ReadInteger('Setup', 'Skill69NG', g_Config.nSkill69NG);

  //主体内功经验参数 20081001
  if Config.ReadInteger('Setup', 'Skill69NGExp', -1) < 0 then
    Config.WriteInteger('Setup', 'Skill69NGExp', g_Config.nSkill69NGExp);
  g_Config.nSkill69NGExp := Config.ReadInteger('Setup', 'Skill69NGExp', g_Config.nSkill69NGExp);

//主体内功经验参数2 20090727
  if Config.ReadInteger('Setup', 'Skill69NGExp1', -1) < 0 then
    Config.WriteInteger('Setup', 'Skill69NGExp1', g_Config.nSkill69NGExp1);
  g_Config.nSkill69NGExp1 := Config.ReadInteger('Setup', 'Skill69NGExp1', g_Config.nSkill69NGExp1);

  //英雄内功经验参数 20081001
  if Config.ReadInteger('Setup', 'HeroSkill69NGExp', -1) < 0 then
    Config.WriteInteger('Setup', 'HeroSkill69NGExp', g_Config.nHeroSkill69NGExp);
  g_Config.nHeroSkill69NGExp := Config.ReadInteger('Setup', 'HeroSkill69NGExp', g_Config.nHeroSkill69NGExp);

//英雄内功经验参数2 20090727
  if Config.ReadInteger('Setup', 'HeroSkill69NGExp1', -1) < 0 then
    Config.WriteInteger('Setup', 'HeroSkill69NGExp1', g_Config.nHeroSkill69NGExp1);
  g_Config.nHeroSkill69NGExp1 := Config.ReadInteger('Setup', 'HeroSkill69NGExp1', g_Config.nHeroSkill69NGExp1);

//内功等级限制
  if Config.ReadInteger('Setup', 'LimitExpNGLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'LimitExpNGLevel', g_Config.nLimitExpNGLevel);
  g_Config.nLimitExpNGLevel := Config.ReadInteger('Setup', 'LimitExpNGLevel', g_Config.nLimitExpNGLevel);

  //增加内力值间隔 20081002
  if Config.ReadInteger('Setup', 'dwIncNHTime', -1) < 0 then
    Config.WriteInteger('Setup', 'dwIncNHTime', g_Config.dwIncNHTime);
  g_Config.dwIncNHTime := Config.ReadInteger('Setup', 'dwIncNHTime', g_Config.dwIncNHTime);

  //饮酒增加内功经验 20081003
  if Config.ReadInteger('Setup', 'DrinkIncNHExp', -1) < 0 then
    Config.WriteInteger('Setup', 'DrinkIncNHExp', g_Config.nDrinkIncNHExp);
  g_Config.nDrinkIncNHExp := Config.ReadInteger('Setup', 'DrinkIncNHExp', g_Config.nDrinkIncNHExp);

  //内功抵御普通攻击消耗内力值 20081003
  if Config.ReadInteger('Setup', 'HitStruckDecNH', -1) < 0 then
    Config.WriteInteger('Setup', 'HitStruckDecNH', g_Config.nHitStruckDecNH);
  g_Config.nHitStruckDecNH := Config.ReadInteger('Setup', 'HitStruckDecNH', g_Config.nHitStruckDecNH);

  if Config.ReadInteger('Setup', 'GMRunAll', -1) < 0 then
    Config.WriteBool('Setup', 'GMRunAll', g_Config.boGMRunAll);
  g_Config.boGMRunAll := Config.ReadBool('Setup', 'GMRunAll', g_Config.boGMRunAll);

  if Config.ReadInteger('Setup', 'SafeAreaLimitedRun', -1) < 0 then
    Config.WriteBool('Setup', 'SafeAreaLimitedRun', g_Config.boSafeAreaLimited);
  g_Config.boSafeAreaLimited := Config.ReadBool('Setup', 'SafeAreaLimitedRun', g_Config.boSafeAreaLimited);

//装备持久0时自动消失
  if Config.ReadInteger('Setup', 'ItmeAutoOver', -1) < 0 then
    Config.WriteBool('Setup', 'ItmeAutoOver', g_Config.boItmeAutoOver);
  g_Config.boItmeAutoOver := Config.ReadBool('Setup', 'ItmeAutoOver', g_Config.boItmeAutoOver);

// 显示飘血
  if Config.ReadInteger('Setup', 'ShowMoveHP', -1) < 0 then
    Config.WriteBool('Setup', 'ShowMoveHP', g_Config.boShowMoveHP);
  g_Config.boShowMoveHP := Config.ReadBool('Setup', 'ShowMoveHP', g_Config.boShowMoveHP);
  {$If M2Version = 2}
  if Config.ReadInteger('Setup', 'ShowNewItem', -1) < 0 then
    Config.WriteBool('Setup', 'ShowNewItem', g_Config.boShowNewItem);
  g_Config.boShowNewItem := Config.ReadBool('Setup', 'ShowNewItem', g_Config.boShowNewItem);
  {$Ifend}
  {$If M2Version = 0}
  if Config.ReadInteger('Setup', 'Uses176StateWin', -1) < 0 then
    Config.WriteBool('Setup', 'Uses176StateWin', g_Config.boUses176StateWin);
  g_Config.boUses176StateWin := Config.ReadBool('Setup', 'Uses176StateWin', g_Config.boUses176StateWin);
  {$Ifend}
//内挂禁用主体保护
  if Config.ReadInteger('Setup', 'NoCanUseProtection', -1) < 0 then
    Config.WriteBool('Setup', 'NoCanUseProtection', g_Config.boNoCanUseProtection);
  g_Config.boNoCanUseProtection := Config.ReadBool('Setup', 'NoCanUseProtection', g_Config.boNoCanUseProtection);

//内挂禁用英雄保护
  if Config.ReadInteger('Setup', 'NoCanUseHeroProtection', -1) < 0 then
    Config.WriteBool('Setup', 'NoCanUseHeroProtection', g_Config.boNoCanUseHeroProtection);
  g_Config.boNoCanUseHeroProtection := Config.ReadBool('Setup', 'NoCanUseHeroProtection', g_Config.boNoCanUseHeroProtection);

//内挂隔位刺杀是否可用
  if Config.ReadInteger('Setup', 'NoCanUseComparThrust', -1) < 0 then
    Config.WriteBool('Setup', 'NoCanUseComparThrust', g_Config.boNoCanUseComparThrust);
  g_Config.boNoCanUseComparThrust := Config.ReadBool('Setup', 'NoCanUseComparThrust', g_Config.boNoCanUseComparThrust);

  if Config.ReadInteger('Setup', 'BoneFammCount', -1) < 0 then
    Config.WriteInteger('Setup', 'BoneFammCount', g_Config.nBoneFammCount);
  g_Config.nBoneFammCount := Config.ReadInteger('Setup', 'BoneFammCount', g_Config.nBoneFammCount);

  for I := Low(g_Config.BoneFammArray) to High(g_Config.BoneFammArray) do begin
    if Config.ReadInteger('Setup', 'BoneFammHumLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'BoneFammHumLevel' + IntToStr(I), g_Config.BoneFammArray[I].nHumLevel);
    g_Config.BoneFammArray[I].nHumLevel := Config.ReadInteger('Setup', 'BoneFammHumLevel' + IntToStr(I), g_Config.BoneFammArray[I].nHumLevel);

    if Config.ReadString('Names', 'BoneFamm' + IntToStr(I), '') = '' then
      Config.WriteString('Names', 'BoneFamm' + IntToStr(I), g_Config.BoneFammArray[I].sMonName);
    g_Config.BoneFammArray[I].sMonName := Config.ReadString('Names', 'BoneFamm' + IntToStr(I), g_Config.BoneFammArray[I].sMonName);

    if Config.ReadInteger('Setup', 'BoneFammCount' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'BoneFammCount' + IntToStr(I), g_Config.BoneFammArray[I].nCount);
    g_Config.BoneFammArray[I].nCount := Config.ReadInteger('Setup', 'BoneFammCount' + IntToStr(I), g_Config.BoneFammArray[I].nCount);

    if Config.ReadInteger('Setup', 'BoneFammLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'BoneFammLevel' + IntToStr(I), g_Config.BoneFammArray[I].nLevel);
    g_Config.BoneFammArray[I].nLevel := Config.ReadInteger('Setup', 'BoneFammLevel' + IntToStr(I), g_Config.BoneFammArray[I].nLevel);
  end;

  //召唤圣兽数量
  if Config.ReadInteger('Setup', 'SacredCount', -1) < 0 then
    Config.WriteInteger('Setup', 'SacredCount', g_Config.nSacredCount);
  g_Config.nSacredCount := Config.ReadInteger('Setup', 'SacredCount', g_Config.nSacredCount);

  for I := Low(g_Config.SacredArray) to High(g_Config.SacredArray) do begin
    if Config.ReadInteger('Setup', 'SacredHumLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SacredHumLevel' + IntToStr(I), g_Config.SacredArray[I].nHumLevel);
    g_Config.SacredArray[I].nHumLevel := Config.ReadInteger('Setup', 'SacredHumLevel' + IntToStr(I), g_Config.SacredArray[I].nHumLevel);

    if Config.ReadString('Names', 'Sacred' + IntToStr(I), '') = '' then
      Config.WriteString('Names', 'Sacred' + IntToStr(I), g_Config.SacredArray[I].sMonName);
    g_Config.SacredArray[I].sMonName := Config.ReadString('Names', 'Sacred' + IntToStr(I), g_Config.SacredArray[I].sMonName);

    if Config.ReadInteger('Setup', 'SacredCount' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SacredCount' + IntToStr(I), g_Config.SacredArray[I].nCount);
    g_Config.SacredArray[I].nCount := Config.ReadInteger('Setup', 'SacredCount' + IntToStr(I), g_Config.SacredArray[I].nCount);

    if Config.ReadInteger('Setup', 'SacredLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SacredLevel' + IntToStr(I), g_Config.SacredArray[I].nLevel);
    g_Config.SacredArray[I].nLevel := Config.ReadInteger('Setup', 'SacredLevel' + IntToStr(I), g_Config.SacredArray[I].nLevel);


    if I <= High(g_Config.DogzArray) then begin//20110713 修改
      if Config.ReadInteger('Setup', 'DogzHumLevel' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'DogzHumLevel' + IntToStr(I), g_Config.DogzArray[I].nHumLevel);
      g_Config.DogzArray[I].nHumLevel := Config.ReadInteger('Setup', 'DogzHumLevel' + IntToStr(I), g_Config.DogzArray[I].nHumLevel);

      if Config.ReadString('Names', 'Dogz' + IntToStr(I), '') = '' then
        Config.WriteString('Names', 'Dogz' + IntToStr(I), g_Config.DogzArray[I].sMonName);
      g_Config.DogzArray[I].sMonName := Config.ReadString('Names', 'Dogz' + IntToStr(I), g_Config.DogzArray[I].sMonName);

      if Config.ReadInteger('Setup', 'DogzCount' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'DogzCount' + IntToStr(I), g_Config.DogzArray[I].nCount);
      g_Config.DogzArray[I].nCount := Config.ReadInteger('Setup', 'DogzCount' + IntToStr(I), g_Config.DogzArray[I].nCount);

      if Config.ReadInteger('Setup', 'DogzLevel' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'DogzLevel' + IntToStr(I), g_Config.DogzArray[I].nLevel);
      g_Config.DogzArray[I].nLevel := Config.ReadInteger('Setup', 'DogzLevel' + IntToStr(I), g_Config.DogzArray[I].nLevel);
      if not boReload then Application.ProcessMessages;//20110613
    end;
    if I <= High(g_Config.FairyArray) then begin//20110713 修改
      if Config.ReadInteger('Setup', 'FairyHumLevel' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'FairyHumLevel' + IntToStr(I), g_Config.FairyArray[I].nHumLevel);
      g_Config.FairyArray[I].nHumLevel := Config.ReadInteger('Setup', 'FairyHumLevel' + IntToStr(I), g_Config.FairyArray[I].nHumLevel);

      if Config.ReadString('Names', 'Fairy' + IntToStr(I), '') = '' then
        Config.WriteString('Names', 'Fairy' + IntToStr(I), g_Config.FairyArray[I].sMonName);
      g_Config.FairyArray[I].sMonName := Config.ReadString('Names', 'Fairy' + IntToStr(I), g_Config.FairyArray[I].sMonName);

      if Config.ReadInteger('Setup', 'FairyCount' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'FairyCount' + IntToStr(I), g_Config.FairyArray[I].nCount);
      g_Config.FairyArray[I].nCount := Config.ReadInteger('Setup', 'FairyCount' + IntToStr(I), g_Config.FairyArray[I].nCount);

      if Config.ReadInteger('Setup', 'FairyLevel' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'FairyLevel' + IntToStr(I), g_Config.FairyArray[I].nLevel);
      g_Config.FairyArray[I].nLevel := Config.ReadInteger('Setup', 'FairyLevel' + IntToStr(I), g_Config.FairyArray[I].nLevel);
      if not boReload then Application.ProcessMessages;//20110613
    end;
  end;

  if Config.ReadInteger('Setup', 'DogzCount', -1) < 0 then
    Config.WriteInteger('Setup', 'DogzCount', g_Config.nDogzCount);
  g_Config.nDogzCount := Config.ReadInteger('Setup', 'DogzCount', g_Config.nDogzCount);

  {for I := Low(g_Config.DogzArray) to High(g_Config.DogzArray) do begin
    if Config.ReadInteger('Setup', 'DogzHumLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'DogzHumLevel' + IntToStr(I), g_Config.DogzArray[I].nHumLevel);
    g_Config.DogzArray[I].nHumLevel := Config.ReadInteger('Setup', 'DogzHumLevel' + IntToStr(I), g_Config.DogzArray[I].nHumLevel);

    if Config.ReadString('Names', 'Dogz' + IntToStr(I), '') = '' then
      Config.WriteString('Names', 'Dogz' + IntToStr(I), g_Config.DogzArray[I].sMonName);
    g_Config.DogzArray[I].sMonName := Config.ReadString('Names', 'Dogz' + IntToStr(I), g_Config.DogzArray[I].sMonName);

    if Config.ReadInteger('Setup', 'DogzCount' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'DogzCount' + IntToStr(I), g_Config.DogzArray[I].nCount);
    g_Config.DogzArray[I].nCount := Config.ReadInteger('Setup', 'DogzCount' + IntToStr(I), g_Config.DogzArray[I].nCount);

    if Config.ReadInteger('Setup', 'DogzLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'DogzLevel' + IntToStr(I), g_Config.DogzArray[I].nLevel);
    g_Config.DogzArray[I].nLevel := Config.ReadInteger('Setup', 'DogzLevel' + IntToStr(I), g_Config.DogzArray[I].nLevel);
    if not boReload then Application.ProcessMessages;//20110613
  end;}
//月灵
  if Config.ReadInteger('Setup', 'FairyCount', -1) < 0 then
    Config.WriteInteger('Setup', 'FairyCount', g_Config.nFairyCount);
  g_Config.nFairyCount := Config.ReadInteger('Setup', 'FairyCount', g_Config.nFairyCount);

  if Config.ReadInteger('Setup', 'FairyDuntRate', -1) < 0 then
    Config.WriteInteger('Setup', 'FairyDuntRate', g_Config.nFairyDuntRate);
  g_Config.nFairyDuntRate := Config.ReadInteger('Setup', 'FairyDuntRate', g_Config.nFairyDuntRate);

//月灵重击次数,达到次数时按等级出重击 20090105
  if Config.ReadInteger('Setup', 'FairyDuntRateBelow', -1) < 0 then
    Config.WriteInteger('Setup', 'FairyDuntRateBelow', g_Config.nFairyDuntRateBelow);
  g_Config.nFairyDuntRateBelow := Config.ReadInteger('Setup', 'FairyDuntRateBelow', g_Config.nFairyDuntRateBelow);

  if Config.ReadInteger('Setup', 'FairyAttackRate', -1) < 0 then
    Config.WriteInteger('Setup', 'FairyAttackRate', g_Config.nFairyAttackRate);
  g_Config.nFairyAttackRate := Config.ReadInteger('Setup', 'FairyAttackRate', g_Config.nFairyAttackRate);
//开天斩重击几率 20080213
  if Config.ReadInteger('Setup', '43KillHitRate', -1) < 0 then
    Config.WriteInteger('Setup', '43KillHitRate', g_Config.n43KillHitRate);
  g_Config.n43KillHitRate := Config.ReadInteger('Setup', '43KillHitRate', g_Config.n43KillHitRate);
//开天斩重击倍数  20080213
  if Config.ReadInteger('Setup', '43KillAttackRate', -1) < 0 then
    Config.WriteInteger('Setup', '43KillAttackRate', g_Config.n43KillAttackRate);
  g_Config.n43KillAttackRate := Config.ReadInteger('Setup', '43KillAttackRate', g_Config.n43KillAttackRate);
//开天斩威力 20080213
  if Config.ReadInteger('Setup', 'AttackRate_43', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackRate_43', g_Config.nAttackRate_43);
  g_Config.nAttackRate_43 := Config.ReadInteger('Setup', 'AttackRate_43', g_Config.nAttackRate_43);

//烈火剑法威力倍数 20081208
  if Config.ReadInteger('Setup', 'AttackRate_26', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackRate_26', g_Config.nAttackRate_26);
  g_Config.nAttackRate_26 := Config.ReadInteger('Setup', 'AttackRate_26', g_Config.nAttackRate_26);

//逐日剑法威力倍数 20080511
  if Config.ReadInteger('Setup', 'AttackRate_74', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackRate_74', g_Config.nAttackRate_74);
  g_Config.nAttackRate_74 := Config.ReadInteger('Setup', 'AttackRate_74', g_Config.nAttackRate_74);

  {for I := Low(g_Config.FairyArray) to High(g_Config.FairyArray) do begin
    if Config.ReadInteger('Setup', 'FairyHumLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'FairyHumLevel' + IntToStr(I), g_Config.FairyArray[I].nHumLevel);
    g_Config.FairyArray[I].nHumLevel := Config.ReadInteger('Setup', 'FairyHumLevel' + IntToStr(I), g_Config.FairyArray[I].nHumLevel);

    if Config.ReadString('Names', 'Fairy' + IntToStr(I), '') = '' then
      Config.WriteString('Names', 'Fairy' + IntToStr(I), g_Config.FairyArray[I].sMonName);
    g_Config.FairyArray[I].sMonName := Config.ReadString('Names', 'Fairy' + IntToStr(I), g_Config.FairyArray[I].sMonName);

    if Config.ReadInteger('Setup', 'FairyCount' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'FairyCount' + IntToStr(I), g_Config.FairyArray[I].nCount);
    g_Config.FairyArray[I].nCount := Config.ReadInteger('Setup', 'FairyCount' + IntToStr(I), g_Config.FairyArray[I].nCount);

    if Config.ReadInteger('Setup', 'FairyLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'FairyLevel' + IntToStr(I), g_Config.FairyArray[I].nLevel);
    g_Config.FairyArray[I].nLevel := Config.ReadInteger('Setup', 'FairyLevel' + IntToStr(I), g_Config.FairyArray[I].nLevel);
    if not boReload then Application.ProcessMessages;//20110613
  end; }

  if Config.ReadInteger('Setup', 'TryDealTime', -1) < 0 then
    Config.WriteInteger('Setup', 'TryDealTime', g_Config.dwTryDealTime);
  g_Config.dwTryDealTime := Config.ReadInteger('Setup', 'TryDealTime', g_Config.dwTryDealTime);

  if Config.ReadInteger('Setup', 'DealOKTime', -1) < 0 then
    Config.WriteInteger('Setup', 'DealOKTime', g_Config.dwDealOKTime);
  g_Config.dwDealOKTime := Config.ReadInteger('Setup', 'DealOKTime', g_Config.dwDealOKTime);

  if Config.ReadInteger('Setup', 'CanNotGetBackDeal', -1) < 0 then
    Config.WriteBool('Setup', 'CanNotGetBackDeal', g_Config.boCanNotGetBackDeal);
  g_Config.boCanNotGetBackDeal := Config.ReadBool('Setup', 'CanNotGetBackDeal', g_Config.boCanNotGetBackDeal);

  if Config.ReadInteger('Setup', 'DisableDeal', -1) < 0 then
    Config.WriteBool('Setup', 'DisableDeal', g_Config.boDisableDeal);
  g_Config.boDisableDeal := Config.ReadBool('Setup', 'DisableDeal', g_Config.boDisableDeal);

//可收徒弟数 20080530
  if Config.ReadInteger('Setup', 'MasterCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterCount', g_Config.nMasterCount);
  g_Config.nMasterCount := Config.ReadInteger('Setup', 'MasterCount', g_Config.nMasterCount);

  if Config.ReadInteger('Setup', 'MasterOKLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterOKLevel', g_Config.nMasterOKLevel);
  g_Config.nMasterOKLevel := Config.ReadInteger('Setup', 'MasterOKLevel', g_Config.nMasterOKLevel);

  if Config.ReadInteger('Setup', 'MasterOKCreditPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterOKCreditPoint', g_Config.nMasterOKCreditPoint);
  g_Config.nMasterOKCreditPoint := Config.ReadInteger('Setup', 'MasterOKCreditPoint', g_Config.nMasterOKCreditPoint);

  if Config.ReadInteger('Setup', 'MasterOKBonusPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterOKBonusPoint', g_Config.nMasterOKBonusPoint);
  g_Config.nMasterOKBonusPoint := Config.ReadInteger('Setup', 'MasterOKBonusPoint', g_Config.nMasterOKBonusPoint);

//等级小于指定值不增加PK点
  if Config.ReadInteger('Setup', 'LevelLessNotIncPKPoint', -1) < 0 then
    Config.WriteBool('Setup', 'LevelLessNotIncPKPoint', g_Config.boLevelLessNotIncPKPoint);
  g_Config.boLevelLessNotIncPKPoint := Config.ReadBool('Setup', 'LevelLessNotIncPKPoint', g_Config.boLevelLessNotIncPKPoint);

//等级小于时，不增加PK点
  if Config.ReadInteger('Setup', 'NotIncPKPointLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'NotIncPKPointLevel', g_Config.nNotIncPKPointLevel);
  g_Config.nNotIncPKPointLevel := Config.ReadInteger('Setup', 'NotIncPKPointLevel', g_Config.nNotIncPKPointLevel);

  if Config.ReadInteger('Setup', 'PKProtect', -1) < 0 then
    Config.WriteBool('Setup', 'PKProtect', g_Config.boPKLevelProtect);
  g_Config.boPKLevelProtect := Config.ReadBool('Setup', 'PKProtect', g_Config.boPKLevelProtect);

//杀英雄增加诅咒值 20090414
  if Config.ReadInteger('Setup', 'PKHeroDieAddBodyLuck', -1) < 0 then
    Config.WriteBool('Setup', 'PKHeroDieAddBodyLuck', g_Config.boPKHeroDieAddBodyLuck);
  g_Config.boPKHeroDieAddBodyLuck := Config.ReadBool('Setup', 'PKHeroDieAddBodyLuck', g_Config.boPKHeroDieAddBodyLuck);  

  if Config.ReadInteger('Setup', 'PKProtectLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'PKProtectLevel', g_Config.nPKProtectLevel);
  g_Config.nPKProtectLevel := Config.ReadInteger('Setup', 'PKProtectLevel', g_Config.nPKProtectLevel);

  if Config.ReadInteger('Setup', 'RedPKProtectLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'RedPKProtectLevel', g_Config.nRedPKProtectLevel);
  g_Config.nRedPKProtectLevel := Config.ReadInteger('Setup', 'RedPKProtectLevel', g_Config.nRedPKProtectLevel);

  if Config.ReadInteger('Setup', 'ItemPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemPowerRate', g_Config.nItemPowerRate);
  g_Config.nItemPowerRate := Config.ReadInteger('Setup', 'ItemPowerRate', g_Config.nItemPowerRate);

  if Config.ReadInteger('Setup', 'ItemExpRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemExpRate', g_Config.nItemExpRate);
  g_Config.nItemExpRate := Config.ReadInteger('Setup', 'ItemExpRate', g_Config.nItemExpRate);

  if Config.ReadInteger('Setup', 'ScriptGotoCountLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ScriptGotoCountLimit', g_Config.nScriptGotoCountLimit);
  g_Config.nScriptGotoCountLimit := Config.ReadInteger('Setup', 'ScriptGotoCountLimit', g_Config.nScriptGotoCountLimit);

  if Config.ReadInteger('Setup', 'HearMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'HearMsgFColor', g_Config.btHearMsgFColor);
  g_Config.btHearMsgFColor := Config.ReadInteger('Setup', 'HearMsgFColor', g_Config.btHearMsgFColor);

  if Config.ReadInteger('Setup', 'HearMsgFColor1', -1) < 0 then
    Config.WriteInteger('Setup', 'HearMsgFColor1', g_Config.btHearMsgFColor1);
  g_Config.btHearMsgFColor1 := Config.ReadInteger('Setup', 'HearMsgFColor1', g_Config.btHearMsgFColor1);

  if Config.ReadInteger('Setup', 'HearMsgFColor2', -1) < 0 then
    Config.WriteInteger('Setup', 'HearMsgFColor2', g_Config.btHearMsgFColor2);
  g_Config.btHearMsgFColor2 := Config.ReadInteger('Setup', 'HearMsgFColor2', g_Config.btHearMsgFColor2);

  if Config.ReadInteger('Setup', 'HearMsgFColor3', -1) < 0 then
    Config.WriteInteger('Setup', 'HearMsgFColor3', g_Config.btHearMsgFColor3);
  g_Config.btHearMsgFColor3 := Config.ReadInteger('Setup', 'HearMsgFColor3', g_Config.btHearMsgFColor3);

  if Config.ReadInteger('Setup', 'HearMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'HearMsgBColor', g_Config.btHearMsgBColor);
  g_Config.btHearMsgBColor := Config.ReadInteger('Setup', 'HearMsgBColor', g_Config.btHearMsgBColor);

  if Config.ReadInteger('Setup', 'WhisperMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'WhisperMsgFColor', g_Config.btWhisperMsgFColor);
  g_Config.btWhisperMsgFColor := Config.ReadInteger('Setup', 'WhisperMsgFColor', g_Config.btWhisperMsgFColor);

  if Config.ReadInteger('Setup', 'WhisperMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'WhisperMsgBColor', g_Config.btWhisperMsgBColor);
  g_Config.btWhisperMsgBColor := Config.ReadInteger('Setup', 'WhisperMsgBColor', g_Config.btWhisperMsgBColor);

  if Config.ReadInteger('Setup', 'GMWhisperMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GMWhisperMsgFColor', g_Config.btGMWhisperMsgFColor);
  g_Config.btGMWhisperMsgFColor := Config.ReadInteger('Setup', 'GMWhisperMsgFColor', g_Config.btGMWhisperMsgFColor);

  if Config.ReadInteger('Setup', 'GMWhisperMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GMWhisperMsgBColor', g_Config.btGMWhisperMsgBColor);
  g_Config.btGMWhisperMsgBColor := Config.ReadInteger('Setup', 'GMWhisperMsgBColor', g_Config.btGMWhisperMsgBColor);

  if Config.ReadInteger('Setup', 'CryMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'CryMsgFColor', g_Config.btCryMsgFColor);
  g_Config.btCryMsgFColor := Config.ReadInteger('Setup', 'CryMsgFColor', g_Config.btCryMsgFColor);

  if Config.ReadInteger('Setup', 'CryMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'CryMsgBColor', g_Config.btCryMsgBColor);
  g_Config.btCryMsgBColor := Config.ReadInteger('Setup', 'CryMsgBColor', g_Config.btCryMsgBColor);

  if Config.ReadInteger('Setup', 'GreenMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GreenMsgFColor', g_Config.btGreenMsgFColor);
  g_Config.btGreenMsgFColor := Config.ReadInteger('Setup', 'GreenMsgFColor', g_Config.btGreenMsgFColor);

  if Config.ReadInteger('Setup', 'GreenMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GreenMsgBColor', g_Config.btGreenMsgBColor);
  g_Config.btGreenMsgBColor := Config.ReadInteger('Setup', 'GreenMsgBColor', g_Config.btGreenMsgBColor);

  if Config.ReadInteger('Setup', 'BlueMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'BlueMsgFColor', g_Config.btBlueMsgFColor);
  g_Config.btBlueMsgFColor := Config.ReadInteger('Setup', 'BlueMsgFColor', g_Config.btBlueMsgFColor);

  if Config.ReadInteger('Setup', 'BlueMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'BlueMsgBColor', g_Config.btBlueMsgBColor);
  g_Config.btBlueMsgBColor := Config.ReadInteger('Setup', 'BlueMsgBColor', g_Config.btBlueMsgBColor);
  //千里传音 20080309
  if Config.ReadInteger('Setup', 'SayMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'SayMsgFColor', g_Config.btSayMsgFColor);
  g_Config.btSayMsgFColor := Config.ReadInteger('Setup', 'SayMsgFColor', g_Config.btSayMsgFColor);

  if Config.ReadInteger('Setup', 'SayeMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'SayeMsgBColor', g_Config.btSayeMsgBColor);
  g_Config.btSayeMsgBColor := Config.ReadInteger('Setup', 'SayeMsgBColor', g_Config.btSayeMsgBColor);
//传音筒
  if Config.ReadInteger('Setup', 'SayMsgFColor1', -1) < 0 then
    Config.WriteInteger('Setup', 'SayMsgFColor1', g_Config.btSayMsgFColor1);
  g_Config.btSayMsgFColor1 := Config.ReadInteger('Setup', 'SayMsgFColor1', g_Config.btSayMsgFColor1);

  if Config.ReadInteger('Setup', 'SayeMsgBColor1', -1) < 0 then
    Config.WriteInteger('Setup', 'SayeMsgBColor1', g_Config.btSayeMsgBColor1);
  g_Config.btSayeMsgBColor1 := Config.ReadInteger('Setup', 'SayeMsgBColor1', g_Config.btSayeMsgBColor1);

{$IF M2Version <> 2}

  if Config.ReadInteger('Setup', 'DivisionMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'DivisionMsgFColor', g_Config.btDivisionMsgFColor);
  g_Config.btDivisionMsgFColor := Config.ReadInteger('Setup', 'DivisionMsgFColor', g_Config.btDivisionMsgFColor);

  if Config.ReadInteger('Setup', 'DivisionMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'DivisionMsgBColor', g_Config.btDivisionMsgBColor);
  g_Config.btDivisionMsgBColor := Config.ReadInteger('Setup', 'DivisionMsgBColor', g_Config.btDivisionMsgBColor);

//新建师门人数上限
  if Config.ReadInteger('Setup', 'DivisionMemberCount', -1) < 0 then
    Config.WriteInteger('Setup', 'DivisionMemberCount', g_Config.nDivisionMemberCount);
  g_Config.nDivisionMemberCount := Config.ReadInteger('Setup', 'DivisionMemberCount', g_Config.nDivisionMemberCount);

//创建师门所需等级
  if Config.ReadInteger('Setup', 'BuildDivisionLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'BuildDivisionLevel', g_Config.nBuildDivisionLevel);
  g_Config.nBuildDivisionLevel := Config.ReadInteger('Setup', 'BuildDivisionLevel', g_Config.nBuildDivisionLevel);

//申请入门所需等级
  if Config.ReadInteger('Setup', 'ApplyDivisionLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'ApplyDivisionLevel', g_Config.nApplyDivisionLevel);
  g_Config.nApplyDivisionLevel := Config.ReadInteger('Setup', 'ApplyDivisionLevel', g_Config.nApplyDivisionLevel);
{$IFEND}
  if Config.ReadInteger('Setup', 'ItemMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemMsgFColor', g_Config.btItemMsgFColor);
  g_Config.btItemMsgFColor := Config.ReadInteger('Setup', 'ItemMsgFColor', g_Config.btItemMsgFColor);

  if Config.ReadInteger('Setup', 'ItemMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemMsgBColor', g_Config.btItemMsgBColor);
  g_Config.btItemMsgBColor := Config.ReadInteger('Setup', 'ItemMsgBColor', g_Config.btItemMsgBColor);

  if Config.ReadInteger('Setup', 'RedMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'RedMsgFColor', g_Config.btRedMsgFColor);
  g_Config.btRedMsgFColor := Config.ReadInteger('Setup', 'RedMsgFColor', g_Config.btRedMsgFColor);

  if Config.ReadInteger('Setup', 'RedMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'RedMsgBColor', g_Config.btRedMsgBColor);
  g_Config.btRedMsgBColor := Config.ReadInteger('Setup', 'RedMsgBColor', g_Config.btRedMsgBColor);

  if Config.ReadInteger('Setup', 'GuildMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildMsgFColor', g_Config.btGuildMsgFColor);
  g_Config.btGuildMsgFColor := Config.ReadInteger('Setup', 'GuildMsgFColor', g_Config.btGuildMsgFColor);

  if Config.ReadInteger('Setup', 'GuildMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildMsgBColor', g_Config.btGuildMsgBColor);
  g_Config.btGuildMsgBColor := Config.ReadInteger('Setup', 'GuildMsgBColor', g_Config.btGuildMsgBColor);

  if Config.ReadInteger('Setup', 'GroupMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GroupMsgFColor', g_Config.btGroupMsgFColor);
  g_Config.btGroupMsgFColor := Config.ReadInteger('Setup', 'GroupMsgFColor', g_Config.btGroupMsgFColor);

  if Config.ReadInteger('Setup', 'GroupMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GroupMsgBColor', g_Config.btGroupMsgBColor);
  g_Config.btGroupMsgBColor := Config.ReadInteger('Setup', 'GroupMsgBColor', g_Config.btGroupMsgBColor);

  if Config.ReadInteger('Setup', 'CustMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'CustMsgFColor', g_Config.btCustMsgFColor);
  g_Config.btCustMsgFColor := Config.ReadInteger('Setup', 'CustMsgFColor', g_Config.btCustMsgFColor);

  if Config.ReadInteger('Setup', 'CustMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'CustMsgBColor', g_Config.btCustMsgBColor);
  g_Config.btCustMsgBColor := Config.ReadInteger('Setup', 'CustMsgBColor', g_Config.btCustMsgBColor);

  if Config.ReadInteger('Setup', 'MonRandomAddValue', -1) < 0 then
    Config.WriteInteger('Setup', 'MonRandomAddValue', g_Config.nMonRandomAddValue);
  g_Config.nMonRandomAddValue := Config.ReadInteger('Setup', 'MonRandomAddValue', g_Config.nMonRandomAddValue);

  if Config.ReadInteger('Setup', 'MakeRandomAddValue', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeRandomAddValue', g_Config.nMakeRandomAddValue);
  g_Config.nMakeRandomAddValue := Config.ReadInteger('Setup', 'MakeRandomAddValue', g_Config.nMakeRandomAddValue);

//人形身上装备极品机率 20080716
  if Config.ReadInteger('Setup', 'PlayMonRandomAddValue', -1) < 0 then
    Config.WriteInteger('Setup', 'PlayMonRandomAddValue', g_Config.nPlayMonRandomAddValue);
  g_Config.nPlayMonRandomAddValue := Config.ReadInteger('Setup', 'PlayMonRandomAddValue', g_Config.nPlayMonRandomAddValue);
//-------------气血石配置------------------------------
{$IF M2Version <> 2}
  if Config.ReadInteger('Setup', 'StartHPRock', -1) < 0 then
    Config.WriteInteger('Setup', 'StartHPRock', g_Config.nStartHPRock);
  g_Config.nStartHPRock := Config.ReadInteger('Setup', 'StartHPRock', g_Config.nStartHPRock);

  if Config.ReadInteger('Setup', 'RockAddHP', -1) < 0 then
    Config.WriteInteger('Setup', 'RockAddHP', g_Config.nRockAddHP);
  g_Config.nRockAddHP := Config.ReadInteger('Setup', 'RockAddHP', g_Config.nRockAddHP);

  if Config.ReadInteger('Setup', 'HPRockSpell', -1) < 0 then
    Config.WriteInteger('Setup', 'HPRockSpell', g_Config.nHPRockSpell);
  g_Config.nHPRockSpell := Config.ReadInteger('Setup', 'HPRockSpell', g_Config.nHPRockSpell);

  if Config.ReadInteger('Setup', 'HPRockDecDura', -1) < 0 then
    Config.WriteInteger('Setup', 'HPRockDecDura', g_Config.nHPRockDecDura);
  g_Config.nHPRockDecDura := Config.ReadInteger('Setup', 'HPRockDecDura', g_Config.nHPRockDecDura);

  if Config.ReadInteger('Setup', 'StartMPRock', -1) < 0 then
    Config.WriteInteger('Setup', 'StartMPRock', g_Config.nStartMPRock);
  g_Config.nStartMPRock := Config.ReadInteger('Setup', 'StartMPRock', g_Config.nStartMPRock);

  if Config.ReadInteger('Setup', 'RockAddMP', -1) < 0 then
    Config.WriteInteger('Setup', 'RockAddMP', g_Config.nRockAddMP);
  g_Config.nRockAddMP := Config.ReadInteger('Setup', 'RockAddMP', g_Config.nRockAddMP);

  if Config.ReadInteger('Setup', 'MPRockSpell', -1) < 0 then
    Config.WriteInteger('Setup', 'MPRockSpell', g_Config.nMPRockSpell);
  g_Config.nMPRockSpell := Config.ReadInteger('Setup', 'MPRockSpell', g_Config.nMPRockSpell);

  if Config.ReadInteger('Setup', 'MPRockDecDura', -1) < 0 then
    Config.WriteInteger('Setup', 'MPRockDecDura', g_Config.nMPRockDecDura);
  g_Config.nMPRockDecDura := Config.ReadInteger('Setup', 'MPRockDecDura', g_Config.nMPRockDecDura);

  if Config.ReadInteger('Setup', 'StartHPMPRock', -1) < 0 then
    Config.WriteInteger('Setup', 'StartHPMPRock', g_Config.nStartHPMPRock);
  g_Config.nStartHPMPRock := Config.ReadInteger('Setup', 'StartHPMPRock', g_Config.nStartHPMPRock);

  if Config.ReadInteger('Setup', 'RockAddHPMP', -1) < 0 then
    Config.WriteInteger('Setup', 'RockAddHPMP', g_Config.nRockAddHPMP);
  g_Config.nRockAddHPMP := Config.ReadInteger('Setup', 'RockAddHPMP', g_Config.nRockAddHPMP);

  if Config.ReadInteger('Setup', 'HPMPRockSpell', -1) < 0 then
    Config.WriteInteger('Setup', 'HPMPRockSpell', g_Config.nHPMPRockSpell);
  g_Config.nHPMPRockSpell := Config.ReadInteger('Setup', 'HPMPRockSpell', g_Config.nHPMPRockSpell);

  if Config.ReadInteger('Setup', 'HPMPRockDecDura', -1) < 0 then
    Config.WriteInteger('Setup', 'HPMPRockDecDura', g_Config.nHPMPRockDecDura);
  g_Config.nHPMPRockDecDura := Config.ReadInteger('Setup', 'HPMPRockDecDura', g_Config.nHPMPRockDecDura);

  if Config.ReadInteger('Setup', 'StartHPMPRock1', -1) < 0 then
    Config.WriteInteger('Setup', 'StartHPMPRock1', g_Config.nStartHPMPRock1);
  g_Config.nStartHPMPRock1 := Config.ReadInteger('Setup', 'StartHPMPRock1', g_Config.nStartHPMPRock1);

  if Config.ReadInteger('Setup', 'RockAddHPMP1', -1) < 0 then
    Config.WriteInteger('Setup', 'RockAddHPMP1', g_Config.nRockAddHPMP1);
  g_Config.nRockAddHPMP1 := Config.ReadInteger('Setup', 'RockAddHPMP1', g_Config.nRockAddHPMP1);

  if Config.ReadInteger('Setup', 'HPMPRockSpell1', -1) < 0 then
    Config.WriteInteger('Setup', 'HPMPRockSpell1', g_Config.nHPMPRockSpell1);
  g_Config.nHPMPRockSpell1 := Config.ReadInteger('Setup', 'HPMPRockSpell1', g_Config.nHPMPRockSpell1);

  if Config.ReadInteger('Setup', 'HPMPRockDecDura1', -1) < 0 then
    Config.WriteInteger('Setup', 'HPMPRockDecDura1', g_Config.nHPMPRockDecDura1);
  g_Config.nHPMPRockDecDura1 := Config.ReadInteger('Setup', 'HPMPRockDecDura1', g_Config.nHPMPRockDecDura1);
  {$IFEND}
//---------------------------------------------
  if Config.ReadInteger('Setup', 'WeaponDCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponDCAddValueMaxLimit', g_Config.nWeaponDCAddValueMaxLimit);
  g_Config.nWeaponDCAddValueMaxLimit := Config.ReadInteger('Setup', 'WeaponDCAddValueMaxLimit', g_Config.nWeaponDCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'WeaponDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponDCAddValueRate', g_Config.nWeaponDCAddValueRate);
  g_Config.nWeaponDCAddValueRate := Config.ReadInteger('Setup', 'WeaponDCAddValueRate', g_Config.nWeaponDCAddValueRate);

  if Config.ReadInteger('Setup', 'WeaponMCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponMCAddValueMaxLimit', g_Config.nWeaponMCAddValueMaxLimit);
  g_Config.nWeaponMCAddValueMaxLimit := Config.ReadInteger('Setup', 'WeaponMCAddValueMaxLimit', g_Config.nWeaponMCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'WeaponMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponMCAddValueRate', g_Config.nWeaponMCAddValueRate);
  g_Config.nWeaponMCAddValueRate := Config.ReadInteger('Setup', 'WeaponMCAddValueRate', g_Config.nWeaponMCAddValueRate);

  if Config.ReadInteger('Setup', 'WeaponSCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponSCAddValueMaxLimit', g_Config.nWeaponSCAddValueMaxLimit);
  g_Config.nWeaponSCAddValueMaxLimit := Config.ReadInteger('Setup', 'WeaponSCAddValueMaxLimit', g_Config.nWeaponSCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'WeaponSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponSCAddValueRate', g_Config.nWeaponSCAddValueRate);
  g_Config.nWeaponSCAddValueRate := Config.ReadInteger('Setup', 'WeaponSCAddValueRate', g_Config.nWeaponSCAddValueRate);

  if Config.ReadInteger('Setup', 'WeaponDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponDCAddRate', g_Config.nWeaponDCAddRate);
  g_Config.nWeaponDCAddRate := Config.ReadInteger('Setup', 'WeaponDCAddRate', g_Config.nWeaponDCAddRate);

  if Config.ReadInteger('Setup', 'WeaponSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponSCAddRate', g_Config.nWeaponSCAddRate);
  g_Config.nWeaponSCAddRate := Config.ReadInteger('Setup', 'WeaponSCAddRate', g_Config.nWeaponSCAddRate);

  if Config.ReadInteger('Setup', 'WeaponMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponMCAddRate', g_Config.nWeaponMCAddRate);
  g_Config.nWeaponMCAddRate := Config.ReadInteger('Setup', 'WeaponMCAddRate', g_Config.nWeaponMCAddRate);

  if Config.ReadInteger('Setup', 'DressDCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DressDCAddValueMaxLimit', g_Config.nDressDCAddValueMaxLimit);
  g_Config.nDressDCAddValueMaxLimit := Config.ReadInteger('Setup', 'DressDCAddValueMaxLimit', g_Config.nDressDCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'DressDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressDCAddValueRate', g_Config.nDressDCAddValueRate);
  g_Config.nDressDCAddValueRate := Config.ReadInteger('Setup', 'DressDCAddValueRate', g_Config.nDressDCAddValueRate);

  if Config.ReadInteger('Setup', 'DressDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressDCAddRate', g_Config.nDressDCAddRate);
  g_Config.nDressDCAddRate := Config.ReadInteger('Setup', 'DressDCAddRate', g_Config.nDressDCAddRate);

  if Config.ReadInteger('Setup', 'DressMCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMCAddValueMaxLimit', g_Config.nDressMCAddValueMaxLimit);
  g_Config.nDressMCAddValueMaxLimit := Config.ReadInteger('Setup', 'DressMCAddValueMaxLimit', g_Config.nDressMCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'DressMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMCAddValueRate', g_Config.nDressMCAddValueRate);
  g_Config.nDressMCAddValueRate := Config.ReadInteger('Setup', 'DressMCAddValueRate', g_Config.nDressMCAddValueRate);

  if Config.ReadInteger('Setup', 'DressMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMCAddRate', g_Config.nDressMCAddRate);
  g_Config.nDressMCAddRate := Config.ReadInteger('Setup', 'DressMCAddRate', g_Config.nDressMCAddRate);

  if Config.ReadInteger('Setup', 'DressSCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DressSCAddValueMaxLimit', g_Config.nDressSCAddValueMaxLimit);
  g_Config.nDressSCAddValueMaxLimit := Config.ReadInteger('Setup', 'DressSCAddValueMaxLimit', g_Config.nDressSCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'DressSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressSCAddValueRate', g_Config.nDressSCAddValueRate);
  g_Config.nDressSCAddValueRate := Config.ReadInteger('Setup', 'DressSCAddValueRate', g_Config.nDressSCAddValueRate);

  if Config.ReadInteger('Setup', 'DressSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressSCAddRate', g_Config.nDressSCAddRate);
  g_Config.nDressSCAddRate := Config.ReadInteger('Setup', 'DressSCAddRate', g_Config.nDressSCAddRate);

  if Config.ReadInteger('Setup', 'DressACAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DressACAddValueMaxLimit', g_Config.nDressACAddValueMaxLimit);
  g_Config.nDressACAddValueMaxLimit := Config.ReadInteger('Setup', 'DressACAddValueMaxLimit', g_Config.nDressACAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'DressACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressACAddValueRate', g_Config.nDressACAddValueRate);
  g_Config.nDressACAddValueRate := Config.ReadInteger('Setup', 'DressACAddValueRate', g_Config.nDressACAddValueRate);

  if Config.ReadInteger('Setup', 'DressACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressACAddRate', g_Config.nDressACAddRate);
  g_Config.nDressACAddRate := Config.ReadInteger('Setup', 'DressACAddRate', g_Config.nDressACAddRate);

  if Config.ReadInteger('Setup', 'DressMACAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMACAddValueMaxLimit', g_Config.nDressMACAddValueMaxLimit);
  g_Config.nDressMACAddValueMaxLimit := Config.ReadInteger('Setup', 'DressMACAddValueMaxLimit', g_Config.nDressMACAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'DressMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMACAddValueRate', g_Config.nDressMACAddValueRate);
  g_Config.nDressMACAddValueRate := Config.ReadInteger('Setup', 'DressMACAddValueRate', g_Config.nDressMACAddValueRate);

  if Config.ReadInteger('Setup', 'DressMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMACAddRate', g_Config.nDressMACAddRate);
  g_Config.nDressMACAddRate := Config.ReadInteger('Setup', 'DressMACAddRate', g_Config.nDressMACAddRate);

  if Config.ReadInteger('Setup', 'NeckLace19DCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19DCAddValueMaxLimit', g_Config.nNeckLace19DCAddValueMaxLimit);
  g_Config.nNeckLace19DCAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace19DCAddValueMaxLimit', g_Config.nNeckLace19DCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace19DCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19DCAddValueRate', g_Config.nNeckLace19DCAddValueRate);
  g_Config.nNeckLace19DCAddValueRate := Config.ReadInteger('Setup', 'NeckLace19DCAddValueRate', g_Config.nNeckLace19DCAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace19DCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19DCAddRate', g_Config.nNeckLace19DCAddRate);
  g_Config.nNeckLace19DCAddRate := Config.ReadInteger('Setup', 'NeckLace19DCAddRate', g_Config.nNeckLace19DCAddRate);

  if Config.ReadInteger('Setup', 'NeckLace19MCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19MCAddValueMaxLimit', g_Config.nNeckLace19MCAddValueMaxLimit);
  g_Config.nNeckLace19MCAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace19MCAddValueMaxLimit', g_Config.nNeckLace19MCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace19MCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19MCAddValueRate', g_Config.nNeckLace19MCAddValueRate);
  g_Config.nNeckLace19MCAddValueRate := Config.ReadInteger('Setup', 'NeckLace19MCAddValueRate', g_Config.nNeckLace19MCAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace19MCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19MCAddRate', g_Config.nNeckLace19MCAddRate);
  g_Config.nNeckLace19MCAddRate := Config.ReadInteger('Setup', 'NeckLace19MCAddRate', g_Config.nNeckLace19MCAddRate);

  if Config.ReadInteger('Setup', 'NeckLace19SCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19SCAddValueMaxLimit', g_Config.nNeckLace19SCAddValueMaxLimit);
  g_Config.nNeckLace19SCAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace19SCAddValueMaxLimit', g_Config.nNeckLace19SCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace19SCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19SCAddValueRate', g_Config.nNeckLace19SCAddValueRate);
  g_Config.nNeckLace19SCAddValueRate := Config.ReadInteger('Setup', 'NeckLace19SCAddValueRate', g_Config.nNeckLace19SCAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace19SCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19SCAddRate', g_Config.nNeckLace19SCAddRate);
  g_Config.nNeckLace19SCAddRate := Config.ReadInteger('Setup', 'NeckLace19SCAddRate', g_Config.nNeckLace19SCAddRate);

  if Config.ReadInteger('Setup', 'NeckLace19ACAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19ACAddValueMaxLimit', g_Config.nNeckLace19ACAddValueMaxLimit);
  g_Config.nNeckLace19ACAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace19ACAddValueMaxLimit', g_Config.nNeckLace19ACAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace19ACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19ACAddValueRate', g_Config.nNeckLace19ACAddValueRate);
  g_Config.nNeckLace19ACAddValueRate := Config.ReadInteger('Setup', 'NeckLace19ACAddValueRate', g_Config.nNeckLace19ACAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace19ACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19ACAddRate', g_Config.nNeckLace19ACAddRate);
  g_Config.nNeckLace19ACAddRate := Config.ReadInteger('Setup', 'NeckLace19ACAddRate', g_Config.nNeckLace19ACAddRate);

  if Config.ReadInteger('Setup', 'NeckLace19MACAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19MACAddValueMaxLimit', g_Config.nNeckLace19MACAddValueMaxLimit);
  g_Config.nNeckLace19MACAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace19MACAddValueMaxLimit', g_Config.nNeckLace19MACAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace19MACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19MACAddValueRate', g_Config.nNeckLace19MACAddValueRate);
  g_Config.nNeckLace19MACAddValueRate := Config.ReadInteger('Setup', 'NeckLace19MACAddValueRate', g_Config.nNeckLace19MACAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace19MACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19MACAddRate', g_Config.nNeckLace19MACAddRate);
  g_Config.nNeckLace19MACAddRate := Config.ReadInteger('Setup', 'NeckLace19MACAddRate', g_Config.nNeckLace19MACAddRate);

  if Config.ReadInteger('Setup', 'NeckLace202124DCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124DCAddValueMaxLimit', g_Config.nNeckLace202124DCAddValueMaxLimit);
  g_Config.nNeckLace202124DCAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace202124DCAddValueMaxLimit', g_Config.nNeckLace202124DCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace202124DCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124DCAddValueRate', g_Config.nNeckLace202124DCAddValueRate);
  g_Config.nNeckLace202124DCAddValueRate := Config.ReadInteger('Setup', 'NeckLace202124DCAddValueRate', g_Config.nNeckLace202124DCAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace202124DCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124DCAddRate', g_Config.nNeckLace202124DCAddRate);
  g_Config.nNeckLace202124DCAddRate := Config.ReadInteger('Setup', 'NeckLace202124DCAddRate', g_Config.nNeckLace202124DCAddRate);

  if Config.ReadInteger('Setup', 'NeckLace202124MCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124MCAddValueMaxLimit', g_Config.nNeckLace202124MCAddValueMaxLimit);
  g_Config.nNeckLace202124MCAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace202124MCAddValueMaxLimit', g_Config.nNeckLace202124MCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace202124MCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124MCAddValueRate', g_Config.nNeckLace202124MCAddValueRate);
  g_Config.nNeckLace202124MCAddValueRate := Config.ReadInteger('Setup', 'NeckLace202124MCAddValueRate', g_Config.nNeckLace202124MCAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace202124MCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124MCAddRate', g_Config.nNeckLace202124MCAddRate);
  g_Config.nNeckLace202124MCAddRate := Config.ReadInteger('Setup', 'NeckLace202124MCAddRate', g_Config.nNeckLace202124MCAddRate);

  if Config.ReadInteger('Setup', 'NeckLace202124SCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124SCAddValueMaxLimit', g_Config.nNeckLace202124SCAddValueMaxLimit);
  g_Config.nNeckLace202124SCAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace202124SCAddValueMaxLimit', g_Config.nNeckLace202124SCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace202124SCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124SCAddValueRate', g_Config.nNeckLace202124SCAddValueRate);
  g_Config.nNeckLace202124SCAddValueRate := Config.ReadInteger('Setup', 'NeckLace202124SCAddValueRate', g_Config.nNeckLace202124SCAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace202124SCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124SCAddRate', g_Config.nNeckLace202124SCAddRate);
  g_Config.nNeckLace202124SCAddRate := Config.ReadInteger('Setup', 'NeckLace202124SCAddRate', g_Config.nNeckLace202124SCAddRate);

  if Config.ReadInteger('Setup', 'NeckLace202124ACAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124ACAddValueMaxLimit', g_Config.nNeckLace202124ACAddValueMaxLimit);
  g_Config.nNeckLace202124ACAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace202124ACAddValueMaxLimit', g_Config.nNeckLace202124ACAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace202124ACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124ACAddValueRate', g_Config.nNeckLace202124ACAddValueRate);
  g_Config.nNeckLace202124ACAddValueRate := Config.ReadInteger('Setup', 'NeckLace202124ACAddValueRate', g_Config.nNeckLace202124ACAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace202124ACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124ACAddRate', g_Config.nNeckLace202124ACAddRate);
  g_Config.nNeckLace202124ACAddRate := Config.ReadInteger('Setup', 'NeckLace202124ACAddRate', g_Config.nNeckLace202124ACAddRate);

  if Config.ReadInteger('Setup', 'NeckLace202124MACAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124MACAddValueMaxLimit', g_Config.nNeckLace202124MACAddValueMaxLimit);
  g_Config.nNeckLace202124MACAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace202124MACAddValueMaxLimit', g_Config.nNeckLace202124MACAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace202124MACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124MACAddValueRate', g_Config.nNeckLace202124MACAddValueRate);
  g_Config.nNeckLace202124MACAddValueRate := Config.ReadInteger('Setup', 'NeckLace202124MACAddValueRate', g_Config.nNeckLace202124MACAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace202124MACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124MACAddRate', g_Config.nNeckLace202124MACAddRate);
  g_Config.nNeckLace202124MACAddRate:= Config.ReadInteger('Setup', 'NeckLace202124MACAddRate', g_Config.nNeckLace202124MACAddRate);

  if Config.ReadInteger('Setup', 'ArmRing26DCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26DCAddValueMaxLimit', g_Config.nArmRing26DCAddValueMaxLimit);
  g_Config.nArmRing26DCAddValueMaxLimit := Config.ReadInteger('Setup', 'ArmRing26DCAddValueMaxLimit', g_Config.nArmRing26DCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'ArmRing26DCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26DCAddValueRate', g_Config.nArmRing26DCAddValueRate);
  g_Config.nArmRing26DCAddValueRate := Config.ReadInteger('Setup', 'ArmRing26DCAddValueRate', g_Config.nArmRing26DCAddValueRate);

  if Config.ReadInteger('Setup', 'ArmRing26DCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26DCAddRate', g_Config.nArmRing26DCAddRate);
  g_Config.nArmRing26DCAddRate := Config.ReadInteger('Setup', 'ArmRing26DCAddRate', g_Config.nArmRing26DCAddRate);

  if Config.ReadInteger('Setup', 'ArmRing26MCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26MCAddValueMaxLimit', g_Config.nArmRing26MCAddValueMaxLimit);
  g_Config.nArmRing26MCAddValueMaxLimit := Config.ReadInteger('Setup', 'ArmRing26MCAddValueMaxLimit', g_Config.nArmRing26MCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'ArmRing26MCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26MCAddValueRate', g_Config.nArmRing26MCAddValueRate);
  g_Config.nArmRing26MCAddValueRate := Config.ReadInteger('Setup', 'ArmRing26MCAddValueRate', g_Config.nArmRing26MCAddValueRate);

  if Config.ReadInteger('Setup', 'ArmRing26MCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26MCAddRate', g_Config.nArmRing26MCAddRate);
  g_Config.nArmRing26MCAddRate := Config.ReadInteger('Setup', 'ArmRing26MCAddRate', g_Config.nArmRing26MCAddRate);

  if Config.ReadInteger('Setup', 'ArmRing26SCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26SCAddValueMaxLimit', g_Config.nArmRing26SCAddValueMaxLimit);
  g_Config.nArmRing26SCAddValueMaxLimit := Config.ReadInteger('Setup', 'ArmRing26SCAddValueMaxLimit', g_Config.nArmRing26SCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'ArmRing26SCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26SCAddValueRate', g_Config.nArmRing26SCAddValueRate);
  g_Config.nArmRing26SCAddValueRate := Config.ReadInteger('Setup', 'ArmRing26SCAddValueRate', g_Config.nArmRing26SCAddValueRate);

  if Config.ReadInteger('Setup', 'ArmRing26SCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26SCAddRate', g_Config.nArmRing26SCAddRate);
  g_Config.nArmRing26SCAddRate := Config.ReadInteger('Setup', 'ArmRing26SCAddRate', g_Config.nArmRing26SCAddRate);

  if Config.ReadInteger('Setup', 'ArmRing26ACAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26ACAddValueMaxLimit', g_Config.nArmRing26ACAddValueMaxLimit);
  g_Config.nArmRing26ACAddValueMaxLimit := Config.ReadInteger('Setup', 'ArmRing26ACAddValueMaxLimit', g_Config.nArmRing26ACAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'ArmRing26ACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26ACAddValueRate', g_Config.nArmRing26ACAddValueRate);
  g_Config.nArmRing26ACAddValueRate := Config.ReadInteger('Setup', 'ArmRing26ACAddValueRate', g_Config.nArmRing26ACAddValueRate);

  if Config.ReadInteger('Setup', 'ArmRing26ACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26ACAddRate', g_Config.nArmRing26ACAddRate);
  g_Config.nArmRing26ACAddRate := Config.ReadInteger('Setup', 'ArmRing26ACAddRate', g_Config.nArmRing26ACAddRate);

  if Config.ReadInteger('Setup', 'ArmRing26MACAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26MACAddValueMaxLimit', g_Config.nArmRing26MACAddValueMaxLimit);
  g_Config.nArmRing26MACAddValueMaxLimit := Config.ReadInteger('Setup', 'ArmRing26MACAddValueMaxLimit', g_Config.nArmRing26MACAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'ArmRing26MACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26MACAddValueRate', g_Config.nArmRing26MACAddValueRate);
  g_Config.nArmRing26MACAddValueRate := Config.ReadInteger('Setup', 'ArmRing26MACAddValueRate', g_Config.nArmRing26MACAddValueRate);

  if Config.ReadInteger('Setup', 'ArmRing26MACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26MACAddRate', g_Config.nArmRing26MACAddRate);
  g_Config.nArmRing26MACAddRate := Config.ReadInteger('Setup', 'ArmRing26MACAddRate', g_Config.nArmRing26MACAddRate);

  if Config.ReadInteger('Setup', 'Ring22DCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22DCAddValueMaxLimit', g_Config.nRing22DCAddValueMaxLimit);
  g_Config.nRing22DCAddValueMaxLimit := Config.ReadInteger('Setup', 'Ring22DCAddValueMaxLimit', g_Config.nRing22DCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'Ring22DCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22DCAddValueRate', g_Config.nRing22DCAddValueRate);
  g_Config.nRing22DCAddValueRate := Config.ReadInteger('Setup', 'Ring22DCAddValueRate', g_Config.nRing22DCAddValueRate);

  if Config.ReadInteger('Setup', 'Ring22DCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22DCAddRate', g_Config.nRing22DCAddRate);
  g_Config.nRing22DCAddRate := Config.ReadInteger('Setup', 'Ring22DCAddRate', g_Config.nRing22DCAddRate);

  if Config.ReadInteger('Setup', 'Ring22MCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22MCAddValueMaxLimit', g_Config.nRing22MCAddValueMaxLimit);
  g_Config.nRing22MCAddValueMaxLimit := Config.ReadInteger('Setup', 'Ring22MCAddValueMaxLimit', g_Config.nRing22MCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'Ring22MCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22MCAddValueRate', g_Config.nRing22MCAddValueRate);
  g_Config.nRing22MCAddValueRate := Config.ReadInteger('Setup', 'Ring22MCAddValueRate', g_Config.nRing22MCAddValueRate);

  if Config.ReadInteger('Setup', 'Ring22MCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22MCAddRate', g_Config.nRing22MCAddRate);
  g_Config.nRing22MCAddRate := Config.ReadInteger('Setup', 'Ring22MCAddRate', g_Config.nRing22MCAddRate);

  if Config.ReadInteger('Setup', 'Ring22SCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22SCAddValueMaxLimit', g_Config.nRing22SCAddValueMaxLimit);
  g_Config.nRing22SCAddValueMaxLimit := Config.ReadInteger('Setup', 'Ring22SCAddValueMaxLimit', g_Config.nRing22SCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'Ring22SCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22SCAddValueRate', g_Config.nRing22SCAddValueRate);
  g_Config.nRing22SCAddValueRate := Config.ReadInteger('Setup', 'Ring22SCAddValueRate', g_Config.nRing22SCAddValueRate);

  if Config.ReadInteger('Setup', 'Ring22SCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22SCAddRate', g_Config.nRing22SCAddRate);
  g_Config.nRing22SCAddRate := Config.ReadInteger('Setup', 'Ring22SCAddRate', g_Config.nRing22SCAddRate);

  if Config.ReadInteger('Setup', 'Ring23DCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23DCAddValueMaxLimit', g_Config.nRing23DCAddValueMaxLimit);
  g_Config.nRing23DCAddValueMaxLimit := Config.ReadInteger('Setup', 'Ring23DCAddValueMaxLimit', g_Config.nRing23DCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'Ring23DCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23DCAddValueRate', g_Config.nRing23DCAddValueRate);
  g_Config.nRing23DCAddValueRate := Config.ReadInteger('Setup', 'Ring23DCAddValueRate', g_Config.nRing23DCAddValueRate);

  if Config.ReadInteger('Setup', 'Ring23DCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23DCAddRate', g_Config.nRing23DCAddRate);
  g_Config.nRing23DCAddRate := Config.ReadInteger('Setup', 'Ring23DCAddRate', g_Config.nRing23DCAddRate);

  if Config.ReadInteger('Setup', 'Ring23MCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23MCAddValueMaxLimit', g_Config.nRing23MCAddValueMaxLimit);
  g_Config.nRing23MCAddValueMaxLimit := Config.ReadInteger('Setup', 'Ring23MCAddValueMaxLimit', g_Config.nRing23MCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'Ring23MCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23MCAddValueRate', g_Config.nRing23MCAddValueRate);
  g_Config.nRing23MCAddValueRate := Config.ReadInteger('Setup', 'Ring23MCAddValueRate', g_Config.nRing23MCAddValueRate);

  if Config.ReadInteger('Setup', 'Ring23MCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23MCAddRate', g_Config.nRing23MCAddRate);
  g_Config.nRing23MCAddRate := Config.ReadInteger('Setup', 'Ring23MCAddRate', g_Config.nRing23MCAddRate);

  if Config.ReadInteger('Setup', 'Ring23SCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23SCAddValueMaxLimit', g_Config.nRing23SCAddValueMaxLimit);
  g_Config.nRing23SCAddValueMaxLimit := Config.ReadInteger('Setup', 'Ring23SCAddValueMaxLimit', g_Config.nRing23SCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'Ring23SCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23SCAddValueRate', g_Config.nRing23SCAddValueRate);
  g_Config.nRing23SCAddValueRate := Config.ReadInteger('Setup', 'Ring23SCAddValueRate', g_Config.nRing23SCAddValueRate);

  if Config.ReadInteger('Setup', 'Ring23SCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23SCAddRate', g_Config.nRing23SCAddRate);
  g_Config.nRing23SCAddRate := Config.ReadInteger('Setup', 'Ring23SCAddRate', g_Config.nRing23SCAddRate);

  if Config.ReadInteger('Setup', 'Ring23ACAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23ACAddValueMaxLimit', g_Config.nRing23ACAddValueMaxLimit);
  g_Config.nRing23ACAddValueMaxLimit := Config.ReadInteger('Setup', 'Ring23ACAddValueMaxLimit', g_Config.nRing23ACAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'Ring23ACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23ACAddValueRate', g_Config.nRing23ACAddValueRate);
  g_Config.nRing23ACAddValueRate := Config.ReadInteger('Setup', 'Ring23ACAddValueRate', g_Config.nRing23ACAddValueRate);

  if Config.ReadInteger('Setup', 'Ring23ACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23ACAddRate', g_Config.nRing23ACAddRate);
  g_Config.nRing23ACAddRate := Config.ReadInteger('Setup', 'Ring23ACAddRate', g_Config.nRing23ACAddRate);

  if Config.ReadInteger('Setup', 'Ring23MACAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23MACAddValueMaxLimit', g_Config.nRing23MACAddValueMaxLimit);
  g_Config.nRing23MACAddValueMaxLimit := Config.ReadInteger('Setup', 'Ring23MACAddValueMaxLimit', g_Config.nRing23MACAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'Ring23MACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23MACAddValueRate', g_Config.nRing23MACAddValueRate);
  g_Config.nRing23MACAddValueRate := Config.ReadInteger('Setup', 'Ring23MACAddValueRate', g_Config.nRing23MACAddValueRate);

  if Config.ReadInteger('Setup', 'Ring23MACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23MACAddRate', g_Config.nRing23MACAddRate);
  g_Config.nRing23MACAddRate := Config.ReadInteger('Setup', 'Ring23MACAddRate', g_Config.nRing23MACAddRate);
//------------------------------------------------------------------------------
  //20080503 极品鞋子加攻最高点
  if Config.ReadInteger('Setup', 'BootsDCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsDCAddValueMaxLimit', g_Config.nBootsDCAddValueMaxLimit);
  g_Config.nBootsDCAddValueMaxLimit := Config.ReadInteger('Setup', 'BootsDCAddValueMaxLimit', g_Config.nBootsDCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'BootsDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsDCAddValueRate', g_Config.nBootsDCAddValueRate);
  g_Config.nBootsDCAddValueRate := Config.ReadInteger('Setup', 'BootsDCAddValueRate', g_Config.nBootsDCAddValueRate);

  if Config.ReadInteger('Setup', 'BootsDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsDCAddRate', g_Config.nBootsDCAddRate);
  g_Config.nBootsDCAddRate := Config.ReadInteger('Setup', 'BootsDCAddRate', g_Config.nBootsDCAddRate);
//道术
  if Config.ReadInteger('Setup', 'BootsSCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsSCAddValueMaxLimit', g_Config.nBootsSCAddValueMaxLimit);
  g_Config.nBootsSCAddValueMaxLimit := Config.ReadInteger('Setup', 'BootsSCAddValueMaxLimit', g_Config.nBootsSCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'BootsSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsSCAddValueRate', g_Config.nBootsSCAddValueRate);
  g_Config.nBootsSCAddValueRate := Config.ReadInteger('Setup', 'BootsSCAddValueRate', g_Config.nBootsSCAddValueRate);

  if Config.ReadInteger('Setup', 'BootsSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsSCAddRate', g_Config.nBootsSCAddRate);
  g_Config.nBootsSCAddRate := Config.ReadInteger('Setup', 'BootsSCAddRate', g_Config.nBootsSCAddRate);
//魔法
  if Config.ReadInteger('Setup', 'BootsMCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsMCAddValueMaxLimit', g_Config.nBootsMCAddValueMaxLimit);
  g_Config.nBootsMCAddValueMaxLimit := Config.ReadInteger('Setup', 'BootsMCAddValueMaxLimit', g_Config.nBootsMCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'BootsMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsMCAddValueRate', g_Config.nBootsMCAddValueRate);
  g_Config.nBootsMCAddValueRate := Config.ReadInteger('Setup', 'BootsMCAddValueRate', g_Config.nBootsMCAddValueRate);

  if Config.ReadInteger('Setup', 'BootsMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsMCAddRate', g_Config.nBootsMCAddRate);
  g_Config.nBootsMCAddRate := Config.ReadInteger('Setup', 'BootsMCAddRate', g_Config.nBootsMCAddRate);
//防御
  if Config.ReadInteger('Setup', 'BootsACAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsACAddValueMaxLimit', g_Config.nBootsACAddValueMaxLimit);
  g_Config.nBootsACAddValueMaxLimit := Config.ReadInteger('Setup', 'BootsACAddValueMaxLimit', g_Config.nBootsACAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'BootsACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsACAddValueRate', g_Config.nBootsACAddValueRate);
  g_Config.nBootsACAddValueRate := Config.ReadInteger('Setup', 'BootsACAddValueRate', g_Config.nBootsACAddValueRate);

  if Config.ReadInteger('Setup', 'BootsACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsACAddRate', g_Config.nBootsACAddRate);
  g_Config.nBootsACAddRate := Config.ReadInteger('Setup', 'BootsACAddRate', g_Config.nBootsACAddRate);
//魔御
  if Config.ReadInteger('Setup', 'BootsMACAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsMACAddValueMaxLimit', g_Config.nBootsMACAddValueMaxLimit);
  g_Config.nBootsMACAddValueMaxLimit := Config.ReadInteger('Setup', 'BootsMACAddValueMaxLimit', g_Config.nBootsMACAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'BootsMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsMACAddValueRate', g_Config.nBootsMACAddValueRate);
  g_Config.nBootsMACAddValueRate := Config.ReadInteger('Setup', 'BootsMACAddValueRate', g_Config.nBootsMACAddValueRate);

  if Config.ReadInteger('Setup', 'BootsMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BootsMACAddRate', g_Config.nBootsMACAddRate);
  g_Config.nBootsMACAddRate := Config.ReadInteger('Setup', 'BootsMACAddRate', g_Config.nBootsMACAddRate);
//------------------------------------------------------------------------------
  if Config.ReadInteger('Setup', 'HelMetDCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetDCAddValueMaxLimit', g_Config.nHelMetDCAddValueMaxLimit);
  g_Config.nHelMetDCAddValueMaxLimit := Config.ReadInteger('Setup', 'HelMetDCAddValueMaxLimit', g_Config.nHelMetDCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'HelMetDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetDCAddValueRate', g_Config.nHelMetDCAddValueRate);
  g_Config.nHelMetDCAddValueRate := Config.ReadInteger('Setup', 'HelMetDCAddValueRate', g_Config.nHelMetDCAddValueRate);

  if Config.ReadInteger('Setup', 'HelMetDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetDCAddRate', g_Config.nHelMetDCAddRate);
  g_Config.nHelMetDCAddRate := Config.ReadInteger('Setup', 'HelMetDCAddRate', g_Config.nHelMetDCAddRate);

  if Config.ReadInteger('Setup', 'HelMetMCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetMCAddValueMaxLimit', g_Config.nHelMetMCAddValueMaxLimit);
  g_Config.nHelMetMCAddValueMaxLimit := Config.ReadInteger('Setup', 'HelMetMCAddValueMaxLimit', g_Config.nHelMetMCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'HelMetMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetMCAddValueRate', g_Config.nHelMetMCAddValueRate);
  g_Config.nHelMetMCAddValueRate := Config.ReadInteger('Setup', 'HelMetMCAddValueRate', g_Config.nHelMetMCAddValueRate);

  if Config.ReadInteger('Setup', 'HelMetMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetMCAddRate', g_Config.nHelMetMCAddRate);
  g_Config.nHelMetMCAddRate := Config.ReadInteger('Setup', 'HelMetMCAddRate', g_Config.nHelMetMCAddRate);

  if Config.ReadInteger('Setup', 'HelMetSCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetSCAddValueMaxLimit', g_Config.nHelMetSCAddValueMaxLimit);
  g_Config.nHelMetSCAddValueMaxLimit := Config.ReadInteger('Setup', 'HelMetSCAddValueMaxLimit', g_Config.nHelMetSCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'HelMetSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetSCAddValueRate', g_Config.nHelMetSCAddValueRate);
  g_Config.nHelMetSCAddValueRate := Config.ReadInteger('Setup', 'HelMetSCAddValueRate', g_Config.nHelMetSCAddValueRate);

  if Config.ReadInteger('Setup', 'HelMetSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetSCAddRate', g_Config.nHelMetSCAddRate);
  g_Config.nHelMetSCAddRate := Config.ReadInteger('Setup', 'HelMetSCAddRate', g_Config.nHelMetSCAddRate);

  if Config.ReadInteger('Setup', 'HelMetACAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetACAddValueMaxLimit', g_Config.nHelMetACAddValueMaxLimit);
  g_Config.nHelMetACAddValueMaxLimit := Config.ReadInteger('Setup', 'HelMetACAddValueMaxLimit', g_Config.nHelMetACAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'HelMetACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetACAddValueRate', g_Config.nHelMetACAddValueRate);
  g_Config.nHelMetACAddValueRate := Config.ReadInteger('Setup', 'HelMetACAddValueRate', g_Config.nHelMetACAddValueRate);

  if Config.ReadInteger('Setup', 'HelMetACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetACAddRate', g_Config.nHelMetACAddRate);
  g_Config.nHelMetACAddRate := Config.ReadInteger('Setup', 'HelMetACAddRate', g_Config.nHelMetACAddRate);

  if Config.ReadInteger('Setup', 'HelMetMACAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetMACAddValueMaxLimit', g_Config.nHelMetMACAddValueMaxLimit);
  g_Config.nHelMetMACAddValueMaxLimit := Config.ReadInteger('Setup', 'HelMetMACAddValueMaxLimit', g_Config.nHelMetMACAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'HelMetMACAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetMACAddValueRate', g_Config.nHelMetMACAddValueRate);
  g_Config.nHelMetMACAddValueRate := Config.ReadInteger('Setup', 'HelMetMACAddValueRate', g_Config.nHelMetMACAddValueRate);

  if Config.ReadInteger('Setup', 'HelMetMACAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetMACAddRate', g_Config.nHelMetMACAddRate);
  g_Config.nHelMetMACAddRate := Config.ReadInteger('Setup', 'HelMetMACAddRate', g_Config.nHelMetMACAddRate);

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetACAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetACAddRate', g_Config.nUnknowHelMetACAddRate)
  else g_Config.nUnknowHelMetACAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetACAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetACAddValueMaxLimit', g_Config.nUnknowHelMetACAddValueMaxLimit)
  else g_Config.nUnknowHelMetACAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetMACAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetMACAddRate', g_Config.nUnknowHelMetMACAddRate)
  else g_Config.nUnknowHelMetMACAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetMACAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetMACAddValueMaxLimit', g_Config.nUnknowHelMetMACAddValueMaxLimit)
  else g_Config.nUnknowHelMetMACAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetDCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetDCAddRate', g_Config.nUnknowHelMetDCAddRate)
  else g_Config.nUnknowHelMetDCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetDCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetDCAddValueMaxLimit', g_Config.nUnknowHelMetDCAddValueMaxLimit)
  else g_Config.nUnknowHelMetDCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetMCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetMCAddRate', g_Config.nUnknowHelMetMCAddRate)
  else g_Config.nUnknowHelMetMCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetMCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetMCAddValueMaxLimit', g_Config.nUnknowHelMetMCAddValueMaxLimit)
  else g_Config.nUnknowHelMetMCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetSCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetSCAddRate', g_Config.nUnknowHelMetSCAddRate)
  else g_Config.nUnknowHelMetSCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetSCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetSCAddValueMaxLimit', g_Config.nUnknowHelMetSCAddValueMaxLimit)
  else g_Config.nUnknowHelMetSCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceACAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceACAddRate', g_Config.nUnknowNecklaceACAddRate)
  else g_Config.nUnknowNecklaceACAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceACAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceACAddValueMaxLimit', g_Config.nUnknowNecklaceACAddValueMaxLimit)
  else g_Config.nUnknowNecklaceACAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceMACAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceMACAddRate', g_Config.nUnknowNecklaceMACAddRate)
  else g_Config.nUnknowNecklaceMACAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceMACAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceMACAddValueMaxLimit', g_Config.nUnknowNecklaceMACAddValueMaxLimit)
  else g_Config.nUnknowNecklaceMACAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceDCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceDCAddRate', g_Config.nUnknowNecklaceDCAddRate)
  else g_Config.nUnknowNecklaceDCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceDCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceDCAddValueMaxLimit', g_Config.nUnknowNecklaceDCAddValueMaxLimit)
  else g_Config.nUnknowNecklaceDCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceMCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceMCAddRate', g_Config.nUnknowNecklaceMCAddRate)
  else g_Config.nUnknowNecklaceMCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceMCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceMCAddValueMaxLimit', g_Config.nUnknowNecklaceMCAddValueMaxLimit)
  else g_Config.nUnknowNecklaceMCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceSCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceSCAddRate', g_Config.nUnknowNecklaceSCAddRate)
  else g_Config.nUnknowNecklaceSCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceSCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceSCAddValueMaxLimit', g_Config.nUnknowNecklaceSCAddValueMaxLimit)
  else g_Config.nUnknowNecklaceSCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingACAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingACAddRate', g_Config.nUnknowRingACAddRate)
  else g_Config.nUnknowRingACAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingACAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingACAddValueMaxLimit', g_Config.nUnknowRingACAddValueMaxLimit)
  else g_Config.nUnknowRingACAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingMACAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingMACAddRate', g_Config.nUnknowRingMACAddRate)
  else g_Config.nUnknowRingMACAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingMACAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingMACAddValueMaxLimit', g_Config.nUnknowRingMACAddValueMaxLimit)
  else g_Config.nUnknowRingMACAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingDCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingDCAddRate', g_Config.nUnknowRingDCAddRate)
  else g_Config.nUnknowRingDCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingDCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingDCAddValueMaxLimit', g_Config.nUnknowRingDCAddValueMaxLimit)
  else g_Config.nUnknowRingDCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingMCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingMCAddRate', g_Config.nUnknowRingMCAddRate)
  else g_Config.nUnknowRingMCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingMCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingMCAddValueMaxLimit', g_Config.nUnknowRingMCAddValueMaxLimit)
  else g_Config.nUnknowRingMCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingSCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingSCAddRate', g_Config.nUnknowRingSCAddRate)
  else g_Config.nUnknowRingSCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingSCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingSCAddValueMaxLimit', g_Config.nUnknowRingSCAddValueMaxLimit)
  else g_Config.nUnknowRingSCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MonOneDropGoldCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MonOneDropGoldCount', g_Config.nMonOneDropGoldCount)
  else g_Config.nMonOneDropGoldCount := nLoadInteger;

  if Config.ReadInteger('Setup', 'MakeMineHitRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeMineHitRate', g_Config.nMakeMineHitRate);
  g_Config.nMakeMineHitRate := Config.ReadInteger('Setup', 'MakeMineHitRate', g_Config.nMakeMineHitRate);

  if Config.ReadInteger('Setup', 'MakeMineRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeMineRate', g_Config.nMakeMineRate);
  g_Config.nMakeMineRate := Config.ReadInteger('Setup', 'MakeMineRate', g_Config.nMakeMineRate);

  if Config.ReadInteger('Setup', 'StoneTypeRate', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneTypeRate', g_Config.nStoneTypeRate);
  g_Config.nStoneTypeRate := Config.ReadInteger('Setup', 'StoneTypeRate', g_Config.nStoneTypeRate);

  if Config.ReadInteger('Setup', 'StoneTypeRateMin', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneTypeRateMin', g_Config.nStoneTypeRateMin);
  g_Config.nStoneTypeRateMin := Config.ReadInteger('Setup', 'StoneTypeRateMin', g_Config.nStoneTypeRateMin);

  if Config.ReadInteger('Setup', 'GoldStoneMin', -1) < 0 then
    Config.WriteInteger('Setup', 'GoldStoneMin', g_Config.nGoldStoneMin);
  g_Config.nGoldStoneMin := Config.ReadInteger('Setup', 'GoldStoneMin', g_Config.nGoldStoneMin);

  if Config.ReadInteger('Setup', 'GoldStoneMax', -1) < 0 then
    Config.WriteInteger('Setup', 'GoldStoneMax', g_Config.nGoldStoneMax);
  g_Config.nGoldStoneMax := Config.ReadInteger('Setup', 'GoldStoneMax', g_Config.nGoldStoneMax);

  if Config.ReadInteger('Setup', 'SilverStoneMin', -1) < 0 then
    Config.WriteInteger('Setup', 'SilverStoneMin', g_Config.nSilverStoneMin);
  g_Config.nSilverStoneMin := Config.ReadInteger('Setup', 'SilverStoneMin', g_Config.nSilverStoneMin);

  if Config.ReadInteger('Setup', 'SilverStoneMax', -1) < 0 then
    Config.WriteInteger('Setup', 'SilverStoneMax', g_Config.nSilverStoneMax);
  g_Config.nSilverStoneMax := Config.ReadInteger('Setup', 'SilverStoneMax', g_Config.nSilverStoneMax);

  if Config.ReadInteger('Setup', 'SteelStoneMin', -1) < 0 then
    Config.WriteInteger('Setup', 'SteelStoneMin', g_Config.nSteelStoneMin);
  g_Config.nSteelStoneMin := Config.ReadInteger('Setup', 'SteelStoneMin', g_Config.nSteelStoneMin);

  if Config.ReadInteger('Setup', 'SteelStoneMax', -1) < 0 then
    Config.WriteInteger('Setup', 'SteelStoneMax', g_Config.nSteelStoneMax);
  g_Config.nSteelStoneMax := Config.ReadInteger('Setup', 'SteelStoneMax', g_Config.nSteelStoneMax);

  if Config.ReadInteger('Setup', 'BlackStoneMin', -1) < 0 then
    Config.WriteInteger('Setup', 'BlackStoneMin', g_Config.nBlackStoneMin);
  g_Config.nBlackStoneMin := Config.ReadInteger('Setup', 'BlackStoneMin', g_Config.nBlackStoneMin);

  if Config.ReadInteger('Setup', 'BlackStoneMax', -1) < 0 then
    Config.WriteInteger('Setup', 'BlackStoneMax', g_Config.nBlackStoneMax);
  g_Config.nBlackStoneMax := Config.ReadInteger('Setup', 'BlackStoneMax', g_Config.nBlackStoneMax);

  if Config.ReadInteger('Setup', 'StoneMinDura', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneMinDura', g_Config.nStoneMinDura);
  g_Config.nStoneMinDura := Config.ReadInteger('Setup', 'StoneMinDura', g_Config.nStoneMinDura);

  if Config.ReadInteger('Setup', 'StoneGeneralDuraRate', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneGeneralDuraRate', g_Config.nStoneGeneralDuraRate);
  g_Config.nStoneGeneralDuraRate := Config.ReadInteger('Setup', 'StoneGeneralDuraRate', g_Config.nStoneGeneralDuraRate);

  if Config.ReadInteger('Setup', 'StoneAddDuraRate', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneAddDuraRate', g_Config.nStoneAddDuraRate);
  g_Config.nStoneAddDuraRate := Config.ReadInteger('Setup', 'StoneAddDuraRate', g_Config.nStoneAddDuraRate);

  if Config.ReadInteger('Setup', 'StoneAddDuraMax', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneAddDuraMax', g_Config.nStoneAddDuraMax);
  g_Config.nStoneAddDuraMax := Config.ReadInteger('Setup', 'StoneAddDuraMax', g_Config.nStoneAddDuraMax);

  if Config.ReadInteger('Setup', 'WinLottery1Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery1Min', g_Config.nWinLottery1Min);
  g_Config.nWinLottery1Min := Config.ReadInteger('Setup', 'WinLottery1Min', g_Config.nWinLottery1Min);

  if Config.ReadInteger('Setup', 'WinLottery1Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery1Max', g_Config.nWinLottery1Max);
  g_Config.nWinLottery1Max := Config.ReadInteger('Setup', 'WinLottery1Max', g_Config.nWinLottery1Max);

  if Config.ReadInteger('Setup', 'WinLottery2Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery2Min', g_Config.nWinLottery2Min);
  g_Config.nWinLottery2Min := Config.ReadInteger('Setup', 'WinLottery2Min', g_Config.nWinLottery2Min);

  if Config.ReadInteger('Setup', 'WinLottery2Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery2Max', g_Config.nWinLottery2Max);
  g_Config.nWinLottery2Max := Config.ReadInteger('Setup', 'WinLottery2Max', g_Config.nWinLottery2Max);

  if Config.ReadInteger('Setup', 'WinLottery3Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery3Min', g_Config.nWinLottery3Min);
  g_Config.nWinLottery3Min := Config.ReadInteger('Setup', 'WinLottery3Min', g_Config.nWinLottery3Min);

  if Config.ReadInteger('Setup', 'WinLottery3Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery3Max', g_Config.nWinLottery3Max);
  g_Config.nWinLottery3Max := Config.ReadInteger('Setup', 'WinLottery3Max', g_Config.nWinLottery3Max);

  if Config.ReadInteger('Setup', 'WinLottery4Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery4Min', g_Config.nWinLottery4Min);
  g_Config.nWinLottery4Min := Config.ReadInteger('Setup', 'WinLottery4Min', g_Config.nWinLottery4Min);

  if Config.ReadInteger('Setup', 'WinLottery4Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery4Max', g_Config.nWinLottery4Max);
  g_Config.nWinLottery4Max := Config.ReadInteger('Setup', 'WinLottery4Max', g_Config.nWinLottery4Max);

  if Config.ReadInteger('Setup', 'WinLottery5Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery5Min', g_Config.nWinLottery5Min);
  g_Config.nWinLottery5Min := Config.ReadInteger('Setup', 'WinLottery5Min', g_Config.nWinLottery5Min);

  if Config.ReadInteger('Setup', 'WinLottery5Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery5Max', g_Config.nWinLottery5Max);
  g_Config.nWinLottery5Max := Config.ReadInteger('Setup', 'WinLottery5Max', g_Config.nWinLottery5Max);

  if Config.ReadInteger('Setup', 'WinLottery6Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery6Min', g_Config.nWinLottery6Min);
  g_Config.nWinLottery6Min := Config.ReadInteger('Setup', 'WinLottery6Min', g_Config.nWinLottery6Min);

  if Config.ReadInteger('Setup', 'WinLottery6Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery6Max', g_Config.nWinLottery6Max);
  g_Config.nWinLottery6Max := Config.ReadInteger('Setup', 'WinLottery6Max', g_Config.nWinLottery6Max);

  if Config.ReadInteger('Setup', 'WinLotteryRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLotteryRate', g_Config.nWinLotteryRate);
  g_Config.nWinLotteryRate := Config.ReadInteger('Setup', 'WinLotteryRate', g_Config.nWinLotteryRate);

  if Config.ReadInteger('Setup', 'WinLottery1Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery1Gold', g_Config.nWinLottery1Gold);
  g_Config.nWinLottery1Gold := Config.ReadInteger('Setup', 'WinLottery1Gold', g_Config.nWinLottery1Gold);

  if Config.ReadInteger('Setup', 'WinLottery2Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery2Gold', g_Config.nWinLottery2Gold);
  g_Config.nWinLottery2Gold := Config.ReadInteger('Setup', 'WinLottery2Gold', g_Config.nWinLottery2Gold);

  if Config.ReadInteger('Setup', 'WinLottery3Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery3Gold', g_Config.nWinLottery3Gold);
  g_Config.nWinLottery3Gold := Config.ReadInteger('Setup', 'WinLottery3Gold', g_Config.nWinLottery3Gold);

  if Config.ReadInteger('Setup', 'WinLottery4Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery4Gold', g_Config.nWinLottery4Gold);
  g_Config.nWinLottery4Gold := Config.ReadInteger('Setup', 'WinLottery4Gold', g_Config.nWinLottery4Gold);

  if Config.ReadInteger('Setup', 'WinLottery5Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery5Gold', g_Config.nWinLottery5Gold);
  g_Config.nWinLottery5Gold := Config.ReadInteger('Setup', 'WinLottery5Gold', g_Config.nWinLottery5Gold);

  if Config.ReadInteger('Setup', 'WinLottery6Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery6Gold', g_Config.nWinLottery6Gold);
  g_Config.nWinLottery6Gold := Config.ReadInteger('Setup', 'WinLottery6Gold', g_Config.nWinLottery6Gold);

  if Config.ReadInteger('Setup', 'GuildRecallTime', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildRecallTime', g_Config.nGuildRecallTime);
  g_Config.nGuildRecallTime := Config.ReadInteger('Setup', 'GuildRecallTime', g_Config.nGuildRecallTime);

  if Config.ReadInteger('Setup', 'GroupRecallTime', -1) < 0 then
    Config.WriteInteger('Setup', 'GroupRecallTime', g_Config.nGroupRecallTime);
  g_Config.nGroupRecallTime := Config.ReadInteger('Setup', 'GroupRecallTime', g_Config.nGroupRecallTime);

  if Config.ReadInteger('Setup', 'ControlDropItem', -1) < 0 then
    Config.WriteBool('Setup', 'ControlDropItem', g_Config.boControlDropItem);
  g_Config.boControlDropItem := Config.ReadBool('Setup', 'ControlDropItem', g_Config.boControlDropItem);

  if Config.ReadInteger('Setup', 'InSafeDisableDrop', -1) < 0 then
    Config.WriteBool('Setup', 'InSafeDisableDrop', g_Config.boInSafeDisableDrop);
  g_Config.boInSafeDisableDrop := Config.ReadBool('Setup', 'InSafeDisableDrop', g_Config.boInSafeDisableDrop);

  if Config.ReadInteger('Setup', 'CanDropGold', -1) < 0 then
    Config.WriteInteger('Setup', 'CanDropGold', g_Config.nCanDropGold);
  g_Config.nCanDropGold := Config.ReadInteger('Setup', 'CanDropGold', g_Config.nCanDropGold);

  if Config.ReadInteger('Setup', 'CanDropPrice', -1) < 0 then
    Config.WriteInteger('Setup', 'CanDropPrice', g_Config.nCanDropPrice);
  g_Config.nCanDropPrice := Config.ReadInteger('Setup', 'CanDropPrice', g_Config.nCanDropPrice);

  nLoadInteger := Config.ReadInteger('Setup', 'SendCustemMsg', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'SendCustemMsg', g_Config.boSendCustemMsg)
  else g_Config.boSendCustemMsg := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'SubkMasterSendMsg', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'SubkMasterSendMsg', g_Config.boSubkMasterSendMsg)
  else g_Config.boSubkMasterSendMsg := nLoadInteger = 1;

  if Config.ReadInteger('Setup', 'SuperRepairPriceRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SuperRepairPriceRate', g_Config.nSuperRepairPriceRate);
  g_Config.nSuperRepairPriceRate := Config.ReadInteger('Setup', 'SuperRepairPriceRate', g_Config.nSuperRepairPriceRate);

  if Config.ReadInteger('Setup', 'RepairItemDecDura', -1) < 0 then
    Config.WriteInteger('Setup', 'RepairItemDecDura', g_Config.nRepairItemDecDura);
  g_Config.nRepairItemDecDura := Config.ReadInteger('Setup', 'RepairItemDecDura', g_Config.nRepairItemDecDura);

  if Config.ReadInteger('Setup', 'DieScatterBag', -1) < 0 then
    Config.WriteBool('Setup', 'DieScatterBag', g_Config.boDieScatterBag);
  g_Config.boDieScatterBag := Config.ReadBool('Setup', 'DieScatterBag', g_Config.boDieScatterBag);

  if Config.ReadInteger('Setup', 'DieScatterBagRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DieScatterBagRate', g_Config.nDieScatterBagRate);
  g_Config.nDieScatterBagRate := Config.ReadInteger('Setup', 'DieScatterBagRate', g_Config.nDieScatterBagRate);

  if Config.ReadInteger('Setup', 'DieRedScatterBagAll', -1) < 0 then
    Config.WriteBool('Setup', 'DieRedScatterBagAll', g_Config.boDieRedScatterBagAll);
  g_Config.boDieRedScatterBagAll := Config.ReadBool('Setup', 'DieRedScatterBagAll', g_Config.boDieRedScatterBagAll);

  if Config.ReadInteger('Setup', 'DieDropUseItemRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DieDropUseItemRate', g_Config.nDieDropUseItemRate);
  g_Config.nDieDropUseItemRate := Config.ReadInteger('Setup', 'DieDropUseItemRate', g_Config.nDieDropUseItemRate);

  if Config.ReadInteger('Setup', 'DieRedDropUseItemRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DieRedDropUseItemRate', g_Config.nDieRedDropUseItemRate);
  g_Config.nDieRedDropUseItemRate := Config.ReadInteger('Setup', 'DieRedDropUseItemRate', g_Config.nDieRedDropUseItemRate);

  if Config.ReadInteger('Setup', 'DieDropGold', -1) < 0 then
    Config.WriteBool('Setup', 'DieDropGold', g_Config.boDieDropGold);
  g_Config.boDieDropGold := Config.ReadBool('Setup', 'DieDropGold', g_Config.boDieDropGold);

  if Config.ReadInteger('Setup', 'KillByHumanDropUseItem', -1) < 0 then
    Config.WriteBool('Setup', 'KillByHumanDropUseItem', g_Config.boKillByHumanDropUseItem);
  g_Config.boKillByHumanDropUseItem := Config.ReadBool('Setup', 'KillByHumanDropUseItem', g_Config.boKillByHumanDropUseItem);

  if Config.ReadInteger('Setup', 'KillByMonstDropUseItem', -1) < 0 then
    Config.WriteBool('Setup', 'KillByMonstDropUseItem', g_Config.boKillByMonstDropUseItem);
  g_Config.boKillByMonstDropUseItem := Config.ReadBool('Setup', 'KillByMonstDropUseItem', g_Config.boKillByMonstDropUseItem);

  if Config.ReadInteger('Setup', 'KickExpireHuman', -1) < 0 then
    Config.WriteBool('Setup', 'KickExpireHuman', g_Config.boKickExpireHuman);
  g_Config.boKickExpireHuman := Config.ReadBool('Setup', 'KickExpireHuman', g_Config.boKickExpireHuman);

  if Config.ReadInteger('Setup', 'GuildRankNameLen', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildRankNameLen', g_Config.nGuildRankNameLen);
  g_Config.nGuildRankNameLen := Config.ReadInteger('Setup', 'GuildRankNameLen', g_Config.nGuildRankNameLen);

  if Config.ReadInteger('Setup', 'GuildNameLen', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildNameLen', g_Config.nGuildNameLen);
  g_Config.nGuildNameLen := Config.ReadInteger('Setup', 'GuildNameLen', g_Config.nGuildNameLen);

  if Config.ReadInteger('Setup', 'GuildMemberMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildMemberMaxLimit', g_Config.nGuildMemberMaxLimit);
  g_Config.nGuildMemberMaxLimit := Config.ReadInteger('Setup', 'GuildMemberMaxLimit', g_Config.nGuildMemberMaxLimit);
  
//免费奖励箱子ID
  if Config.ReadInteger('Setup', 'Free9YearsBoxID', -1) < 0 then
    Config.WriteInteger('Setup', 'Free9YearsBoxID', g_Config.nFree9YearsBoxID);
  g_Config.nFree9YearsBoxID := Config.ReadInteger('Setup', 'Free9YearsBoxID', g_Config.nFree9YearsBoxID);

  if Config.ReadInteger('Setup', 'FirstOpen9Years', -1) < 0 then
    Config.WriteInteger('Setup', 'FirstOpen9Years', g_Config.nFirstOpen9Years);
  g_Config.nFirstOpen9Years := Config.ReadInteger('Setup', 'FirstOpen9Years', g_Config.nFirstOpen9Years);

  if Config.ReadInteger('Setup', 'SecondOpen9Years', -1) < 0 then
    Config.WriteInteger('Setup', 'SecondOpen9Years', g_Config.nSecondOpen9Years);
  g_Config.nSecondOpen9Years := Config.ReadInteger('Setup', 'SecondOpen9Years', g_Config.nSecondOpen9Years);

  if Config.ReadInteger('Setup', 'ThreeOpen9Years', -1) < 0 then
    Config.WriteInteger('Setup', 'ThreeOpen9Years', g_Config.nThreeOpen9Years);
  g_Config.nThreeOpen9Years := Config.ReadInteger('Setup', 'ThreeOpen9Years', g_Config.nThreeOpen9Years);

  if Config.ReadInteger('Setup', 'FourOpen9Years', -1) < 0 then
    Config.WriteInteger('Setup', 'FourOpen9Years', g_Config.nFourOpen9Years);
  g_Config.nFourOpen9Years := Config.ReadInteger('Setup', 'FourOpen9Years', g_Config.nFourOpen9Years);

  if Config.ReadInteger('Setup', 'AttackPosionRate', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackPosionRate', g_Config.nAttackPosionRate);
  g_Config.nAttackPosionRate := Config.ReadInteger('Setup', 'AttackPosionRate', g_Config.nAttackPosionRate);

  if Config.ReadInteger('Setup', 'AttackPosionTime', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackPosionTime', g_Config.nAttackPosionTime);
  g_Config.nAttackPosionTime := Config.ReadInteger('Setup', 'AttackPosionTime', g_Config.nAttackPosionTime);

  if Config.ReadInteger('Setup', 'AttackPosionRate1', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackPosionRate1', g_Config.nAttackPosionRate1);
  g_Config.nAttackPosionRate1 := Config.ReadInteger('Setup', 'AttackPosionRate1', g_Config.nAttackPosionRate1);

  if Config.ReadInteger('Setup', 'AttackPosionTime1', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackPosionTime1', g_Config.nAttackPosionTime1);
  g_Config.nAttackPosionTime1 := Config.ReadInteger('Setup', 'AttackPosionTime1', g_Config.nAttackPosionTime1);

  if Config.ReadInteger('Setup', 'AttackPosionRate2', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackPosionRate2', g_Config.nAttackPosionRate2);
  g_Config.nAttackPosionRate2 := Config.ReadInteger('Setup', 'AttackPosionRate2', g_Config.nAttackPosionRate2);
//麻痹时间(魔道麻痹戒指) 20091009
  if Config.ReadInteger('Setup', 'AttackPosionTime2', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackPosionTime2', g_Config.nAttackPosionTime2);
  g_Config.nAttackPosionTime2 := Config.ReadInteger('Setup', 'AttackPosionTime2', g_Config.nAttackPosionTime2);

  if Config.ReadInteger('Setup', 'AttackPosionRate3', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackPosionRate3', g_Config.nAttackPosionRate3);
  g_Config.nAttackPosionRate3 := Config.ReadInteger('Setup', 'AttackPosionRate3', g_Config.nAttackPosionRate3);

  if Config.ReadInteger('Setup', 'AttackPosionTime3', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackPosionTime3', g_Config.nAttackPosionTime3);
  g_Config.nAttackPosionTime3 := Config.ReadInteger('Setup', 'AttackPosionTime3', g_Config.nAttackPosionTime3);

  if Config.ReadInteger('Setup', 'RevivalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'RevivalTime', g_Config.dwRevivalTime);
  g_Config.dwRevivalTime := Config.ReadInteger('Setup', 'RevivalTime', g_Config.dwRevivalTime);

//重生间隔时间 20100720
  if Config.ReadInteger('Setup', 'RebirthTime', -1) < 0 then
    Config.WriteInteger('Setup', 'RebirthTime', g_Config.dwRebirthTime);
  g_Config.dwRebirthTime := Config.ReadInteger('Setup', 'RebirthTime', g_Config.dwRebirthTime);

  nLoadInteger := Config.ReadInteger('Setup', 'UserMoveCanDupObj', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'UserMoveCanDupObj', g_Config.boUserMoveCanDupObj)
  else g_Config.boUserMoveCanDupObj := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'UserMoveCanOnItem', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'UserMoveCanOnItem', g_Config.boUserMoveCanOnItem)
  else g_Config.boUserMoveCanOnItem := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'UserMoveTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UserMoveTime', g_Config.dwUserMoveTime)
  else g_Config.dwUserMoveTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'PKDieLostExpRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PKDieLostExpRate', g_Config.dwPKDieLostExpRate)
  else g_Config.dwPKDieLostExpRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'PKDieLostLevelRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PKDieLostLevelRate', g_Config.nPKDieLostLevelRate)
  else g_Config.nPKDieLostLevelRate := nLoadInteger;

//挑战时间 20080706
  if Config.ReadInteger('Setup', 'ChallengeTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ChallengeTime', g_Config.nChallengeTime);
  g_Config.nChallengeTime := Config.ReadInteger('Setup', 'ChallengeTime', g_Config.nChallengeTime);

//NPC名字颜色 20081218
  if Config.ReadInteger('Setup', 'NPCNameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'NPCNameColor', g_Config.btNPCNameColor);
  g_Config.btNPCNameColor := Config.ReadInteger('Setup', 'NPCNameColor', g_Config.btNPCNameColor);

  if Config.ReadInteger('Setup', 'PKFlagNameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'PKFlagNameColor', g_Config.btPKFlagNameColor);
  g_Config.btPKFlagNameColor := Config.ReadInteger('Setup', 'PKFlagNameColor', g_Config.btPKFlagNameColor);

  if Config.ReadInteger('Setup', 'AllyAndGuildNameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'AllyAndGuildNameColor', g_Config.btAllyAndGuildNameColor);
  g_Config.btAllyAndGuildNameColor := Config.ReadInteger('Setup', 'AllyAndGuildNameColor', g_Config.btAllyAndGuildNameColor);

  if Config.ReadInteger('Setup', 'WarGuildNameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'WarGuildNameColor', g_Config.btWarGuildNameColor);
  g_Config.btWarGuildNameColor := Config.ReadInteger('Setup', 'WarGuildNameColor', g_Config.btWarGuildNameColor);

  if Config.ReadInteger('Setup', 'InFreePKAreaNameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'InFreePKAreaNameColor', g_Config.btInFreePKAreaNameColor);
  g_Config.btInFreePKAreaNameColor := Config.ReadInteger('Setup', 'InFreePKAreaNameColor', g_Config.btInFreePKAreaNameColor);

  if Config.ReadInteger('Setup', 'PKLevel1NameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'PKLevel1NameColor', g_Config.btPKLevel1NameColor);
  g_Config.btPKLevel1NameColor := Config.ReadInteger('Setup', 'PKLevel1NameColor', g_Config.btPKLevel1NameColor);

  if Config.ReadInteger('Setup', 'PKLevel2NameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'PKLevel2NameColor', g_Config.btPKLevel2NameColor);
  g_Config.btPKLevel2NameColor := Config.ReadInteger('Setup', 'PKLevel2NameColor', g_Config.btPKLevel2NameColor);

  if Config.ReadInteger('Setup', 'SpiritMutiny', -1) < 0 then
    Config.WriteBool('Setup', 'SpiritMutiny', g_Config.boSpiritMutiny);
  g_Config.boSpiritMutiny := Config.ReadBool('Setup', 'SpiritMutiny', g_Config.boSpiritMutiny);

  if Config.ReadInteger('Setup', 'SpiritMutinyTime', -1) < 0 then
    Config.WriteInteger('Setup', 'SpiritMutinyTime', g_Config.dwSpiritMutinyTime);
  g_Config.dwSpiritMutinyTime := Config.ReadInteger('Setup', 'SpiritMutinyTime', g_Config.dwSpiritMutinyTime);

  if Config.ReadInteger('Setup', 'HeroMutinyDie', -1) < 0 then
    Config.WriteBool('Setup', 'HeroMutinyDie', g_Config.boHeroMutinyDie);
  g_Config.boHeroMutinyDie := Config.ReadBool('Setup', 'HeroMutinyDie', g_Config.boHeroMutinyDie);

  //宝宝叛变控制By TasNat at: 2012-11-03 14:25:55
  if Config.ReadInteger('Setup', 'MasterTimeRoyalty', -1) < 0 then
    Config.WriteBool('Setup', 'MasterTimeRoyalty', g_Config.boMasterTimeRoyalty);
  g_Config.boMasterTimeRoyalty := Config.ReadBool('Setup', 'MasterTimeRoyalty', g_Config.boMasterTimeRoyalty);

  if Config.ReadInteger('Setup', 'MasterTimeRoyaltyTime', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterTimeRoyaltyTime', g_Config.dwMasterTimeRoyaltyTime);
  g_Config.dwMasterTimeRoyaltyTime := Config.ReadInteger('Setup', 'MasterTimeRoyaltyTime', g_Config.dwMasterTimeRoyaltyTime) ;


  if Config.ReadInteger('Setup', 'MasterDieMutiny', -1) < 0 then
    Config.WriteBool('Setup', 'MasterDieMutiny', g_Config.boMasterDieMutiny);
  g_Config.boMasterDieMutiny := Config.ReadBool('Setup', 'MasterDieMutiny', g_Config.boMasterDieMutiny);

  if Config.ReadInteger('Setup', 'MasterDieMutinyRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterDieMutinyRate', g_Config.nMasterDieMutinyRate);
  g_Config.nMasterDieMutinyRate := Config.ReadInteger('Setup', 'MasterDieMutinyRate', g_Config.nMasterDieMutinyRate);

  if Config.ReadInteger('Setup', 'MasterDieMutinyPower', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterDieMutinyPower', g_Config.nMasterDieMutinyPower);
  g_Config.nMasterDieMutinyPower := Config.ReadInteger('Setup', 'MasterDieMutinyPower', g_Config.nMasterDieMutinyPower);

  if Config.ReadInteger('Setup', 'MasterDieMutinyPower', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterDieMutinyPower', g_Config.nMasterDieMutinySpeed);
  g_Config.nMasterDieMutinySpeed := Config.ReadInteger('Setup', 'MasterDieMutinyPower', g_Config.nMasterDieMutinySpeed);

  nLoadInteger := Config.ReadInteger('Setup', 'BBMonAutoChangeColor', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'BBMonAutoChangeColor', g_Config.boBBMonAutoChangeColor)
  else g_Config.boBBMonAutoChangeColor := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'BBMonAutoChangeColorTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BBMonAutoChangeColorTime', g_Config.dwBBMonAutoChangeColorTime)
  else g_Config.dwBBMonAutoChangeColorTime := nLoadInteger;

//宠物日可减快乐度上限
  nLoadInteger := Config.ReadInteger('Setup', 'PetsMonDecMaxHapp', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PetsMonDecMaxHapp', g_Config.dwPetsMonDecMaxHapp)
  else g_Config.dwPetsMonDecMaxHapp := nLoadInteger;

//宠物日可加快乐度上限
  nLoadInteger := Config.ReadInteger('Setup', 'PetsMonIncMaxHapp', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PetsMonIncMaxHapp', g_Config.dwPetsMonIncMaxHapp)
  else g_Config.dwPetsMonIncMaxHapp := nLoadInteger;

  if Config.ReadInteger('Setup', 'OldClientShowHiLevel', -1) < 0 then
    Config.WriteBool('Setup', 'OldClientShowHiLevel', g_Config.boOldClientShowHiLevel);
  g_Config.boOldClientShowHiLevel := Config.ReadBool('Setup', 'OldClientShowHiLevel', g_Config.boOldClientShowHiLevel);

  if Config.ReadInteger('Setup', 'ShowScriptActionMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ShowScriptActionMsg', g_Config.boShowScriptActionMsg);
  g_Config.boShowScriptActionMsg := Config.ReadBool('Setup', 'ShowScriptActionMsg', g_Config.boShowScriptActionMsg);

  if Config.ReadInteger('Setup', 'ThreadRun', -1) < 0 then
    Config.WriteBool('Setup', 'ThreadRun', g_Config.boThreadRun);
  g_Config.boThreadRun := Config.ReadBool('Setup', 'ThreadRun', g_Config.boThreadRun);

  if Config.ReadInteger('Setup', 'DeathColorEffect', -1) < 0 then
    Config.WriteInteger('Setup', 'DeathColorEffect', g_ClientConf.btDieColor);
  g_ClientConf.btDieColor := Config.ReadInteger('Setup', 'DeathColorEffect', g_ClientConf.btDieColor);

  if Config.ReadInteger('Setup', 'ParalyCanRun', -1) < 0 then
    Config.WriteBool('Setup', 'ParalyCanRun', g_ClientConf.boParalyCanRun);
  g_ClientConf.boParalyCanRun := Config.ReadBool('Setup', 'ParalyCanRun', g_ClientConf.boParalyCanRun);

  if Config.ReadInteger('Setup', 'ParalyCanWalk', -1) < 0 then
    Config.WriteBool('Setup', 'ParalyCanWalk', g_ClientConf.boParalyCanWalk);
  g_ClientConf.boParalyCanWalk := Config.ReadBool('Setup', 'ParalyCanWalk', g_ClientConf.boParalyCanWalk);

  if Config.ReadInteger('Setup', 'ParalyCanHit', -1) < 0 then
    Config.WriteBool('Setup', 'ParalyCanHit', g_ClientConf.boParalyCanHit);
  g_ClientConf.boParalyCanHit := Config.ReadBool('Setup', 'ParalyCanHit', g_ClientConf.boParalyCanHit);

  if Config.ReadInteger('Setup', 'ParalyCanSpell', -1) < 0 then
    Config.WriteBool('Setup', 'ParalyCanSpell', g_ClientConf.boParalyCanSpell);
  g_ClientConf.boParalyCanSpell := Config.ReadBool('Setup', 'ParalyCanSpell', g_ClientConf.boParalyCanSpell);

  if Config.ReadInteger('Setup', 'ShowExceptionMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ShowExceptionMsg', g_Config.boShowExceptionMsg);
  g_Config.boShowExceptionMsg := Config.ReadBool('Setup', 'ShowExceptionMsg', g_Config.boShowExceptionMsg);

  if Config.ReadInteger('Setup', 'ShowPreFixMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ShowPreFixMsg', g_Config.boShowPreFixMsg);
  g_Config.boShowPreFixMsg := Config.ReadBool('Setup', 'ShowPreFixMsg', g_Config.boShowPreFixMsg);
//GM命令错误是否提示 20080602
  if Config.ReadInteger('Setup', 'GMShowFailMsg', -1) < 0 then
    Config.WriteBool('Setup', 'GMShowFailMsg', g_Config.boGMShowFailMsg);
  g_Config.boGMShowFailMsg := Config.ReadBool('Setup', 'GMShowFailMsg', g_Config.boGMShowFailMsg);

//记录人物私聊，行会聊天信息 20081213
  if Config.ReadInteger('Setup', 'RecordClientMsg', -1) < 0 then
    Config.WriteBool('Setup', 'RecordClientMsg', g_Config.boRecordClientMsg);
  g_Config.boRecordClientMsg := Config.ReadBool('Setup', 'RecordClientMsg', g_Config.boRecordClientMsg);

  if Config.ReadInteger('Setup', 'MagTurnUndeadLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'MagTurnUndeadLevel', g_Config.nMagTurnUndeadLevel);
  g_Config.nMagTurnUndeadLevel := Config.ReadInteger('Setup', 'MagTurnUndeadLevel', g_Config.nMagTurnUndeadLevel);

  nLoadInteger := Config.ReadInteger('Setup', 'MagTammingLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagTammingLevel', g_Config.nMagTammingLevel)
  else g_Config.nMagTammingLevel := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagTammingTargetLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagTammingTargetLevel', g_Config.nMagTammingTargetLevel)
  else g_Config.nMagTammingTargetLevel := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagTammingTargetHPRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagTammingTargetHPRate', g_Config.nMagTammingHPRate)
  else g_Config.nMagTammingHPRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagTammingCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagTammingCount', g_Config.nMagTammingCount)
  else g_Config.nMagTammingCount := nLoadInteger;

  if Config.ReadInteger('Setup', 'MagTammingHitNew', -1) < 0 then
    Config.WriteBool('Setup', 'MagTammingHitNew', g_Config.boMagTammingHitNew);
  g_Config.boMagTammingHitNew := Config.ReadBool('Setup', 'MagTammingHitNew', g_Config.boMagTammingHitNew);

  nLoadInteger := Config.ReadInteger('Setup', 'MabMabeHitRandRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MabMabeHitRandRate', g_Config.nMabMabeHitRandRate)
  else g_Config.nMabMabeHitRandRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MabMabeHitMinLvLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MabMabeHitMinLvLimit', g_Config.nMabMabeHitMinLvLimit)
  else g_Config.nMabMabeHitMinLvLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MabMabeHitSucessRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MabMabeHitSucessRate', g_Config.nMabMabeHitSucessRate)
  else g_Config.nMabMabeHitSucessRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MabMabeHitMabeTimeRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MabMabeHitMabeTimeRate', g_Config.nMabMabeHitMabeTimeRate)
  else g_Config.nMabMabeHitMabeTimeRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagicAttackRage', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagicAttackRage', g_Config.nMagicAttackRage)
  else g_Config.nMagicAttackRage := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagicAttackPassRage', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagicAttackPassRage', g_Config.nMagicAttackPassRage)
  else g_Config.nMagicAttackPassRage := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'AmyOunsulPoint', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AmyOunsulPoint', g_Config.nAmyOunsulPoint)
  else g_Config.nAmyOunsulPoint := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MaxMakePosionTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MaxMakePosionTime', g_Config.nMaxMakePosionTime)
  else g_Config.nMaxMakePosionTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'DisableInSafeZoneFireCross', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'DisableInSafeZoneFireCross', g_Config.boDisableInSafeZoneFireCross)
  else g_Config.boDisableInSafeZoneFireCross := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'GroupMbAttackPlayObject', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'GroupMbAttackPlayObject', g_Config.boGroupMbAttackPlayObject)
  else g_Config.boGroupMbAttackPlayObject := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'GroupMbAttackPlayMon', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'GroupMbAttackPlayMon', g_Config.boGroupMbAttackPlayMon)
  else g_Config.boGroupMbAttackPlayMon := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'PosionDecHealthTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PosionDecHealthTime', g_Config.dwPosionDecHealthTime)
  else g_Config.dwPosionDecHealthTime := nLoadInteger;

  if Config.ReadString('Setup', 'DiyMedicine', '') = '' then
    Config.WriteString('Setup', 'DiyMedicine', g_Config.sDiyMedicine);
  g_Config.sDiyMedicine := Config.ReadString('Setup', 'DiyMedicine', g_Config.sDiyMedicine);

  nLoadInteger := Config.ReadInteger('Setup', 'PosionDamagarmor', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PosionDamagarmor', g_Config.nPosionDamagarmor)
  else g_Config.nPosionDamagarmor := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'LimitSwordLong', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'LimitSwordLong', g_Config.boLimitSwordLong)
  else g_Config.boLimitSwordLong := not (nLoadInteger = 0);

  //强化召唤骷髅所召唤的怪物名
  if Config.ReadString('Names', 'SkillStrongBoneFamm', '') = '' then
    Config.WriteString('Names', 'SkillStrongBoneFamm', g_Config.sSkillStrongBoneFamm);
  g_Config.sSkillStrongBoneFamm := Config.ReadString('Names', 'SkillStrongBoneFamm', g_Config.sSkillStrongBoneFamm);

  //强化召唤圣兽怪物名
  if Config.ReadString('Names', 'SkillStrongSacred', '') = '' then
    Config.WriteString('Names', 'SkillStrongSacred', g_Config.sSkillStrongSacred);
  g_Config.sSkillStrongSacred := Config.ReadString('Names', 'SkillStrongSacred', g_Config.sSkillStrongSacred);
{$IF M2Version <> 2}
   nLoadInteger := Config.ReadInteger('Setup', 'LimitSwordLongNG', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'LimitSwordLongNG', g_Config.boLimitSwordLongNG)
  else g_Config.boLimitSwordLongNG := not (nLoadInteger = 0);
{$IFEND}
  nLoadInteger := Config.ReadInteger('Setup', 'SwordLongPowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SwordLongPowerRate', g_Config.nSwordLongPowerRate)
  else g_Config.nSwordLongPowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'FireBoomRage', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'FireBoomRage', g_Config.nFireBoomRage)
  else g_Config.nFireBoomRage := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'SnowWindRange', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SnowWindRange', g_Config.nSnowWindRange)
  else g_Config.nSnowWindRange := nLoadInteger;
//流星火雨攻击范围 20080510
  nLoadInteger := Config.ReadInteger('Setup', 'MeteorFireRainRage', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MeteorFireRainRage', g_Config.nMeteorFireRainRage)
  else g_Config.nMeteorFireRainRage := nLoadInteger;
//噬血术加血百分率 20080511
  nLoadInteger := Config.ReadInteger('Setup', 'MagFireCharmTreatment', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagFireCharmTreatment', g_Config.nMagFireCharmTreatment)
  else g_Config.nMagFireCharmTreatment := nLoadInteger;

  if Config.ReadInteger('Setup', 'ElecBlizzardRange', -1) < 0 then
    Config.WriteInteger('Setup', 'ElecBlizzardRange', g_Config.nElecBlizzardRange);
  g_Config.nElecBlizzardRange := Config.ReadInteger('Setup', 'ElecBlizzardRange', g_Config.nElecBlizzardRange);

  if Config.ReadInteger('Setup', 'HumanLevelDiffer', -1) < 0 then
    Config.WriteInteger('Setup', 'HumanLevelDiffer', g_Config.nHumanLevelDiffer);
  g_Config.nHumanLevelDiffer := Config.ReadInteger('Setup', 'HumanLevelDiffer', g_Config.nHumanLevelDiffer);

  if Config.ReadInteger('Setup', 'KillHumanWinLevel', -1) < 0 then
    Config.WriteBool('Setup', 'KillHumanWinLevel', g_Config.boKillHumanWinLevel);
  g_Config.boKillHumanWinLevel := Config.ReadBool('Setup', 'KillHumanWinLevel', g_Config.boKillHumanWinLevel);

  if Config.ReadInteger('Setup', 'KilledLostLevel', -1) < 0 then
    Config.WriteBool('Setup', 'KilledLostLevel', g_Config.boKilledLostLevel);
  g_Config.boKilledLostLevel := Config.ReadBool('Setup', 'KilledLostLevel', g_Config.boKilledLostLevel);

  if Config.ReadInteger('Setup', 'KillHumanWinLevelPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanWinLevelPoint', g_Config.nKillHumanWinLevel);
  g_Config.nKillHumanWinLevel := Config.ReadInteger('Setup', 'KillHumanWinLevelPoint', g_Config.nKillHumanWinLevel);

  if Config.ReadInteger('Setup', 'KilledLostLevelPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KilledLostLevelPoint', g_Config.nKilledLostLevel);
  g_Config.nKilledLostLevel := Config.ReadInteger('Setup', 'KilledLostLevelPoint', g_Config.nKilledLostLevel);

  if Config.ReadInteger('Setup', 'KillHumanWinExp', -1) < 0 then
    Config.WriteBool('Setup', 'KillHumanWinExp', g_Config.boKillHumanWinExp);
  g_Config.boKillHumanWinExp := Config.ReadBool('Setup', 'KillHumanWinExp', g_Config.boKillHumanWinExp);

  if Config.ReadInteger('Setup', 'KilledLostExp', -1) < 0 then
    Config.WriteBool('Setup', 'KilledLostExp', g_Config.boKilledLostExp);
  g_Config.boKilledLostExp := Config.ReadBool('Setup', 'KilledLostExp', g_Config.boKilledLostExp);

  if Config.ReadInteger('Setup', 'KillHumanWinExpPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanWinExpPoint', g_Config.nKillHumanWinExp);
  g_Config.nKillHumanWinExp := Config.ReadInteger('Setup', 'KillHumanWinExpPoint', g_Config.nKillHumanWinExp);

  if Config.ReadInteger('Setup', 'KillHumanLostExpPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanLostExpPoint', g_Config.nKillHumanLostExp);
  g_Config.nKillHumanLostExp := Config.ReadInteger('Setup', 'KillHumanLostExpPoint', g_Config.nKillHumanLostExp);

  if Config.ReadInteger('Setup', 'MonsterPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MonsterPowerRate', g_Config.nMonsterPowerRate);
  g_Config.nMonsterPowerRate := Config.ReadInteger('Setup', 'MonsterPowerRate', g_Config.nMonsterPowerRate);

  if Config.ReadInteger('Setup', 'ItemsPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemsPowerRate', g_Config.nItemsPowerRate);
  g_Config.nItemsPowerRate := Config.ReadInteger('Setup', 'ItemsPowerRate', g_Config.nItemsPowerRate);

  if Config.ReadInteger('Setup', 'ItemsACPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemsACPowerRate', g_Config.nItemsACPowerRate);
  g_Config.nItemsACPowerRate := Config.ReadInteger('Setup', 'ItemsACPowerRate', g_Config.nItemsACPowerRate);

  if Config.ReadInteger('Setup', 'SendOnlineCount', -1) < 0 then
    Config.WriteBool('Setup', 'SendOnlineCount', g_Config.boSendOnlineCount);
  g_Config.boSendOnlineCount := Config.ReadBool('Setup', 'SendOnlineCount', g_Config.boSendOnlineCount);

  if Config.ReadInteger('Setup', 'SendOnlineCountRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SendOnlineCountRate', g_Config.nSendOnlineCountRate);
  g_Config.nSendOnlineCountRate := Config.ReadInteger('Setup', 'SendOnlineCountRate', g_Config.nSendOnlineCountRate);

  if Config.ReadInteger('Setup', 'SendOnlineTime', -1) < 0 then
    Config.WriteInteger('Setup', 'SendOnlineTime', g_Config.dwSendOnlineTime);
  g_Config.dwSendOnlineTime := Config.ReadInteger('Setup', 'SendOnlineTime', g_Config.dwSendOnlineTime);

  if Config.ReadInteger('Setup', 'SaveHumanRcdTime', -1) < 0 then
    Config.WriteInteger('Setup', 'SaveHumanRcdTime', g_Config.dwSaveHumanRcdTime);
  g_Config.dwSaveHumanRcdTime := Config.ReadInteger('Setup', 'SaveHumanRcdTime', g_Config.dwSaveHumanRcdTime);

  if Config.ReadInteger('Setup', 'HumanFreeDelayTime', -1) < 0 then
    Config.WriteInteger('Setup', 'HumanFreeDelayTime', g_Config.dwHumanFreeDelayTime);
  //g_Config.dwHumanFreeDelayTime:=Config.ReadInteger('Setup','HumanFreeDelayTime',g_Config.dwHumanFreeDelayTime);
//尸体清理时间
  if Config.ReadInteger('Setup', 'MakeGhostTime', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeGhostTime', g_Config.dwMakeGhostTime);
  g_Config.dwMakeGhostTime := Config.ReadInteger('Setup', 'MakeGhostTime', g_Config.dwMakeGhostTime);
//人形怪尸体清理时间 20080418
  if Config.ReadInteger('Setup', 'MakeGhostPlayMosterTime', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeGhostPlayMosterTime', g_Config.dwMakeGhostPlayMosterTime);
  g_Config.dwMakeGhostPlayMosterTime := Config.ReadInteger('Setup', 'MakeGhostPlayMosterTime', g_Config.dwMakeGhostPlayMosterTime);

  if Config.ReadInteger('Setup', 'ClearDropOnFloorItemTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ClearDropOnFloorItemTime', g_Config.dwClearDropOnFloorItemTime);
  g_Config.dwClearDropOnFloorItemTime := Config.ReadInteger('Setup', 'ClearDropOnFloorItemTime', g_Config.dwClearDropOnFloorItemTime);

  if Config.ReadInteger('Setup', 'FloorItemCanPickUpTime', -1) < 0 then
    Config.WriteInteger('Setup', 'FloorItemCanPickUpTime', g_Config.dwFloorItemCanPickUpTime);
  g_Config.dwFloorItemCanPickUpTime := Config.ReadInteger('Setup', 'FloorItemCanPickUpTime', g_Config.dwFloorItemCanPickUpTime);

  if Config.ReadInteger('Setup', 'PasswordLockSystem', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockSystem', g_Config.boPasswordLockSystem);
  g_Config.boPasswordLockSystem := Config.ReadBool('Setup', 'PasswordLockSystem', g_Config.boPasswordLockSystem);

  if Config.ReadInteger('Setup', 'PasswordLockDealAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockDealAction', g_Config.boLockDealAction);
  g_Config.boLockDealAction := Config.ReadBool('Setup', 'PasswordLockDealAction', g_Config.boLockDealAction);

  if Config.ReadInteger('Setup', 'PasswordLockDropAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockDropAction', g_Config.boLockDropAction);
  g_Config.boLockDropAction := Config.ReadBool('Setup', 'PasswordLockDropAction', g_Config.boLockDropAction);

  if Config.ReadInteger('Setup', 'PasswordLockGetBackItemAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockGetBackItemAction', g_Config.boLockGetBackItemAction);
  g_Config.boLockGetBackItemAction := Config.ReadBool('Setup', 'PasswordLockGetBackItemAction', g_Config.boLockGetBackItemAction);

  if Config.ReadInteger('Setup', 'PasswordLockHumanLogin', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockHumanLogin', g_Config.boLockHumanLogin);
  g_Config.boLockHumanLogin := Config.ReadBool('Setup', 'PasswordLockHumanLogin', g_Config.boLockHumanLogin);

  if Config.ReadInteger('Setup', 'PasswordLockWalkAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockWalkAction', g_Config.boLockWalkAction);
  g_Config.boLockWalkAction := Config.ReadBool('Setup', 'PasswordLockWalkAction', g_Config.boLockWalkAction);

  if Config.ReadInteger('Setup', 'PasswordLockRunAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockRunAction', g_Config.boLockRunAction);
  g_Config.boLockRunAction := Config.ReadBool('Setup', 'PasswordLockRunAction', g_Config.boLockRunAction);

  if Config.ReadInteger('Setup', 'PasswordLockHitAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockHitAction', g_Config.boLockHitAction);
  g_Config.boLockHitAction := Config.ReadBool('Setup', 'PasswordLockHitAction', g_Config.boLockHitAction);

  if Config.ReadInteger('Setup', 'PasswordLockSpellAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockSpellAction', g_Config.boLockSpellAction);
  g_Config.boLockSpellAction := Config.ReadBool('Setup', 'PasswordLockSpellAction', g_Config.boLockSpellAction);

//是否锁定召唤英雄操作  20080529
  if Config.ReadInteger('Setup', 'PasswordLockCallHeroAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockCallHeroAction', g_Config.boLockCallHeroAction);
  g_Config.boLockCallHeroAction := Config.ReadBool('Setup', 'PasswordLockCallHeroAction', g_Config.boLockCallHeroAction);

  if Config.ReadInteger('Setup', 'PasswordLockSendMsgAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockSendMsgAction', g_Config.boLockSendMsgAction);
  g_Config.boLockSendMsgAction := Config.ReadBool('Setup', 'PasswordLockSendMsgAction', g_Config.boLockSendMsgAction);

  if Config.ReadInteger('Setup', 'PasswordLockUserItemAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockUserItemAction', g_Config.boLockUserItemAction);
  g_Config.boLockUserItemAction := Config.ReadBool('Setup', 'PasswordLockUserItemAction', g_Config.boLockUserItemAction);

  if Config.ReadInteger('Setup', 'PasswordLockInObModeAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockInObModeAction', g_Config.boLockInObModeAction);
  g_Config.boLockInObModeAction := Config.ReadBool('Setup', 'PasswordLockInObModeAction', g_Config.boLockInObModeAction);

  if Config.ReadInteger('Setup', 'PasswordErrorKick', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordErrorKick', g_Config.boPasswordErrorKick);
  g_Config.boPasswordErrorKick := Config.ReadBool('Setup', 'PasswordErrorKick', g_Config.boPasswordErrorKick);

  if Config.ReadInteger('Setup', 'PasswordErrorCountLock', -1) < 0 then
    Config.WriteInteger('Setup', 'PasswordErrorCountLock', g_Config.nPasswordErrorCountLock);
  g_Config.nPasswordErrorCountLock := Config.ReadInteger('Setup', 'PasswordErrorCountLock', g_Config.nPasswordErrorCountLock);

  if Config.ReadInteger('Setup', 'SoftVersionDate', -1) < 0 then
    Config.WriteInteger('Setup', 'SoftVersionDate', g_Config.nSoftVersionDate);
  g_Config.nSoftVersionDate := Config.ReadInteger('Setup', 'SoftVersionDate', g_Config.nSoftVersionDate);

  nLoadInteger := Config.ReadInteger('Setup', 'CanOldClientLogon', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'CanOldClientLogon', g_Config.boCanOldClientLogon)
  else g_Config.boCanOldClientLogon := nLoadInteger = 1;

  if Config.ReadInteger('Setup', 'ConsoleShowUserCountTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ConsoleShowUserCountTime', g_Config.dwConsoleShowUserCountTime);
  g_Config.dwConsoleShowUserCountTime := Config.ReadInteger('Setup', 'ConsoleShowUserCountTime', g_Config.dwConsoleShowUserCountTime);

  if Config.ReadInteger('Setup', 'ShowLineNoticeTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ShowLineNoticeTime', g_Config.dwShowLineNoticeTime);
  g_Config.dwShowLineNoticeTime := Config.ReadInteger('Setup', 'ShowLineNoticeTime', g_Config.dwShowLineNoticeTime);

  if Config.ReadInteger('Setup', 'LineNoticeColor', -1) < 0 then
    Config.WriteInteger('Setup', 'LineNoticeColor', g_Config.nLineNoticeColor);
  g_Config.nLineNoticeColor := Config.ReadInteger('Setup', 'LineNoticeColor', g_Config.nLineNoticeColor);

  if Config.ReadInteger('Setup', 'ItemSpeedTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemSpeedTime', g_ClientConf.btItemSpeed);
  g_ClientConf.btItemSpeed := Config.ReadInteger('Setup', 'ItemSpeedTime', g_ClientConf.btItemSpeed);

  if Config.ReadInteger('Setup', 'MaxHitMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxHitMsgCount', g_Config.nMaxHitMsgCount);
  g_Config.nMaxHitMsgCount := Config.ReadInteger('Setup', 'MaxHitMsgCount', g_Config.nMaxHitMsgCount);

  if Config.ReadInteger('Setup', 'MaxSpellMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxSpellMsgCount', g_Config.nMaxSpellMsgCount);
  g_Config.nMaxSpellMsgCount := Config.ReadInteger('Setup', 'MaxSpellMsgCount', g_Config.nMaxSpellMsgCount);

  if Config.ReadInteger('Setup', 'MaxRunMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxRunMsgCount', g_Config.nMaxRunMsgCount);
  g_Config.nMaxRunMsgCount := Config.ReadInteger('Setup', 'MaxRunMsgCount', g_Config.nMaxRunMsgCount);

  if Config.ReadInteger('Setup', 'MaxWalkMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxWalkMsgCount', g_Config.nMaxWalkMsgCount);
  g_Config.nMaxWalkMsgCount := Config.ReadInteger('Setup', 'MaxWalkMsgCount', g_Config.nMaxWalkMsgCount);

  if Config.ReadInteger('Setup', 'MaxTurnMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxTurnMsgCount', g_Config.nMaxTurnMsgCount);
  g_Config.nMaxTurnMsgCount := Config.ReadInteger('Setup', 'MaxTurnMsgCount', g_Config.nMaxTurnMsgCount);

  if Config.ReadInteger('Setup', 'MaxSitDonwMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxSitDonwMsgCount', g_Config.nMaxSitDonwMsgCount);
  g_Config.nMaxSitDonwMsgCount := Config.ReadInteger('Setup', 'MaxSitDonwMsgCount', g_Config.nMaxSitDonwMsgCount);

  if Config.ReadInteger('Setup', 'MaxDigUpMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxDigUpMsgCount', g_Config.nMaxDigUpMsgCount);
  g_Config.nMaxDigUpMsgCount := Config.ReadInteger('Setup', 'MaxDigUpMsgCount', g_Config.nMaxDigUpMsgCount);

  if Config.ReadInteger('Setup', 'SpellSendUpdateMsg', -1) < 0 then
    Config.WriteBool('Setup', 'SpellSendUpdateMsg', g_Config.boSpellSendUpdateMsg);
  g_Config.boSpellSendUpdateMsg := Config.ReadBool('Setup', 'SpellSendUpdateMsg', g_Config.boSpellSendUpdateMsg);

  if Config.ReadInteger('Setup', 'ActionSendActionMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ActionSendActionMsg', g_Config.boActionSendActionMsg);
  g_Config.boActionSendActionMsg := Config.ReadBool('Setup', 'ActionSendActionMsg', g_Config.boActionSendActionMsg);

  if Config.ReadInteger('Setup', 'OverSpeedKickCount', -1) < 0 then
    Config.WriteInteger('Setup', 'OverSpeedKickCount', g_Config.nOverSpeedKickCount);
  g_Config.nOverSpeedKickCount := Config.ReadInteger('Setup', 'OverSpeedKickCount', g_Config.nOverSpeedKickCount);

  if Config.ReadInteger('Setup', 'DropOverSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'DropOverSpeed', g_Config.dwDropOverSpeed);
  g_Config.dwDropOverSpeed := Config.ReadInteger('Setup', 'DropOverSpeed', g_Config.dwDropOverSpeed);

  if Config.ReadInteger('Setup', 'KickOverSpeed', -1) < 0 then
    Config.WriteBool('Setup', 'KickOverSpeed', g_Config.boKickOverSpeed);
  g_Config.boKickOverSpeed := Config.ReadBool('Setup', 'KickOverSpeed', g_Config.boKickOverSpeed);

  nLoadInteger := Config.ReadInteger('Setup', 'SpeedControlMode', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SpeedControlMode', g_Config.btSpeedControlMode)
  else g_Config.btSpeedControlMode := nLoadInteger;

  if Config.ReadInteger('Setup', 'HitIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'HitIntervalTime', g_Config.dwHitIntervalTime);
  g_Config.dwHitIntervalTime := Config.ReadInteger('Setup', 'HitIntervalTime', g_Config.dwHitIntervalTime);

  if Config.ReadInteger('Setup', 'MagicHitIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'MagicHitIntervalTime', g_Config.dwMagicHitIntervalTime);
  g_Config.dwMagicHitIntervalTime := Config.ReadInteger('Setup', 'MagicHitIntervalTime', g_Config.dwMagicHitIntervalTime);

  if Config.ReadInteger('Setup', 'RunIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'RunIntervalTime', g_Config.dwRunIntervalTime);
  g_Config.dwRunIntervalTime := Config.ReadInteger('Setup', 'RunIntervalTime', g_Config.dwRunIntervalTime);

  if Config.ReadInteger('Setup', 'WalkIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'WalkIntervalTime', g_Config.dwWalkIntervalTime);
  g_Config.dwWalkIntervalTime := Config.ReadInteger('Setup', 'WalkIntervalTime', g_Config.dwWalkIntervalTime);

  //吃药间隔 20090301
  if Config.ReadInteger('Setup', 'EatHPItemsIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'EatHPItemsIntervalTime', g_Config.dwEatHPItemsIntervalTime);
  g_Config.dwEatHPItemsIntervalTime := Config.ReadInteger('Setup', 'EatHPItemsIntervalTime', g_Config.dwEatHPItemsIntervalTime);

  if Config.ReadInteger('Setup', 'TurnIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'TurnIntervalTime', g_Config.dwTurnIntervalTime);
  g_Config.dwTurnIntervalTime := Config.ReadInteger('Setup', 'TurnIntervalTime', g_Config.dwTurnIntervalTime);

  nLoadInteger := Config.ReadInteger('Setup', 'ControlActionInterval', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'ControlActionInterval', g_Config.boControlActionInterval);
  end else begin
    g_Config.boControlActionInterval := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ControlWalkHit', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'ControlWalkHit', g_Config.boControlWalkHit);
  end else begin
    g_Config.boControlWalkHit := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ControlRunLongHit', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'ControlRunLongHit', g_Config.boControlRunLongHit);
  end else begin
    g_Config.boControlRunLongHit := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ControlRunHit', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'ControlRunHit', g_Config.boControlRunHit);
  end else begin
    g_Config.boControlRunHit := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ControlRunMagic', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'ControlRunMagic', g_Config.boControlRunMagic);
  end else begin
    g_Config.boControlRunMagic := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ActionIntervalTime', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'ActionIntervalTime', g_Config.dwActionIntervalTime);
  end else begin
    g_Config.dwActionIntervalTime := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'RunLongHitIntervalTime', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'RunLongHitIntervalTime', g_Config.dwRunLongHitIntervalTime);
  end else begin
    g_Config.dwRunLongHitIntervalTime := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'RunHitIntervalTime', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'RunHitIntervalTime', g_Config.dwRunHitIntervalTime);
  end else begin
    g_Config.dwRunHitIntervalTime := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'WalkHitIntervalTime', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WalkHitIntervalTime', g_Config.dwWalkHitIntervalTime);
  end else begin
    g_Config.dwWalkHitIntervalTime := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'RunMagicIntervalTime', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'RunMagicIntervalTime', g_Config.dwRunMagicIntervalTime);
  end else begin
    g_Config.dwRunMagicIntervalTime := nLoadInteger;
  end;

  if Config.ReadInteger('Setup', 'DisableStruck', -1) < 0 then
    Config.WriteBool('Setup', 'DisableStruck', g_Config.boDisableStruck);
  g_Config.boDisableStruck := Config.ReadBool('Setup', 'DisableStruck', g_Config.boDisableStruck);

  if Config.ReadInteger('Setup', 'DisableSelfStruck', -1) < 0 then
    Config.WriteBool('Setup', 'DisableSelfStruck', g_Config.boDisableSelfStruck);
  g_Config.boDisableSelfStruck := Config.ReadBool('Setup', 'DisableSelfStruck', g_Config.boDisableSelfStruck);

  if Config.ReadInteger('Setup', 'StruckTime', -1) < 0 then
    Config.WriteInteger('Setup', 'StruckTime', g_Config.dwStruckTime);
  g_Config.dwStruckTime := Config.ReadInteger('Setup', 'StruckTime', g_Config.dwStruckTime);

  nLoadInteger := Config.ReadInteger('Setup', 'AddUserItemNewValue', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'AddUserItemNewValue', g_Config.boAddUserItemNewValue);
  end else begin
    g_Config.boAddUserItemNewValue := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'TestSpeedMode', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'TestSpeedMode', g_Config.boTestSpeedMode);
  end else begin
    g_Config.boTestSpeedMode := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeUnLuckRate', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WeaponMakeUnLuckRate', g_Config.nWeaponMakeUnLuckRate);
  end else begin
    g_Config.nWeaponMakeUnLuckRate := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint1', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint1', g_Config.nWeaponMakeLuckPoint1);
  end else begin
    g_Config.nWeaponMakeLuckPoint1 := nLoadInteger;
  end;
  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint2', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint2', g_Config.nWeaponMakeLuckPoint2);
  end else begin
    g_Config.nWeaponMakeLuckPoint2 := nLoadInteger;
  end;
  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint3', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint3', g_Config.nWeaponMakeLuckPoint3);
  end else begin
    g_Config.nWeaponMakeLuckPoint3 := nLoadInteger;
  end;
  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint2Rate', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint2Rate', g_Config.nWeaponMakeLuckPoint2Rate);
  end else begin
    g_Config.nWeaponMakeLuckPoint2Rate := nLoadInteger;
  end;
  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint3Rate', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint3Rate', g_Config.nWeaponMakeLuckPoint3Rate);
  end else begin
    g_Config.nWeaponMakeLuckPoint3Rate := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'CheckUserItemPlace', -1);
  if nLoadInteger < 0 then begin
    Config.WriteBool('Setup', 'CheckUserItemPlace', g_Config.boCheckUserItemPlace);
  end else begin
    g_Config.boCheckUserItemPlace := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'LevelValueOfTaosHP', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'LevelValueOfTaosHP', g_Config.nLevelValueOfTaosHP);
  end else begin
    g_Config.nLevelValueOfTaosHP := nLoadInteger;
  end;

  nLoadFloat := Config.ReadFloat('Setup', 'LevelValueOfTaosHPRate', 0);
  if nLoadFloat = 0 then begin
    Config.WriteFloat('Setup', 'LevelValueOfTaosHPRate', g_Config.nLevelValueOfTaosHPRate);
  end else begin
    g_Config.nLevelValueOfTaosHPRate := nLoadFloat;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'LevelValueOfTaosMP', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'LevelValueOfTaosMP', g_Config.nLevelValueOfTaosMP);
  end else begin
    g_Config.nLevelValueOfTaosMP := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'LevelValueOfWizardHP', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'LevelValueOfWizardHP', g_Config.nLevelValueOfWizardHP);
  end else begin
    g_Config.nLevelValueOfWizardHP := nLoadInteger;
  end;

  nLoadFloat := Config.ReadFloat('Setup', 'LevelValueOfWizardHPRate', 0);
  if nLoadFloat = 0 then begin
    Config.WriteFloat('Setup', 'LevelValueOfWizardHPRate', g_Config.nLevelValueOfWizardHPRate);
  end else begin
    g_Config.nLevelValueOfWizardHPRate := nLoadFloat;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'LevelValueOfWarrHP', -1);
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'LevelValueOfWarrHP', g_Config.nLevelValueOfWarrHP);
  end else begin
    g_Config.nLevelValueOfWarrHP := nLoadInteger;
  end;

  nLoadFloat := Config.ReadFloat('Setup', 'LevelValueOfWarrHPRate', 0);
  if nLoadFloat = 0 then begin
    Config.WriteFloat('Setup', 'LevelValueOfWarrHPRate', g_Config.nLevelValueOfWarrHPRate);
  end else begin
    g_Config.nLevelValueOfWarrHPRate := nLoadFloat;
  end;

  {nLoadInteger := Config.ReadInteger('Setup', 'ProcessMonsterInterval', -1);//20100614 注释
  if nLoadInteger < 0 then begin
    Config.WriteInteger('Setup', 'ProcessMonsterInterval', g_Config.nProcessMonsterInterval);
  end else begin
    g_Config.nProcessMonsterInterval := nLoadInteger;
  end;}

  if Config.ReadInteger('Setup', 'StartCastleWarDays', -1) < 0 then
    Config.WriteInteger('Setup', 'StartCastleWarDays', g_Config.nStartCastleWarDays);
  g_Config.nStartCastleWarDays := Config.ReadInteger('Setup', 'StartCastleWarDays', g_Config.nStartCastleWarDays);

  if Config.ReadInteger('Setup', 'StartCastlewarTime', -1) < 0 then
    Config.WriteInteger('Setup', 'StartCastlewarTime', g_Config.nStartCastlewarTime);
  g_Config.nStartCastlewarTime := Config.ReadInteger('Setup', 'StartCastlewarTime', g_Config.nStartCastlewarTime);

  if Config.ReadInteger('Setup', 'ShowCastleWarEndMsgTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ShowCastleWarEndMsgTime', g_Config.dwShowCastleWarEndMsgTime);
  g_Config.dwShowCastleWarEndMsgTime := Config.ReadInteger('Setup', 'ShowCastleWarEndMsgTime', g_Config.dwShowCastleWarEndMsgTime);

  if Config.ReadInteger('Setup', 'CastleWarTime', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleWarTime', g_Config.dwCastleWarTime);
  g_Config.dwCastleWarTime := Config.ReadInteger('Setup', 'CastleWarTime', g_Config.dwCastleWarTime);

  nLoadInteger := Config.ReadInteger('Setup', 'GetCastleTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'GetCastleTime', g_Config.dwGetCastleTime)
  else g_Config.dwGetCastleTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'GuildWarTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'GuildWarTime', g_Config.dwGuildWarTime)
  else g_Config.dwGuildWarTime := nLoadInteger;

  {for I := Low(g_Config.GlobalVal) to High(g_Config.GlobalVal) do begin
    nLoadInteger := Config.ReadInteger('Setup', 'GlobalVal' + IntToStr(I), -1);
    if nLoadInteger < 0 then
      Config.WriteInteger('Setup', 'GlobalVal' + IntToStr(I), g_Config.GlobalVal[I])
    else g_Config.GlobalVal[I] := nLoadInteger;
    //共用同个循环 20100408
    sLoadString := Config.ReadString('Setup', 'GlobalStrVal' + IntToStr(I), '');
    if sLoadString = '' then Config.WriteString('Setup', 'GlobalStrVal' + IntToStr(I), '');
    g_Config.GlobalAVal[I] := sLoadString;
    if not boReload then Application.ProcessMessages;//20100408 增加
  end; }

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryCount', g_Config.nWinLotteryCount)
  else g_Config.nWinLotteryCount := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'NoWinLotteryCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NoWinLotteryCount', g_Config.nNoWinLotteryCount)
  else g_Config.nNoWinLotteryCount := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel1', g_Config.nWinLotteryLevel1)
  else g_Config.nWinLotteryLevel1 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel2', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel2', g_Config.nWinLotteryLevel2)
  else g_Config.nWinLotteryLevel2 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel3', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel3', g_Config.nWinLotteryLevel3)
  else g_Config.nWinLotteryLevel3 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel4', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel4', g_Config.nWinLotteryLevel4)
  else g_Config.nWinLotteryLevel4 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel5', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel5', g_Config.nWinLotteryLevel5)
  else g_Config.nWinLotteryLevel5 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel6', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel6', g_Config.nWinLotteryLevel6)
  else g_Config.nWinLotteryLevel6 := nLoadInteger;
{ //20080504 去掉拍卖功能
  nLoadInteger := Config.ReadInteger('Setup', 'SellOffRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SellOffRate', g_Config.nUserSellOffTax)
  else g_Config.nUserSellOffTax := nLoadInteger;  

  nLoadInteger := Config.ReadInteger('Setup', 'SellOffCountLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SellOffCountLimit', g_Config.nUserSellOffCount)
  else g_Config.nUserSellOffCount := nLoadInteger;}

//每次扣多少元宝(元宝寄售) 20080319
  nLoadInteger := Config.ReadInteger('Setup', 'DecUserGameGold', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DecUserGameGold', g_Config.nDecUserGameGold)
  else g_Config.nDecUserGameGold := nLoadInteger;

//是否开放个人商店
  if Config.ReadInteger('Setup', 'OpenSelfShop', -1) < 0 then
    Config.WriteBool('Setup', 'OpenSelfShop', g_Config.boOpenSelfShop);
  g_Config.boOpenSelfShop := Config.ReadBool('Setup', 'OpenSelfShop', g_Config.boOpenSelfShop);

//只允许安全区使用个人商店
  if Config.ReadInteger('Setup', 'SafeZoneShop', -1) < 0 then
    Config.WriteBool('Setup', 'SafeZoneShop', g_Config.boSafeZoneShop);
  g_Config.boSafeZoneShop := Config.ReadBool('Setup', 'SafeZoneShop', g_Config.boSafeZoneShop);

//只允许指定地图使用个人商店
  if Config.ReadInteger('Setup', 'MapShop', -1) < 0 then
    Config.WriteBool('Setup', 'MapShop', g_Config.boMapShop);
  g_Config.boMapShop := Config.ReadBool('Setup', 'MapShop', g_Config.boMapShop);

//禁止挂机摆摊
  if Config.ReadInteger('Setup', 'SafeOffShop', -1) < 0 then
    Config.WriteBool('Setup', 'SafeOffShop', g_Config.boSafeOffShop);
  g_Config.boSafeOffShop := Config.ReadBool('Setup', 'SafeOffShop', g_Config.boSafeOffShop);

  //可摆摊所需的等级
  nLoadInteger := Config.ReadInteger('Setup', 'CanShopLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'CanShopLevel', g_Config.nCanShopLevel)
  else g_Config.nCanShopLevel := nLoadInteger;

//酿普通酒等待时间 20080621
  nLoadInteger := Config.ReadInteger('Setup', 'MakeWineTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MakeWineTime', g_Config.nMakeWineTime)
  else g_Config.nMakeWineTime := nLoadInteger;
//酿药酒等待时间 20080621
  nLoadInteger := Config.ReadInteger('Setup', 'MakeWineTime1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MakeWineTime1', g_Config.nMakeWineTime1)
  else g_Config.nMakeWineTime1 := nLoadInteger;
//酿酒获得酒曲机率 20080621
  nLoadInteger := Config.ReadInteger('Setup', 'MakeWineRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MakeWineRate', g_Config.nMakeWineRate)
  else g_Config.nMakeWineRate := nLoadInteger;
//酿酒获得酒等级机率 20091117
  nLoadInteger := Config.ReadInteger('Setup', 'MakeWineLevelRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MakeWineLevelRate', g_Config.nMakeWineLevelRate)
  else g_Config.nMakeWineLevelRate := nLoadInteger;
//增加酒量进度的间隔时间 20080623
  nLoadInteger := Config.ReadInteger('Setup', 'IncAlcoholTick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'IncAlcoholTick', g_Config.nIncAlcoholTick)
  else g_Config.nIncAlcoholTick := nLoadInteger;
//减少醉酒度的间隔时间 20080623
  nLoadInteger := Config.ReadInteger('Setup', 'DesDrinkTick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DesDrinkTick', g_Config.nDesDrinkTick)
  else g_Config.nDesDrinkTick := nLoadInteger;
//酒量上限初始值 20080623
  nLoadInteger := Config.ReadInteger('Setup', 'MaxAlcoholValue', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MaxAlcoholValue', g_Config.nMaxAlcoholValue)
  else g_Config.nMaxAlcoholValue := nLoadInteger;
//升级后增加酒量上限值 20080623
  nLoadInteger := Config.ReadInteger('Setup', 'IncAlcoholValue', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'IncAlcoholValue', g_Config.nIncAlcoholValue)
  else g_Config.nIncAlcoholValue := nLoadInteger;
//长时间不使用酒,减药力值 20080623
  nLoadInteger := Config.ReadInteger('Setup', 'DesMedicineValue', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DesMedicineValue', g_Config.nDesMedicineValue)
  else g_Config.nDesMedicineValue := nLoadInteger;
//减药力值时间间隔 20080624
  nLoadInteger := Config.ReadInteger('Setup', 'DesMedicineTick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DesMedicineTick', g_Config.nDesMedicineTick)
  else g_Config.nDesMedicineTick := nLoadInteger;
{$IF M2Version = 1}
  //长时间使用酒，减酒量
  nLoadInteger := Config.ReadInteger('Setup', 'DesAlcoholValue', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DesAlcoholValue', g_Config.nDesAlcoholValue)
  else g_Config.nDesAlcoholValue := nLoadInteger;

  //减酒量时间间隔
  nLoadInteger := Config.ReadInteger('Setup', 'DesAlcoholTick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DesAlcoholTick', g_Config.nDesAlcoholTick)
  else g_Config.nDesAlcoholTick := nLoadInteger;

  //超过指定酒量时才减酒量
  nLoadInteger := Config.ReadInteger('Setup', 'DesMaxAlcoholValue', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DesMaxAlcoholValue', g_Config.nDesMaxAlcoholValue)
  else g_Config.nDesMaxAlcoholValue := nLoadInteger;

//启用天地结等级赋值功能
  if Config.ReadInteger('Setup', 'ASSIGNMENTCRYST', -1) < 0 then
    Config.WriteBool('Setup', 'ASSIGNMENTCRYST', g_Config.boAssignmentCryst);
  g_Config.boAssignmentCryst := Config.ReadBool('Setup', 'ASSIGNMENTCRYST', g_Config.boAssignmentCryst);

//天地结晶1等级时，<$CRYSTALLEVEL>对应的值
  nLoadInteger := Config.ReadInteger('Setup', 'CRYSTALLEVEL1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'CRYSTALLEVEL1', g_Config.nCRYSTALLEVEL1)
  else g_Config.nCRYSTALLEVEL1 := nLoadInteger;

//天地结晶2等级时，<$CRYSTALLEVEL>对应的值
  nLoadInteger := Config.ReadInteger('Setup', 'CRYSTALLEVEL2', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'CRYSTALLEVEL2', g_Config.nCRYSTALLEVEL2)
  else g_Config.nCRYSTALLEVEL2 := nLoadInteger;

//天地结晶3等级时，<$CRYSTALLEVEL>对应的值
  nLoadInteger := Config.ReadInteger('Setup', 'CRYSTALLEVEL3', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'CRYSTALLEVEL3', g_Config.nCRYSTALLEVEL3)
  else g_Config.nCRYSTALLEVEL3 := nLoadInteger;

//天地结晶4等级时，<$CRYSTALLEVEL>对应的值
  nLoadInteger := Config.ReadInteger('Setup', 'CRYSTALLEVEL4', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'CRYSTALLEVEL4', g_Config.nCRYSTALLEVEL4)
  else g_Config.nCRYSTALLEVEL4 := nLoadInteger;

//斗转星移生效伤害值(战)
  nLoadInteger := Config.ReadInteger('Setup', 'Skill95EffectPowerWarror', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill95EffectPowerWarror', g_Config.nSkill95EffectPowerWarror)
  else g_Config.nSkill95EffectPowerWarror := nLoadInteger;

//斗转星移生效机率(战)
  nLoadInteger := Config.ReadInteger('Setup', 'Skill95EffectRateWarror', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill95EffectRateWarror', g_Config.nSkill95EffectRateWarror)
  else g_Config.nSkill95EffectRateWarror := nLoadInteger;

//斗转星移减伤害比例(战)
  nLoadInteger := Config.ReadInteger('Setup', 'Skill95DecInjuryWarror', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill95DecInjuryWarror', g_Config.nSkill95DecInjuryWarror)
  else g_Config.nSkill95DecInjuryWarror := nLoadInteger;

//斗转星移生效伤害值(法)
  nLoadInteger := Config.ReadInteger('Setup', 'Skill95EffectPowerWizard', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill95EffectPowerWizard', g_Config.nSkill95EffectPowerWizard)
  else g_Config.nSkill95EffectPowerWizard := nLoadInteger;

//斗转星移生效机率(法)
  nLoadInteger := Config.ReadInteger('Setup', 'Skill95EffectRateWizard', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill95EffectRateWizard', g_Config.nSkill95EffectRateWizard)
  else g_Config.nSkill95EffectRateWizard := nLoadInteger;
                
//斗转星移减伤害比例(法)
  nLoadInteger := Config.ReadInteger('Setup', 'Skill95DecInjuryWizard', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill95DecInjuryWizard', g_Config.nSkill95DecInjuryWizard)
  else g_Config.nSkill95DecInjuryWizard := nLoadInteger;

//斗转星移生效伤害值(道)
  nLoadInteger := Config.ReadInteger('Setup', 'Skill95EffectPowerTaoist', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill95EffectPowerTaoist', g_Config.nSkill95EffectPowerTaoist)
  else g_Config.nSkill95EffectPowerTaoist := nLoadInteger;

//斗转星移生效机率(道)
  nLoadInteger := Config.ReadInteger('Setup', 'Skill95EffectRateTaoist', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill95EffectRateTaoist', g_Config.nSkill95EffectRateTaoist)
  else g_Config.nSkill95EffectRateTaoist := nLoadInteger;

//斗转星移减伤害比例(道)
  nLoadInteger := Config.ReadInteger('Setup', 'Skill95DecInjuryTaoist', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill95DecInjuryTaoist', g_Config.nSkill95DecInjuryTaoist)
  else g_Config.nSkill95DecInjuryTaoist := nLoadInteger;

//斗转星移每X级减伤害比例1%
  nLoadInteger := Config.ReadInteger('Setup', 'Skill95LevelDecInjury', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill95LevelDecInjury', g_Config.nSkill95LevelDecInjury)
  else g_Config.nSkill95LevelDecInjury := nLoadInteger;

//精元值上限
  nLoadInteger := Config.ReadInteger('Setup', 'JingYuanValue', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'JingYuanValue', g_Config.nJingYuanValue)
  else g_Config.nJingYuanValue := nLoadInteger;

//增加精元值间隔
  nLoadInteger := Config.ReadInteger('Setup', 'IncJingYuanValueTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'IncJingYuanValueTime', g_Config.nIncJingYuanValueTime)
  else g_Config.nIncJingYuanValueTime := nLoadInteger;

//恢复斗转值间隔
  nLoadInteger := Config.ReadInteger('Setup', 'IncTransferValueTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'IncTransferValueTime', g_Config.nIncTransferValueTime)
  else g_Config.nIncTransferValueTime := nLoadInteger;

//炼气所需金币数
  nLoadInteger := Config.ReadInteger('Setup', 'LianqiGold', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'LianqiGold', g_Config.nLianqiGold)
  else g_Config.nLianqiGold := nLoadInteger;

//强化炼气所需灵符数
  nLoadInteger := Config.ReadInteger('Setup', 'LianqiGameGird', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'LianqiGameGird', g_Config.nLianqiGameGird)
  else g_Config.nLianqiGameGird := nLoadInteger;

//自动修炼斗转星移时，一次所得的经验，单位万
   nLoadInteger := Config.ReadInteger('Setup', 'AutoExpSkill95', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AutoExpSkill95', g_Config.nAutoExpSkill95)
  else g_Config.nAutoExpSkill95 := nLoadInteger;
{$IFEND}
//月灵与主体共用蓝
  if Config.ReadInteger('Setup', 'FairyShareMasterMP', -1) < 0 then
    Config.WriteBool('Setup', 'FairyShareMasterMP', g_Config.boFairyShareMasterMP);
  g_Config.boFairyShareMasterMP := Config.ReadBool('Setup', 'FairyShareMasterMP', g_Config.boFairyShareMasterMP);

//月灵使用DB攻击速度 20110729
  if Config.ReadInteger('Setup', 'FairyUseDBHitTime', -1) < 0 then
    Config.WriteBool('Setup', 'FairyUseDBHitTime', g_Config.boFairyUseDBHitTime);
  g_Config.boFairyUseDBHitTime := Config.ReadBool('Setup', 'FairyUseDBHitTime', g_Config.boFairyUseDBHitTime);

//站在泉眼上的累积时间(秒) 20080624
  nLoadInteger := Config.ReadInteger('Setup', 'InFountainTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'InFountainTime', g_Config.nInFountainTime)
  else g_Config.nInFountainTime := nLoadInteger;
//行会酒泉蓄量少于时,不能领取 20080627
  nLoadInteger := Config.ReadInteger('Setup', 'MinGuildFountain', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MinGuildFountain', g_Config.nMinGuildFountain)
  else g_Config.nMinGuildFountain := nLoadInteger;
//行会成员领取酒泉,蓄量减少 20080627
  nLoadInteger := Config.ReadInteger('Setup', 'DecGuildFountain', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DecGuildFountain', g_Config.nDecGuildFountain)
  else g_Config.nDecGuildFountain := nLoadInteger;

//天地结晶英雄分配比例 20090202
  nLoadInteger := Config.ReadInteger('Setup', 'HeroCrystalExpRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HeroCrystalExpRate', g_Config.nHeroCrystalExpRate)
  else g_Config.nHeroCrystalExpRate := nLoadInteger;

//攻击富贵兽触发脚本段的机率 20090518
  nLoadInteger := Config.ReadInteger('Setup', 'UseItmeToMonRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UseItmeToMonRate', g_Config.nUseItmeToMonRate)
  else g_Config.nUseItmeToMonRate := nLoadInteger;
  
//富贵兽初始灵符数 20090518
  nLoadInteger := Config.ReadInteger('Setup', 'MonGameGird', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MonGameGird', g_Config.nMonGameGird)
  else g_Config.nMonGameGird := nLoadInteger;

//富贵兽累积灵符是否提示 20090603
  if Config.ReadInteger('Setup', 'ShowMonSysHint', -1) < 0 then
    Config.WriteBool('Setup', 'ShowMonSysHint', g_Config.boShowMonSysHint);
  g_Config.boShowMonSysHint := Config.ReadBool('Setup', 'ShowMonSysHint', g_Config.boShowMonSysHint);

//攻击狂暴状态富贵兽累计灵符数 20090519
  nLoadInteger := Config.ReadInteger('Setup', 'IncMonGameGird', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'IncMonGameGird', g_Config.nIncMonGameGird)
  else g_Config.nIncMonGameGird := nLoadInteger;

//富贵兽狂暴机率
  nLoadInteger := Config.ReadInteger('Setup', 'Mon79CrazyRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Mon79CrazyRate', g_Config.nMon79CrazyRate)
  else g_Config.nMon79CrazyRate := nLoadInteger;

//富贵兽狂暴时长
  nLoadInteger := Config.ReadInteger('Setup', 'Mon79CrazyTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Mon79CrazyTime', g_Config.nMon79CrazyTime)
  else g_Config.nMon79CrazyTime := nLoadInteger;

//攻击富贵兽所取得牛气值 20090519
  nLoadInteger := Config.ReadInteger('Setup', 'GetCattleGasvalue', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'GetCattleGasvalue', g_Config.nGetCattleGasvalue)
  else g_Config.nGetCattleGasvalue := nLoadInteger;
  
//牛气管升1级后自动打开箱子的编号 20090520
  nLoadInteger := Config.ReadInteger('Setup', 'AutoOpenBoxID1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AutoOpenBoxID1', g_Config.nAutoOpenBoxID1)
  else g_Config.nAutoOpenBoxID1 := nLoadInteger;

//牛气管升级2级后自动打开箱子的编号 20090524
  nLoadInteger := Config.ReadInteger('Setup', 'AutoOpenBoxID2', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AutoOpenBoxID2', g_Config.nAutoOpenBoxID2)
  else g_Config.nAutoOpenBoxID2 := nLoadInteger;

//牛气管升级3级后自动打开箱子的编号 20090524
  nLoadInteger := Config.ReadInteger('Setup', 'AutoOpenBoxID3', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AutoOpenBoxID3', g_Config.nAutoOpenBoxID3)
  else g_Config.nAutoOpenBoxID3 := nLoadInteger;

//牛气管升级4级后自动打开箱子的编号 20090524
  nLoadInteger := Config.ReadInteger('Setup', 'AutoOpenBoxID4', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AutoOpenBoxID4', g_Config.nAutoOpenBoxID4)
  else g_Config.nAutoOpenBoxID4 := nLoadInteger;

//牛气管升级经验 20090521
  nLoadInteger := Config.ReadInteger('Setup', 'ExpCattle', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ExpCattle', g_Config.dwCattleGasvalueNeedExps)
  else g_Config.dwCattleGasvalueNeedExps := nLoadInteger;
{$IF M2Version <> 2}
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsDCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsDCAddValueMaxLimit', g_Config.nArmsDCAddValueMaxLimit)
  else g_Config.nArmsDCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'ArmsDCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsDCAddValueRate', g_Config.nArmsDCAddValueRate)
  else g_Config.nArmsDCAddValueRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'ArmsDCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsDCAddRate', g_Config.nArmsDCAddRate)
  else g_Config.nArmsDCAddRate := nLoadInteger;

//武器+魔最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsMCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsMCAddValueMaxLimit', g_Config.nArmsMCAddValueMaxLimit)
  else g_Config.nArmsMCAddValueMaxLimit := nLoadInteger;

//武器+魔点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsMCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsMCAddValueRate', g_Config.nArmsMCAddValueRate)
  else g_Config.nArmsMCAddValueRate := nLoadInteger;

//武器+魔机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsMCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsMCAddRate', g_Config.nArmsMCAddRate)
  else g_Config.nArmsMCAddRate := nLoadInteger;

//武器+道最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsSCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsSCAddValueMaxLimit', g_Config.nArmsSCAddValueMaxLimit)
  else g_Config.nArmsSCAddValueMaxLimit := nLoadInteger;

//武器+道点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsSCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsSCAddValueRate', g_Config.nArmsSCAddValueRate)
  else g_Config.nArmsSCAddValueRate := nLoadInteger;

//武器+道机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsSCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsSCAddRate', g_Config.nArmsSCAddRate)
  else g_Config.nArmsSCAddRate := nLoadInteger;

//武器+主属性最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsMainAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsMainAddValueMaxLimit', g_Config.nArmsMainAddValueMaxLimit)
  else g_Config.nArmsMainAddValueMaxLimit := nLoadInteger;

//武器+主属性点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsMainAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsMainAddValueRate', g_Config.nArmsMainAddValueRate)
  else g_Config.nArmsMainAddValueRate := nLoadInteger;

//武器+主属性机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsMainAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsMainAddRate', g_Config.nArmsMainAddRate)
  else g_Config.nArmsMainAddRate := nLoadInteger;

//武器+强身最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsQSAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsQSAddValueMaxLimit', g_Config.nArmsQSAddValueMaxLimit)
  else g_Config.nArmsQSAddValueMaxLimit := nLoadInteger;

//武器+强身点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsQSAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsQSAddValueRate', g_Config.nArmsQSAddValueRate)
  else g_Config.nArmsQSAddValueRate := nLoadInteger;

//武器+强身机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsQSAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsQSAddRate', g_Config.nArmsQSAddRate)
  else g_Config.nArmsQSAddRate := nLoadInteger;

//武器+聚魔最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsJMAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsJMAddValueMaxLimit', g_Config.nArmsJMAddValueMaxLimit)
  else g_Config.nArmsJMAddValueMaxLimit := nLoadInteger;

//武器+聚魔点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsJMAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsJMAddValueRate', g_Config.nArmsJMAddValueRate)
  else g_Config.nArmsJMAddValueRate := nLoadInteger;

//武器+聚魔机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsJMAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsJMAddRate', g_Config.nArmsJMAddRate)
  else g_Config.nArmsJMAddRate := nLoadInteger;

//武器+内伤最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsNSAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsNSAddValueMaxLimit', g_Config.nArmsNSAddValueMaxLimit)
  else g_Config.nArmsNSAddValueMaxLimit := nLoadInteger;

//武器+内伤点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsNSAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsNSAddValueRate', g_Config.nArmsNSAddValueRate)
  else g_Config.nArmsNSAddValueRate := nLoadInteger;

//武器+内伤机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsNSAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsNSAddRate', g_Config.nArmsNSAddRate)
  else g_Config.nArmsNSAddRate := nLoadInteger;

//武器+暴击最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsBJAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsBJAddValueMaxLimit', g_Config.nArmsBJAddValueMaxLimit)
  else g_Config.nArmsBJAddValueMaxLimit := nLoadInteger;

//武器+暴击点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsBJAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsBJAddValueRate', g_Config.nArmsBJAddValueRate)
  else g_Config.nArmsBJAddValueRate := nLoadInteger;

//武器+暴击机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsBJAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsBJAddRate', g_Config.nArmsBJAddRate)
  else g_Config.nArmsBJAddRate := nLoadInteger;

//武器+合击最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsHJAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsHJAddValueMaxLimit', g_Config.nArmsHJAddValueMaxLimit)
  else g_Config.nArmsHJAddValueMaxLimit := nLoadInteger;

//武器+合击点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsHJAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsHJAddValueRate', g_Config.nArmsHJAddValueRate)
  else g_Config.nArmsHJAddValueRate := nLoadInteger;

//武器+合击机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsHJAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsHJAddRate', g_Config.nArmsHJAddRate)
  else g_Config.nArmsHJAddRate := nLoadInteger;

//武器+麻痹最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsMBAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsMBAddValueMaxLimit', g_Config.nArmsMBAddValueMaxLimit)
  else g_Config.nArmsMBAddValueMaxLimit := nLoadInteger;

//武器+麻痹点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsMBAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsMBAddValueRate', g_Config.nArmsMBAddValueRate)
  else g_Config.nArmsMBAddValueRate := nLoadInteger;

//武器+麻痹机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsMBAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsMBAddRate', g_Config.nArmsMBAddRate)
  else g_Config.nArmsMBAddRate := nLoadInteger;

//武器+防暴最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsFBAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsFBAddValueMaxLimit', g_Config.nArmsFBAddValueMaxLimit)
  else g_Config.nArmsFBAddValueMaxLimit := nLoadInteger;

//武器+防暴点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsFBAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsFBAddValueRate', g_Config.nArmsFBAddValueRate)
  else g_Config.nArmsFBAddValueRate := nLoadInteger;

//武器+防暴机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsFBAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsFBAddRate', g_Config.nArmsFBAddRate)
  else g_Config.nArmsFBAddRate := nLoadInteger;

//武器+准确最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsZQAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsZQAddValueMaxLimit', g_Config.nArmsZQAddValueMaxLimit)
  else g_Config.nArmsZQAddValueMaxLimit := nLoadInteger;

//武器+准确点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsZQAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsZQAddValueRate', g_Config.nArmsZQAddValueRate)
  else g_Config.nArmsZQAddValueRate := nLoadInteger;

//武器+准确机率
  nLoadInteger := Config.ReadInteger('Setup', 'ArmsZQAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ArmsZQAddRate', g_Config.nArmsZQAddRate)
  else g_Config.nArmsZQAddRate := nLoadInteger;

//衣服+攻最高点
  nLoadInteger := Config.ReadInteger('Setup', 'DreDCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreDCAddValueMaxLimit', g_Config.nDreDCAddValueMaxLimit)
  else g_Config.nDreDCAddValueMaxLimit := nLoadInteger;

//衣服+攻点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreDCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreDCAddValueRate', g_Config.nDreDCAddValueRate)
  else g_Config.nDreDCAddValueRate := nLoadInteger;

//衣服+攻机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreDCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreDCAddRate', g_Config.nDreDCAddRate)
  else g_Config.nDreDCAddRate := nLoadInteger;

//衣服+魔最高点
  nLoadInteger := Config.ReadInteger('Setup', 'DreMCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreMCAddValueMaxLimit', g_Config.nDreMCAddValueMaxLimit)
  else g_Config.nDreMCAddValueMaxLimit := nLoadInteger;

//衣服+魔点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreMCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreMCAddValueRate', g_Config.nDreMCAddValueRate)
  else g_Config.nDreMCAddValueRate := nLoadInteger;

//衣服+魔机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreMCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreMCAddRate', g_Config.nDreMCAddRate)
  else g_Config.nDreMCAddRate := nLoadInteger;

//衣服+道最高点
  nLoadInteger := Config.ReadInteger('Setup', 'DreSCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreSCAddValueMaxLimit', g_Config.nDreSCAddValueMaxLimit)
  else g_Config.nDreSCAddValueMaxLimit := nLoadInteger;

//衣服+道点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreSCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreSCAddValueRate', g_Config.nDreSCAddValueRate)
  else g_Config.nDreSCAddValueRate := nLoadInteger;

//衣服+道机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreSCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreSCAddRate', g_Config.nDreSCAddRate)
  else g_Config.nDreSCAddRate := nLoadInteger;

//衣服+主属性最高点
  nLoadInteger := Config.ReadInteger('Setup', 'DreMainAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreMainAddValueMaxLimit', g_Config.nDreMainAddValueMaxLimit)
  else g_Config.nDreMainAddValueMaxLimit := nLoadInteger;

//衣服+主属性点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreMainAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreMainAddValueRate', g_Config.nDreMainAddValueRate)
  else g_Config.nDreMainAddValueRate := nLoadInteger;

//衣服+主属性机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreMainAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreMainAddRate', g_Config.nDreMainAddRate)
  else g_Config.nDreMainAddRate := nLoadInteger;

//衣服+强身最高点
  nLoadInteger := Config.ReadInteger('Setup', 'DreQSAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreQSAddValueMaxLimit', g_Config.nDreQSAddValueMaxLimit)
  else g_Config.nDreQSAddValueMaxLimit := nLoadInteger;

//衣服+强身点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreQSAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreQSAddValueRate', g_Config.nDreQSAddValueRate)
  else g_Config.nDreQSAddValueRate := nLoadInteger;

//衣服+强身机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreQSAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreQSAddRate', g_Config.nDreQSAddRate)
  else g_Config.nDreQSAddRate := nLoadInteger;

//衣服+聚魔最高点
  nLoadInteger := Config.ReadInteger('Setup', 'DreJMAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreJMAddValueMaxLimit', g_Config.nDreJMAddValueMaxLimit)
  else g_Config.nDreJMAddValueMaxLimit := nLoadInteger;

//衣服+聚魔点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreJMAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreJMAddValueRate', g_Config.nDreJMAddValueRate)
  else g_Config.nDreJMAddValueRate := nLoadInteger;

//衣服+聚魔机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreJMAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreJMAddRate', g_Config.nDreJMAddRate)
  else g_Config.nDreJMAddRate := nLoadInteger;

//衣服+吸血最高点
  nLoadInteger := Config.ReadInteger('Setup', 'DreXXAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreXXAddValueMaxLimit', g_Config.nDreXXAddValueMaxLimit)
  else g_Config.nDreXXAddValueMaxLimit := nLoadInteger;

//衣服+吸血点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreXXAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreXXAddValueRate', g_Config.nDreXXAddValueRate)
  else g_Config.nDreXXAddValueRate := nLoadInteger;

//衣服+吸血机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreXXAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreXXAddRate', g_Config.nDreXXAddRate)
  else g_Config.nDreXXAddRate := nLoadInteger;

//衣服+暴击最高点
  nLoadInteger := Config.ReadInteger('Setup', 'DreBJAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreBJAddValueMaxLimit', g_Config.nDreBJAddValueMaxLimit)
  else g_Config.nDreBJAddValueMaxLimit := nLoadInteger;

//衣服+暴击点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreBJAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreBJAddValueRate', g_Config.nDreBJAddValueRate)
  else g_Config.nDreBJAddValueRate := nLoadInteger;

//衣服+暴击机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreBJAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreBJAddRate', g_Config.nDreBJAddRate)
  else g_Config.nDreBJAddRate := nLoadInteger;

//衣服+合击最高点
  nLoadInteger := Config.ReadInteger('Setup', 'DreHJAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreHJAddValueMaxLimit', g_Config.nDreHJAddValueMaxLimit)
  else g_Config.nDreHJAddValueMaxLimit := nLoadInteger;

//衣服+合击点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreHJAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreHJAddValueRate', g_Config.nDreHJAddValueRate)
  else g_Config.nDreHJAddValueRate := nLoadInteger;

//衣服+合击机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreHJAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreHJAddRate', g_Config.nDreHJAddRate)
  else g_Config.nDreHJAddRate := nLoadInteger;

//衣服+麻痹最高点
  nLoadInteger := Config.ReadInteger('Setup', 'DreMBAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreMBAddValueMaxLimit', g_Config.nDreMBAddValueMaxLimit)
  else g_Config.nDreMBAddValueMaxLimit := nLoadInteger;

//衣服+麻痹点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreMBAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreMBAddValueRate', g_Config.nDreMBAddValueRate)
  else g_Config.nDreMBAddValueRate := nLoadInteger;

//衣服+麻痹机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreMBAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreMBAddRate', g_Config.nDreMBAddRate)
  else g_Config.nDreMBAddRate := nLoadInteger;

//衣服+内力恢复最高点
  nLoadInteger := Config.ReadInteger('Setup', 'DreNLAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreNLAddValueMaxLimit', g_Config.nDreNLAddValueMaxLimit)
  else g_Config.nDreNLAddValueMaxLimit := nLoadInteger;

//衣服+内力恢复点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreNLAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreNLAddValueRate', g_Config.nDreNLAddValueRate)
  else g_Config.nDreNLAddValueRate := nLoadInteger;

//衣服+内力恢复机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreNLAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreNLAddRate', g_Config.nDreNLAddRate)
  else g_Config.nDreNLAddRate := nLoadInteger;

//衣服+物防最高点
  nLoadInteger := Config.ReadInteger('Setup', 'DreWFAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreWFAddValueMaxLimit', g_Config.nDreWFAddValueMaxLimit)
  else g_Config.nDreWFAddValueMaxLimit := nLoadInteger;

//衣服+物防点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreWFAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreWFAddValueRate', g_Config.nDreWFAddValueRate)
  else g_Config.nDreWFAddValueRate := nLoadInteger;

//衣服+物防机率
  nLoadInteger := Config.ReadInteger('Setup', 'DreWFAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DreWFAddRate', g_Config.nDreWFAddRate)
  else g_Config.nDreWFAddRate := nLoadInteger;

//项链+攻最高点
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceDCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceDCAddValueMaxLimit', g_Config.nNecklaceDCAddValueMaxLimit)
  else g_Config.nNecklaceDCAddValueMaxLimit := nLoadInteger;

//项链+攻点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceDCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceDCAddValueRate', g_Config.nNecklaceDCAddValueRate)
  else g_Config.nNecklaceDCAddValueRate := nLoadInteger;

//项链+攻机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceDCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceDCAddRate', g_Config.nNecklaceDCAddRate)
  else g_Config.nNecklaceDCAddRate := nLoadInteger;

//项链+魔最高点
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceMCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceMCAddValueMaxLimit', g_Config.nNecklaceMCAddValueMaxLimit)
  else g_Config.nNecklaceMCAddValueMaxLimit := nLoadInteger;

//项链+魔点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceMCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceMCAddValueRate', g_Config.nNecklaceMCAddValueRate)
  else g_Config.nNecklaceMCAddValueRate := nLoadInteger;

//项链+魔机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceMCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceMCAddRate', g_Config.nNecklaceMCAddRate)
  else g_Config.nNecklaceMCAddRate := nLoadInteger;

//项链+道最高点
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceSCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceSCAddValueMaxLimit', g_Config.nNecklaceSCAddValueMaxLimit)
  else g_Config.nNecklaceSCAddValueMaxLimit := nLoadInteger;

//项链+道点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceSCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceSCAddValueRate', g_Config.nNecklaceSCAddValueRate)
  else g_Config.nNecklaceSCAddValueRate := nLoadInteger;

//项链+道机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceSCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceSCAddRate', g_Config.nNecklaceSCAddRate)
  else g_Config.nNecklaceSCAddRate := nLoadInteger;

//项链+主属性最高点
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceMainAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceMainAddValueMaxLimit', g_Config.nNecklaceMainAddValueMaxLimit)
  else g_Config.nNecklaceMainAddValueMaxLimit := nLoadInteger;

//项链+主属性点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceMainAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceMainAddValueRate', g_Config.nNecklaceMainAddValueRate)
  else g_Config.nNecklaceMainAddValueRate := nLoadInteger;

//项链+主属性机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceMainAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceMainAddRate', g_Config.nNecklaceMainAddRate)
  else g_Config.nNecklaceMainAddRate := nLoadInteger;

//项链+强身最高点
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceQSAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceQSAddValueMaxLimit', g_Config.nNecklaceQSAddValueMaxLimit)
  else g_Config.nNecklaceQSAddValueMaxLimit := nLoadInteger;

//项链+强身点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceQSAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceQSAddValueRate', g_Config.nNecklaceQSAddValueRate)
  else g_Config.nNecklaceQSAddValueRate := nLoadInteger;

//项链+强身机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceQSAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceQSAddRate', g_Config.nNecklaceQSAddRate)
  else g_Config.nNecklaceQSAddRate := nLoadInteger;

//项链+吸血最高点
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceXXAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceXXAddValueMaxLimit', g_Config.nNecklaceXXAddValueMaxLimit)
  else g_Config.nNecklaceXXAddValueMaxLimit := nLoadInteger;

//项链+吸血点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceXXAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceXXAddValueRate', g_Config.nNecklaceXXAddValueRate)
  else g_Config.nNecklaceXXAddValueRate := nLoadInteger;

//项链+吸血机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceXXAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceXXAddRate', g_Config.nNecklaceXXAddRate)
  else g_Config.nNecklaceXXAddRate := nLoadInteger;

//项链+内力恢复最高点
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceNLAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceNLAddValueMaxLimit', g_Config.nNecklaceNLAddValueMaxLimit)
  else g_Config.nNecklaceNLAddValueMaxLimit := nLoadInteger;

//项链+内力恢复点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceNLAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceNLAddValueRate', g_Config.nNecklaceNLAddValueRate)
  else g_Config.nNecklaceNLAddValueRate := nLoadInteger;

//项链+内力恢复机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceNLAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceNLAddRate', g_Config.nNecklaceNLAddRate)
  else g_Config.nNecklaceNLAddRate := nLoadInteger;

//项链+魔防最高点
   nLoadInteger := Config.ReadInteger('Setup', 'NecklaceMFAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceMFAddValueMaxLimit', g_Config.nNecklaceMFAddValueMaxLimit)
  else g_Config.nNecklaceMFAddValueMaxLimit := nLoadInteger;

//项链+魔防点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceMFAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceMFAddValueRate', g_Config.nNecklaceMFAddValueRate)
  else g_Config.nNecklaceMFAddValueRate := nLoadInteger;

//项链+魔防机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceMFAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceMFAddRate', g_Config.nNecklaceMFAddRate)
  else g_Config.nNecklaceMFAddRate := nLoadInteger;

//项链+合击威力最高点
   nLoadInteger := Config.ReadInteger('Setup', 'NecklaceHJAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceHJAddValueMaxLimit', g_Config.nNecklaceHJAddValueMaxLimit)
  else g_Config.nNecklaceHJAddValueMaxLimit := nLoadInteger;

//项链+合击威力点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceHJAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceHJAddValueRate', g_Config.nNecklaceHJAddValueRate)
  else g_Config.nNecklaceHJAddValueRate := nLoadInteger;

//项链+合击威力机率
  nLoadInteger := Config.ReadInteger('Setup', 'NecklaceHJAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NecklaceHJAddRate', g_Config.nNecklaceHJAddRate)
  else g_Config.nNecklaceHJAddRate := nLoadInteger;

//手镯+攻最高点
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletDCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletDCAddValueMaxLimit', g_Config.nBraceletDCAddValueMaxLimit)
  else g_Config.nBraceletDCAddValueMaxLimit := nLoadInteger;

//手镯+攻点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletDCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletDCAddValueRate', g_Config.nBraceletDCAddValueRate)
  else g_Config.nBraceletDCAddValueRate := nLoadInteger;

//手镯+攻机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletDCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletDCAddRate', g_Config.nBraceletDCAddRate)
  else g_Config.nBraceletDCAddRate := nLoadInteger;

//手镯+魔最高点
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletMCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletMCAddValueMaxLimit', g_Config.nBraceletMCAddValueMaxLimit)
  else g_Config.nBraceletMCAddValueMaxLimit := nLoadInteger;

//手镯+魔点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletMCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletMCAddValueRate', g_Config.nBraceletMCAddValueRate)
  else g_Config.nBraceletMCAddValueRate := nLoadInteger;

//手镯+魔机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletMCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletMCAddRate', g_Config.nBraceletMCAddRate)
  else g_Config.nBraceletMCAddRate := nLoadInteger;

//手镯+道最高点
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletSCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletSCAddValueMaxLimit', g_Config.nBraceletSCAddValueMaxLimit)
  else g_Config.nBraceletSCAddValueMaxLimit := nLoadInteger;

//手镯+道点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletSCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletSCAddValueRate', g_Config.nBraceletSCAddValueRate)
  else g_Config.nBraceletSCAddValueRate := nLoadInteger;

//手镯+道机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletSCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletSCAddRate', g_Config.nBraceletSCAddRate)
  else g_Config.nBraceletSCAddRate := nLoadInteger;

//手镯+主属性最高点
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletMainAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletMainAddValueMaxLimit', g_Config.nBraceletMainAddValueMaxLimit)
  else g_Config.nBraceletMainAddValueMaxLimit := nLoadInteger;

//手镯+主属性点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletMainAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletMainAddValueRate', g_Config.nBraceletMainAddValueRate)
  else g_Config.nBraceletMainAddValueRate := nLoadInteger;

//手镯+主属性机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletMainAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletMainAddRate', g_Config.nBraceletMainAddRate)
  else g_Config.nBraceletMainAddRate := nLoadInteger;

//手镯+强身最高点
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletQSAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletQSAddValueMaxLimit', g_Config.nBraceletQSAddValueMaxLimit)
  else g_Config.nBraceletQSAddValueMaxLimit := nLoadInteger;

//手镯+强身点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletQSAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletQSAddValueRate', g_Config.nBraceletQSAddValueRate)
  else g_Config.nBraceletQSAddValueRate := nLoadInteger;

//手镯+强身机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletQSAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletQSAddRate', g_Config.nBraceletQSAddRate)
  else g_Config.nBraceletQSAddRate := nLoadInteger;

//手镯+吸血最高点
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletXXAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletXXAddValueMaxLimit', g_Config.nBraceletXXAddValueMaxLimit)
  else g_Config.nBraceletXXAddValueMaxLimit := nLoadInteger;

//手镯+吸血点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletXXAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletXXAddValueRate', g_Config.nBraceletXXAddValueRate)
  else g_Config.nBraceletXXAddValueRate := nLoadInteger;

//手镯+吸血机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletXXAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletXXAddRate', g_Config.nBraceletXXAddRate)
  else g_Config.nBraceletXXAddRate := nLoadInteger;

//手镯+内力恢复最高点
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletNLAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletNLAddValueMaxLimit', g_Config.nBraceletNLAddValueMaxLimit)
  else g_Config.nBraceletNLAddValueMaxLimit := nLoadInteger;

//手镯+内力恢复点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletNLAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletNLAddValueRate', g_Config.nBraceletNLAddValueRate)
  else g_Config.nBraceletNLAddValueRate := nLoadInteger;

//手镯+内力恢复机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletNLAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletNLAddRate', g_Config.nBraceletNLAddRate)
  else g_Config.nBraceletNLAddRate := nLoadInteger;

//手镯+魔防最高点
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletMFAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletMFAddValueMaxLimit', g_Config.nBraceletMFAddValueMaxLimit)
  else g_Config.nBraceletMFAddValueMaxLimit := nLoadInteger;

//手镯+魔防点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletMFAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletMFAddValueRate', g_Config.nBraceletMFAddValueRate)
  else g_Config.nBraceletMFAddValueRate := nLoadInteger;

//手镯+魔防机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletMFAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletMFAddRate', g_Config.nBraceletMFAddRate)
  else g_Config.nBraceletMFAddRate := nLoadInteger;

//手镯+合击威力最高点
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletHJAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletHJAddValueMaxLimit', g_Config.nBraceletHJAddValueMaxLimit)
  else g_Config.nBraceletHJAddValueMaxLimit := nLoadInteger;

//手镯+合击威力点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletHJAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletHJAddValueRate', g_Config.nBraceletHJAddValueRate)
  else g_Config.nBraceletHJAddValueRate := nLoadInteger;

//手镯+合击威力机率
  nLoadInteger := Config.ReadInteger('Setup', 'BraceletHJAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BraceletHJAddRate', g_Config.nBraceletHJAddRate)
  else g_Config.nBraceletHJAddRate := nLoadInteger;

//戒指+攻最高点
  nLoadInteger := Config.ReadInteger('Setup', 'RingDCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingDCAddValueMaxLimit', g_Config.nRingDCAddValueMaxLimit)
  else g_Config.nRingDCAddValueMaxLimit := nLoadInteger;

//戒指+攻点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingDCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingDCAddValueRate', g_Config.nRingDCAddValueRate)
  else g_Config.nRingDCAddValueRate := nLoadInteger;

//戒指+攻机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingDCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingDCAddRate', g_Config.nRingDCAddRate)
  else g_Config.nRingDCAddRate := nLoadInteger;

//戒指+魔最高点
  nLoadInteger := Config.ReadInteger('Setup', 'RingMCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingMCAddValueMaxLimit', g_Config.nRingMCAddValueMaxLimit)
  else g_Config.nRingMCAddValueMaxLimit := nLoadInteger;

//戒指+魔点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingMCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingMCAddValueRate', g_Config.nRingMCAddValueRate)
  else g_Config.nRingMCAddValueRate := nLoadInteger;

//戒指+魔机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingMCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingMCAddRate', g_Config.nRingMCAddRate)
  else g_Config.nRingMCAddRate := nLoadInteger;

//戒指+道最高点
  nLoadInteger := Config.ReadInteger('Setup', 'RingSCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingSCAddValueMaxLimit', g_Config.nRingSCAddValueMaxLimit)
  else g_Config.nRingSCAddValueMaxLimit := nLoadInteger;

//戒指+道点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingSCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingSCAddValueRate', g_Config.nRingSCAddValueRate)
  else g_Config.nRingSCAddValueRate := nLoadInteger;

//戒指+道机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingSCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingSCAddRate', g_Config.nRingSCAddRate)
  else g_Config.nRingSCAddRate := nLoadInteger;

//戒指+主属性最高点
  nLoadInteger := Config.ReadInteger('Setup', 'RingMainAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingMainAddValueMaxLimit', g_Config.nRingMainAddValueMaxLimit)
  else g_Config.nRingMainAddValueMaxLimit := nLoadInteger;

//戒指+主属性点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingMainAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingMainAddValueRate', g_Config.nRingMainAddValueRate)
  else g_Config.nRingMainAddValueRate := nLoadInteger;

//戒指+主属性机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingMainAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingMainAddRate', g_Config.nRingMainAddRate)
  else g_Config.nRingMainAddRate := nLoadInteger;

//戒指+强身最高点
  nLoadInteger := Config.ReadInteger('Setup', 'RingQSAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingQSAddValueMaxLimit', g_Config.nRingQSAddValueMaxLimit)
  else g_Config.nRingQSAddValueMaxLimit := nLoadInteger;

//戒指+强身点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingQSAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingQSAddValueRate', g_Config.nRingQSAddValueRate)
  else g_Config.nRingQSAddValueRate := nLoadInteger;

//戒指+强身点机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingQSAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingQSAddRate', g_Config.nRingQSAddRate)
  else g_Config.nRingQSAddRate := nLoadInteger;

//戒指+聚魔最高点
  nLoadInteger := Config.ReadInteger('Setup', 'RingJMAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingJMAddValueMaxLimit', g_Config.nRingJMAddValueMaxLimit)
  else g_Config.nRingJMAddValueMaxLimit := nLoadInteger;

//戒指+聚魔点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingJMAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingJMAddValueRate', g_Config.nRingJMAddValueRate)
  else g_Config.nRingJMAddValueRate := nLoadInteger;

//戒指+聚魔机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingJMAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingJMAddRate', g_Config.nRingJMAddRate)
  else g_Config.nRingJMAddRate := nLoadInteger;

//戒指+吸血最高点
  nLoadInteger := Config.ReadInteger('Setup', 'RingXXAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingXXAddValueMaxLimit', g_Config.nRingXXAddValueMaxLimit)
  else g_Config.nRingXXAddValueMaxLimit := nLoadInteger;

//戒指+吸血点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingXXAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingXXAddValueRate', g_Config.nRingXXAddValueRate)
  else g_Config.nRingXXAddValueRate := nLoadInteger;

//戒指+吸血机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingXXAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingXXAddRate', g_Config.nRingXXAddRate)
  else g_Config.nRingXXAddRate := nLoadInteger;

//戒指+防爆最高点
  nLoadInteger := Config.ReadInteger('Setup', 'RingFBAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingFBAddValueMaxLimit', g_Config.nRingFBAddValueMaxLimit)
  else g_Config.nRingFBAddValueMaxLimit := nLoadInteger;

//戒指+防爆点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingFBAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingFBAddValueRate', g_Config.nRingFBAddValueRate)
  else g_Config.nRingFBAddValueRate := nLoadInteger;

//戒指+防爆机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingFBAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingFBAddRate', g_Config.nRingFBAddRate)
  else g_Config.nRingFBAddRate := nLoadInteger;

//戒指+合击威力最高点
  nLoadInteger := Config.ReadInteger('Setup', 'RingHJAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingHJAddValueMaxLimit', g_Config.nRingHJAddValueMaxLimit)
  else g_Config.nRingHJAddValueMaxLimit := nLoadInteger;

//戒指+合击威力点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingHJAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingHJAddValueRate', g_Config.nRingHJAddValueRate)
  else g_Config.nRingHJAddValueRate := nLoadInteger;

//戒指+合击威力机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingHJAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingHJAddRate', g_Config.nRingHJAddRate)
  else g_Config.nRingHJAddRate := nLoadInteger;

//戒指+麻痹最高点
  nLoadInteger := Config.ReadInteger('Setup', 'RingMBAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingMBAddValueMaxLimit', g_Config.nRingMBAddValueMaxLimit)
  else g_Config.nRingMBAddValueMaxLimit := nLoadInteger;

//戒指+麻痹点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingMBAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingMBAddValueRate', g_Config.nRingMBAddValueRate)
  else g_Config.nRingMBAddValueRate := nLoadInteger;

//戒指+麻痹机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingMBAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingMBAddRate', g_Config.nRingMBAddRate)
  else g_Config.nRingMBAddRate := nLoadInteger;

//戒指+内力恢复最高点
  nLoadInteger := Config.ReadInteger('Setup', 'RingNLAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingNLAddValueMaxLimit', g_Config.nRingNLAddValueMaxLimit)
  else g_Config.nRingNLAddValueMaxLimit := nLoadInteger;

//戒指+内力恢复点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingNLAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingNLAddValueRate', g_Config.nRingNLAddValueRate)
  else g_Config.nRingNLAddValueRate := nLoadInteger;

//戒指+内力恢复机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingNLAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingNLAddRate', g_Config.nRingNLAddRate)
  else g_Config.nRingNLAddRate := nLoadInteger;

//戒指+物防最高点
  nLoadInteger := Config.ReadInteger('Setup', 'RingWFAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingWFAddValueMaxLimit', g_Config.nRingWFAddValueMaxLimit)
  else g_Config.nRingWFAddValueMaxLimit := nLoadInteger;

//戒指+物防点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingWFAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingWFAddValueRate', g_Config.nRingWFAddValueRate)
  else g_Config.nRingWFAddValueRate := nLoadInteger;

//戒指+物防机率
  nLoadInteger := Config.ReadInteger('Setup', 'RingWFAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RingWFAddRate', g_Config.nRingWFAddRate)
  else g_Config.nRingWFAddRate := nLoadInteger;

//头盔+攻最高点
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeDCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeDCAddValueMaxLimit', g_Config.nHelmeDCAddValueMaxLimit)
  else g_Config.nHelmeDCAddValueMaxLimit := nLoadInteger;

//头盔+攻点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeDCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeDCAddValueRate', g_Config.nHelmeDCAddValueRate)
  else g_Config.nHelmeDCAddValueRate := nLoadInteger;

//头盔+攻机率
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeDCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeDCAddRate', g_Config.nHelmeDCAddRate)
  else g_Config.nHelmeDCAddRate := nLoadInteger;

//头盔+魔最高点
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeMCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeMCAddValueMaxLimit', g_Config.nHelmeMCAddValueMaxLimit)
  else g_Config.nHelmeMCAddValueMaxLimit := nLoadInteger;

//头盔+魔点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeMCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeMCAddValueRate', g_Config.nHelmeMCAddValueRate)
  else g_Config.nHelmeMCAddValueRate := nLoadInteger;

//头盔+魔机率
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeMCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeMCAddRate', g_Config.nHelmeMCAddRate)
  else g_Config.nHelmeMCAddRate := nLoadInteger;

//头盔+道最高点
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeSCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeSCAddValueMaxLimit', g_Config.nHelmeSCAddValueMaxLimit)
  else g_Config.nHelmeSCAddValueMaxLimit := nLoadInteger;

//头盔+道点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeSCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeSCAddValueRate', g_Config.nHelmeSCAddValueRate)
  else g_Config.nHelmeSCAddValueRate := nLoadInteger;

//头盔+道机率
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeSCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeSCAddRate', g_Config.nHelmeSCAddRate)
  else g_Config.nHelmeSCAddRate := nLoadInteger;

//头盔+主属性最高点
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeMainAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeMainAddValueMaxLimit', g_Config.nHelmeMainAddValueMaxLimit)
  else g_Config.nHelmeMainAddValueMaxLimit := nLoadInteger;

//头盔+主属性点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeMainAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeMainAddValueRate', g_Config.nHelmeMainAddValueRate)
  else g_Config.nHelmeMainAddValueRate := nLoadInteger;

//头盔+主属性机率
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeMainAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeMainAddRate', g_Config.nHelmeMainAddRate)
  else g_Config.nHelmeMainAddRate := nLoadInteger;

//头盔+强身最高点
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeQSAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeQSAddValueMaxLimit', g_Config.nHelmeQSAddValueMaxLimit)
  else g_Config.nHelmeQSAddValueMaxLimit := nLoadInteger;

//头盔+强身点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeQSAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeQSAddValueRate', g_Config.nHelmeQSAddValueRate)
  else g_Config.nHelmeQSAddValueRate := nLoadInteger;

//头盔+强身点机率
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeQSAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeQSAddRate', g_Config.nHelmeQSAddRate)
  else g_Config.nHelmeQSAddRate := nLoadInteger;

//头盔+吸血最高点
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeXXAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeXXAddValueMaxLimit', g_Config.nHelmeXXAddValueMaxLimit)
  else g_Config.nHelmeXXAddValueMaxLimit := nLoadInteger;

//头盔+吸血点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeXXAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeXXAddValueRate', g_Config.nHelmeXXAddValueRate)
  else g_Config.nHelmeXXAddValueRate := nLoadInteger;

//头盔+吸血机率
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeXXAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeXXAddRate', g_Config.nHelmeXXAddRate)
  else g_Config.nHelmeXXAddRate := nLoadInteger;

//头盔+合击威力最高点
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeHJAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeHJAddValueMaxLimit', g_Config.nHelmeHJAddValueMaxLimit)
  else g_Config.nHelmeHJAddValueMaxLimit := nLoadInteger;

//头盔+合击威力点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeHJAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeHJAddValueRate', g_Config.nHelmeHJAddValueRate)
  else g_Config.nHelmeHJAddValueRate := nLoadInteger;

//头盔+合击威力机率
  nLoadInteger := Config.ReadInteger('Setup', 'HelmeHJAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HelmeHJAddRate', g_Config.nHelmeHJAddRate)
  else g_Config.nHelmeHJAddRate := nLoadInteger;

//鞋子+攻最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesDCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesDCAddValueMaxLimit', g_Config.nShoesDCAddValueMaxLimit)
  else g_Config.nShoesDCAddValueMaxLimit := nLoadInteger;

//鞋子+攻点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesDCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesDCAddValueRate', g_Config.nShoesDCAddValueRate)
  else g_Config.nShoesDCAddValueRate := nLoadInteger;

//鞋子+攻机率
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesDCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesDCAddRate', g_Config.nShoesDCAddRate)
  else g_Config.nShoesDCAddRate := nLoadInteger;

//鞋子+魔最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesMCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesMCAddValueMaxLimit', g_Config.nShoesMCAddValueMaxLimit)
  else g_Config.nShoesMCAddValueMaxLimit := nLoadInteger;

//鞋子+魔点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesMCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesMCAddValueRate', g_Config.nShoesMCAddValueRate)
  else g_Config.nShoesMCAddValueRate := nLoadInteger;

//鞋子+魔机率
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesMCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesMCAddRate', g_Config.nShoesMCAddRate)
  else g_Config.nShoesMCAddRate := nLoadInteger;

//鞋子+道最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesSCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesSCAddValueMaxLimit', g_Config.nShoesSCAddValueMaxLimit)
  else g_Config.nShoesSCAddValueMaxLimit := nLoadInteger;

//鞋子+道点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesSCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesSCAddValueRate', g_Config.nShoesSCAddValueRate)
  else g_Config.nShoesSCAddValueRate := nLoadInteger;

//鞋子+道机率
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesSCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesSCAddRate', g_Config.nShoesSCAddRate)
  else g_Config.nShoesSCAddRate := nLoadInteger;

//鞋子+主属性最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesMainAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesMainAddValueMaxLimit', g_Config.nShoesMainAddValueMaxLimit)
  else g_Config.nShoesMainAddValueMaxLimit := nLoadInteger;

//鞋子+主属性点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesMainAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesMainAddValueRate', g_Config.nShoesMainAddValueRate)
  else g_Config.nShoesMainAddValueRate := nLoadInteger;

//鞋子+主属性机率
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesMainAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesMainAddRate', g_Config.nShoesMainAddRate)
  else g_Config.nShoesMainAddRate := nLoadInteger;

//鞋子+强身最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesQSAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesQSAddValueMaxLimit', g_Config.nShoesQSAddValueMaxLimit)
  else g_Config.nShoesQSAddValueMaxLimit := nLoadInteger;

//鞋子+强身点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesQSAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesQSAddValueRate', g_Config.nShoesQSAddValueRate)
  else g_Config.nShoesQSAddValueRate := nLoadInteger;

//鞋子+强身点机率
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesQSAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesQSAddRate', g_Config.nShoesQSAddRate)
  else g_Config.nShoesQSAddRate := nLoadInteger;

//鞋子+聚魔最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesJMAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesJMAddValueMaxLimit', g_Config.nShoesJMAddValueMaxLimit)
  else g_Config.nShoesJMAddValueMaxLimit := nLoadInteger;

//鞋子+聚魔点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesJMAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesJMAddValueRate', g_Config.nShoesJMAddValueRate)
  else g_Config.nShoesJMAddValueRate := nLoadInteger;

//鞋子+聚魔机率
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesJMAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesJMAddRate', g_Config.nShoesJMAddRate)
  else g_Config.nShoesJMAddRate := nLoadInteger;

//鞋子+合击威力最高点
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesHJAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesHJAddValueMaxLimit', g_Config.nShoesHJAddValueMaxLimit)
  else g_Config.nShoesHJAddValueMaxLimit := nLoadInteger;

//鞋子+合击威力点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesHJAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesHJAddValueRate', g_Config.nShoesHJAddValueRate)
  else g_Config.nShoesHJAddValueRate := nLoadInteger;

//鞋子+合击威力机率
  nLoadInteger := Config.ReadInteger('Setup', 'ShoesHJAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShoesHJAddRate', g_Config.nShoesHJAddRate)
  else g_Config.nShoesHJAddRate := nLoadInteger;

//勋章+攻最高点
  nLoadInteger := Config.ReadInteger('Setup', 'MedalDCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalDCAddValueMaxLimit', g_Config.nMedalDCAddValueMaxLimit)
  else g_Config.nMedalDCAddValueMaxLimit := nLoadInteger;

//勋章+攻点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalDCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalDCAddValueRate', g_Config.nMedalDCAddValueRate)
  else g_Config.nMedalDCAddValueRate := nLoadInteger;

//勋章+攻机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalDCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalDCAddRate', g_Config.nMedalDCAddRate)
  else g_Config.nMedalDCAddRate := nLoadInteger;

//勋章+魔最高点
  nLoadInteger := Config.ReadInteger('Setup', 'MedalMCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalMCAddValueMaxLimit', g_Config.nMedalMCAddValueMaxLimit)
  else g_Config.nMedalMCAddValueMaxLimit := nLoadInteger;

//勋章+魔点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalMCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalMCAddValueRate', g_Config.nMedalMCAddValueRate)
  else g_Config.nMedalMCAddValueRate := nLoadInteger;

//勋章+魔机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalMCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalMCAddRate', g_Config.nMedalMCAddRate)
  else g_Config.nMedalMCAddRate := nLoadInteger;

//勋章+道最高点
  nLoadInteger := Config.ReadInteger('Setup', 'MedalSCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalSCAddValueMaxLimit', g_Config.nMedalSCAddValueMaxLimit)
  else g_Config.nMedalSCAddValueMaxLimit := nLoadInteger;

//勋章+道点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalSCAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalSCAddValueRate', g_Config.nMedalSCAddValueRate)
  else g_Config.nMedalSCAddValueRate := nLoadInteger;

//勋章+道机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalSCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalSCAddRate', g_Config.nMedalSCAddRate)
  else g_Config.nMedalSCAddRate := nLoadInteger;

//勋章+主属性最高点
  nLoadInteger := Config.ReadInteger('Setup', 'MedalMainAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalMainAddValueMaxLimit', g_Config.nMedalMainAddValueMaxLimit)
  else g_Config.nMedalMainAddValueMaxLimit := nLoadInteger;

//勋章+主属性点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalMainAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalMainAddValueRate', g_Config.nMedalMainAddValueRate)
  else g_Config.nMedalMainAddValueRate := nLoadInteger;

//勋章+主属性机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalMainAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalMainAddRate', g_Config.nMedalMainAddRate)
  else g_Config.nMedalMainAddRate := nLoadInteger;

//勋章+强身等级最高点
  nLoadInteger := Config.ReadInteger('Setup', 'MedalQSAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalQSAddValueMaxLimit', g_Config.nMedalQSAddValueMaxLimit)
  else g_Config.nMedalQSAddValueMaxLimit := nLoadInteger;

//勋章+强身等级点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalQSAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalQSAddValueRate', g_Config.nMedalQSAddValueRate)
  else g_Config.nMedalQSAddValueRate := nLoadInteger;

//勋章+强身等级机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalQSAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalQSAddRate', g_Config.nMedalQSAddRate)
  else g_Config.nMedalQSAddRate := nLoadInteger;

//勋章+聚魔最高点
  nLoadInteger := Config.ReadInteger('Setup', 'MedalJMAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalJMAddValueMaxLimit', g_Config.nMedalJMAddValueMaxLimit)
  else g_Config.nMedalJMAddValueMaxLimit := nLoadInteger;

//勋章+聚魔点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalJMAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalJMAddValueRate', g_Config.nMedalJMAddValueRate)
  else g_Config.nMedalJMAddValueRate := nLoadInteger;

//勋章+聚魔机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalJMAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalJMAddRate', g_Config.nMedalJMAddRate)
  else g_Config.nMedalJMAddRate := nLoadInteger;

//勋章+防爆最高点
  nLoadInteger := Config.ReadInteger('Setup', 'MedalFBAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalFBAddValueMaxLimit', g_Config.nMedalFBAddValueMaxLimit)
  else g_Config.nMedalFBAddValueMaxLimit := nLoadInteger;

//勋章+防爆点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalFBAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalFBAddValueRate', g_Config.nMedalFBAddValueRate)
  else g_Config.nMedalFBAddValueRate := nLoadInteger;

//勋章+防爆机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalFBAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalFBAddRate', g_Config.nMedalFBAddRate)
  else g_Config.nMedalFBAddRate := nLoadInteger;

//勋章+暴击最高点
  nLoadInteger := Config.ReadInteger('Setup', 'MedalBJAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalBJAddValueMaxLimit', g_Config.nMedalBJAddValueMaxLimit)
  else g_Config.nMedalBJAddValueMaxLimit := nLoadInteger;

//勋章+暴击点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalBJAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalBJAddValueRate', g_Config.nMedalBJAddValueRate)
  else g_Config.nMedalBJAddValueRate := nLoadInteger;

//勋章+暴击机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalBJAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalBJAddRate', g_Config.nMedalBJAddRate)
  else g_Config.nMedalBJAddRate := nLoadInteger;

//勋章+合击威力最高点
  nLoadInteger := Config.ReadInteger('Setup', 'MedalHJAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalHJAddValueMaxLimit', g_Config.nMedalHJAddValueMaxLimit)
  else g_Config.nMedalHJAddValueMaxLimit := nLoadInteger;

//勋章+合击威力点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalHJAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalHJAddValueRate', g_Config.nMedalHJAddValueRate)
  else g_Config.nMedalHJAddValueRate := nLoadInteger;

//勋章+合击威力机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalHJAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalHJAddRate', g_Config.nMedalHJAddRate)
  else g_Config.nMedalHJAddRate := nLoadInteger;

//勋章+麻痹抗性最高点
  nLoadInteger := Config.ReadInteger('Setup', 'MedalMBAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalMBAddValueMaxLimit', g_Config.nMedalMBAddValueMaxLimit)
  else g_Config.nMedalMBAddValueMaxLimit := nLoadInteger;

//勋章+麻痹抗性点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalMBAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalMBAddValueRate', g_Config.nMedalMBAddValueRate)
  else g_Config.nMedalMBAddValueRate := nLoadInteger;

//勋章+麻痹抗性机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalMBAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalMBAddRate', g_Config.nMedalMBAddRate)
  else g_Config.nMedalMBAddRate := nLoadInteger;

//勋章+内力恢复最高点
  nLoadInteger := Config.ReadInteger('Setup', 'MedalNLAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalNLAddValueMaxLimit', g_Config.nMedalNLAddValueMaxLimit)
  else g_Config.nMedalNLAddValueMaxLimit := nLoadInteger;

//勋章+内力恢复点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalNLAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalNLAddValueRate', g_Config.nMedalNLAddValueRate)
  else g_Config.nMedalNLAddValueRate := nLoadInteger;

//勋章+内力恢复机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalNLAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalNLAddRate', g_Config.nMedalNLAddRate)
  else g_Config.nMedalNLAddRate := nLoadInteger;

//勋章+内伤等级最高点
  nLoadInteger := Config.ReadInteger('Setup', 'MedalNSAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalNSAddValueMaxLimit', g_Config.nMedalNSAddValueMaxLimit)
  else g_Config.nMedalNSAddValueMaxLimit := nLoadInteger;

//勋章+内伤等级点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalNSAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalNSAddValueRate', g_Config.nMedalNSAddValueRate)
  else g_Config.nMedalNSAddValueRate := nLoadInteger;

//勋章+内伤等级机率
  nLoadInteger := Config.ReadInteger('Setup', 'MedalNSAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MedalNSAddRate', g_Config.nMedalNSAddRate)
  else g_Config.nMedalNSAddRate := nLoadInteger;

//神秘属性最高点
  nLoadInteger := Config.ReadInteger('Setup', 'MysteryAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MysteryAddValueMaxLimit', g_Config.nMysteryAddValueMaxLimit)
  else g_Config.nMysteryAddValueMaxLimit := nLoadInteger;

//神秘属性点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'MysteryAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MysteryAddValueRate', g_Config.nMysteryAddValueRate)
  else g_Config.nMysteryAddValueRate := nLoadInteger;

//神秘属性机率
  nLoadInteger := Config.ReadInteger('Setup', 'MysteryAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MysteryAddRate', g_Config.nMysteryAddRate)
  else g_Config.nMysteryAddRate := nLoadInteger;

//解读属性机率
  for I := Low(g_Config.nReadRate) to High(g_Config.nReadRate) do begin
    nLoadInteger := Config.ReadInteger('Setup', 'ReadRate' + IntToStr(I), -1);
    if nLoadInteger < 0 then
      Config.WriteInteger('Setup', 'ReadRate' + IntToStr(I), g_Config.nReadRate[I])
    else g_Config.nReadRate[I] := nLoadInteger;

    nLoadInteger := Config.ReadInteger('Setup', 'MakeScrollRate' + IntToStr(I), -1);
    if nLoadInteger < 0 then
      Config.WriteInteger('Setup', 'MakeScrollRate' + IntToStr(I), g_Config.nMakeScrollRate[I])
    else g_Config.nMakeScrollRate[I] := nLoadInteger;
  end;

{//制造神秘卷轴机率
  for I := Low(g_Config.nMakeScrollRate) to High(g_Config.nMakeScrollRate) do begin
    nLoadInteger := Config.ReadInteger('Setup', 'MakeScrollRate' + IntToStr(I), -1);
    if nLoadInteger < 0 then
      Config.WriteInteger('Setup', 'MakeScrollRate' + IntToStr(I), g_Config.nMakeScrollRate[I])
    else g_Config.nMakeScrollRate[I] := nLoadInteger;
  end;}

//重生技能机率
  nLoadInteger := Config.ReadInteger('Setup', 'RebirthRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'RebirthRate', g_Config.nRebirthRate)
  else g_Config.nRebirthRate := nLoadInteger;

//八卦护身技能机率
  nLoadInteger := Config.ReadInteger('Setup', 'MagicShieldRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagicShieldRate', g_Config.nMagicShieldRate)
  else g_Config.nMagicShieldRate := nLoadInteger;

//麻痹技能机率
  nLoadInteger := Config.ReadInteger('Setup', 'ParalysisRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ParalysisRate', g_Config.nParalysisRate)
  else g_Config.nParalysisRate := nLoadInteger;

//魔道麻痹技能机率
  nLoadInteger := Config.ReadInteger('Setup', 'Paralysis2Rate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Paralysis2Rate', g_Config.nParalysis2Rate)
  else g_Config.nParalysis2Rate := nLoadInteger;

//战意麻痹技能机率
  nLoadInteger := Config.ReadInteger('Setup', 'Paralysis1Rate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Paralysis1Rate', g_Config.nParalysis1Rate)
  else g_Config.nParalysis1Rate := nLoadInteger;

//探测技能机率
  nLoadInteger := Config.ReadInteger('Setup', 'ProbeNecklaceRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ProbeNecklaceRate', g_Config.nProbeNecklaceRate)
  else g_Config.nProbeNecklaceRate := nLoadInteger;

//传送技能机率
  nLoadInteger := Config.ReadInteger('Setup', 'TeleportRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'TeleportRate', g_Config.nTeleportRate)
  else g_Config.nTeleportRate := nLoadInteger;

//宝物灵媒点数机率
  nLoadInteger := Config.ReadInteger('Setup', 'SpiritMediaAddValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SpiritMediaAddValueRate', g_Config.nSpiritMediaAddValueRate)
  else g_Config.nSpiritMediaAddValueRate := nLoadInteger;

//宝物灵媒机率
  nLoadInteger := Config.ReadInteger('Setup', 'SpiritMediaAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SpiritMediaAddRate', g_Config.nSpiritMediaAddRate)
  else g_Config.nSpiritMediaAddRate := nLoadInteger;

//使用灵媒探索宝物成功率
  nLoadInteger := Config.ReadInteger('Setup', 'FindJewelRave', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'FindJewelRave', g_Config.nFindJewelRave)
  else g_Config.nFindJewelRave := nLoadInteger;

//挖宝命中机率
  nLoadInteger := Config.ReadInteger('Setup', 'DigJewelHitRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DigJewelHitRate', g_Config.nDigJewelHitRate)
  else g_Config.nDigJewelHitRate := nLoadInteger;

//得宝机率
  nLoadInteger := Config.ReadInteger('Setup', 'GetDigJewelRave', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'GetDigJewelRave', g_Config.nGetDigJewelRave)
  else g_Config.nGetDigJewelRave := nLoadInteger;

//得宝减装备品质机率
  nLoadInteger := Config.ReadInteger('Setup', 'DecDigJewelDuraRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DecDigJewelDuraRate', g_Config.nDecDigJewelDuraRate)
  else g_Config.nDecDigJewelDuraRate := nLoadInteger;

//是否开启鉴定系统
  if Config.ReadInteger('Setup', 'UseCanKamPo', -1) < 0 then
    Config.WriteBool('Setup', 'UseCanKamPo', g_Config.boUseCanKamPo);
  g_Config.boUseCanKamPo := Config.ReadBool('Setup', 'UseCanKamPo', g_Config.boUseCanKamPo);

//禁止挂机增加精力值
  if Config.ReadInteger('Setup', 'OffLineEnergy', -1) < 0 then
    Config.WriteBool('Setup', 'OffLineEnergy', g_Config.boOffLineEnergy);
  g_Config.boOffLineEnergy := Config.ReadBool('Setup', 'OffLineEnergy', g_Config.boOffLineEnergy);

//增加精力值间隔
  nLoadInteger := Config.ReadInteger('Setup', 'EnergyValueTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'EnergyValueTime', g_Config.nEnergyValueTime)
  else g_Config.nEnergyValueTime := nLoadInteger;

//品评价格
  nLoadInteger := Config.ReadInteger('Setup', 'JudgePrice', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'JudgePrice', g_Config.nJudgePrice)
  else g_Config.nJudgePrice := nLoadInteger;

//品评价使用金币
  if Config.ReadInteger('Setup','JudgeUseGold', -1) < 0 then
    Config.WriteBool('Setup','JudgeUseGold', g_Config.boJudgeUseGold)
  else g_Config.boJudgeUseGold := Config.ReadBool('Setup','JudgeUseGold',g_Config.boJudgeUseGold);
//新鉴定 By TasNat at: 2012-04-13 15:06:41
  nLoadInteger := Config.ReadInteger('Setup', 'NewKamPoLockNeed1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NewKamPoLockNeed1', g_Config.dwNewKamPoLockNeed1)
  else g_Config.dwNewKamPoLockNeed1 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'NewKamPoLockNeed2', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NewKamPoLockNeed2', g_Config.dwNewKamPoLockNeed2)
  else g_Config.dwNewKamPoLockNeed2 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'NewKamPoNeed1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NewKamPoNeed1', g_Config.dwNewKamPoNeed1)
  else g_Config.dwNewKamPoNeed1 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'NewKamPoNeed2', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NewKamPoNeed2', g_Config.dwNewKamPoNeed2)
  else g_Config.dwNewKamPoNeed2 := nLoadInteger;



  nLoadInteger := Config.ReadInteger('Setup', 'AdvancedKamPo', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AdvancedKamPo', g_Config.nAdvancedKamPo)
  else g_Config.nAdvancedKamPo := nLoadInteger;

//高级鉴定成功机率
  nLoadInteger := Config.ReadInteger('Setup', 'AdvancedKamPo', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AdvancedKamPo', g_Config.nAdvancedKamPo)
  else g_Config.nAdvancedKamPo := nLoadInteger;

//衣服(男)替换
  if Config.ReadString('Setup', 'DreReplaceMan', '') = '' then
    Config.WriteString('Setup', 'DreReplaceMan', g_Config.sDreReplaceMan);
  g_Config.sDreReplaceMan := Config.ReadString('Setup', 'DreReplaceMan', g_Config.sDreReplaceMan);

//衣服(女)替换
  if Config.ReadString('Setup', 'DreReplaceWoman', '') = '' then
    Config.WriteString('Setup', 'DreReplaceWoman', g_Config.sDreReplaceWoman);
  g_Config.sDreReplaceWoman := Config.ReadString('Setup', 'DreReplaceWoman', g_Config.sDreReplaceWoman);

//武器替换
  if Config.ReadString('Setup', 'ArmsReplace', '') = '' then
    Config.WriteString('Setup', 'ArmsReplace', g_Config.sArmsReplace);
  g_Config.sArmsReplace := Config.ReadString('Setup', 'ArmsReplace', g_Config.sArmsReplace);

//项链替换
  if Config.ReadString('Setup', 'NecklaceReplace', '') = '' then
    Config.WriteString('Setup', 'NecklaceReplace', g_Config.sNecklaceReplace);
  g_Config.sNecklaceReplace := Config.ReadString('Setup', 'NecklaceReplace', g_Config.sNecklaceReplace);

//手镯替换
  if Config.ReadString('Setup', 'BraceletReplace', '') = '' then
    Config.WriteString('Setup', 'BraceletReplace', g_Config.sBraceletReplace);
  g_Config.sBraceletReplace := Config.ReadString('Setup', 'BraceletReplace', g_Config.sBraceletReplace);

//戒指替换
  if Config.ReadString('Setup', 'RingReplace', '') = '' then
    Config.WriteString('Setup', 'RingReplace', g_Config.sRingReplace);
  g_Config.sRingReplace := Config.ReadString('Setup', 'RingReplace', g_Config.sRingReplace);

//头盔替换
  if Config.ReadString('Setup', 'HelmeReplace', '') = '' then
    Config.WriteString('Setup', 'HelmeReplace', g_Config.sHelmeReplace);
  g_Config.sHelmeReplace := Config.ReadString('Setup', 'HelmeReplace', g_Config.sHelmeReplace);

//腰带替换
  if Config.ReadString('Setup', 'BeltReplace', '') = '' then
    Config.WriteString('Setup', 'BeltReplace', g_Config.sBeltReplace);
  g_Config.sBeltReplace := Config.ReadString('Setup', 'BeltReplace', g_Config.sBeltReplace);

//鞋子替换
  if Config.ReadString('Setup', 'ShoesReplace', '') = '' then
    Config.WriteString('Setup', 'ShoesReplace', g_Config.sShoesReplace);
  g_Config.sShoesReplace := Config.ReadString('Setup', 'ShoesReplace', g_Config.sShoesReplace);

//斗笠替换
  if Config.ReadString('Setup', 'HatsReplace', '') = '' then
    Config.WriteString('Setup', 'HatsReplace', g_Config.sHatsReplace);
  g_Config.sHatsReplace := Config.ReadString('Setup', 'HatsReplace', g_Config.sHatsReplace);

//面巾替换
  if Config.ReadString('Setup', 'WashclothReplace', '') = '' then
    Config.WriteString('Setup', 'WashclothReplace', g_Config.sWashclothReplace);
  g_Config.sWashclothReplace := Config.ReadString('Setup', 'WashclothReplace', g_Config.sWashclothReplace);

//勋章替换
  if Config.ReadString('Setup', 'MedalReplace', '') = '' then
    Config.WriteString('Setup', 'MedalReplace', g_Config.sMedalReplace);
  g_Config.sMedalReplace := Config.ReadString('Setup', 'MedalReplace', g_Config.sMedalReplace);
{$IFEND}
  if Config.ReadInteger('Setup', 'PullPlayObject', -1) < 0 then
    Config.WriteBool('Setup', 'PullPlayObject', g_Config.boPullPlayObject);
  g_Config.boPullPlayObject := Config.ReadBool('Setup', 'PullPlayObject', g_Config.boPullPlayObject);

  if Config.ReadInteger('Setup', 'GroupMbAttackPlayObject', -1) < 0 then
    Config.WriteBool('Setup', 'GroupMbAttackPlayObject', g_Config.boGroupMbAttackPlayObject);
  g_Config.boGroupMbAttackPlayObject := Config.ReadBool('Setup', 'GroupMbAttackPlayObject', g_Config.boGroupMbAttackPlayObject);

  if Config.ReadInteger('Setup', 'GroupMbAttackPlayMon', -1) < 0 then
    Config.WriteBool('Setup', 'GroupMbAttackPlayMon', g_Config.boGroupMbAttackPlayMon);
  g_Config.boGroupMbAttackPlayMon := Config.ReadBool('Setup', 'GroupMbAttackPlayMon', g_Config.boGroupMbAttackPlayMon);

  if Config.ReadInteger('Setup', 'DamageMP', -1) < 0 then
    Config.WriteBool('Setup', 'DamageMP', g_Config.boPlayObjectReduceMP);
  g_Config.boPlayObjectReduceMP := Config.ReadBool('Setup', 'DamageMP', g_Config.boPlayObjectReduceMP);

  if Config.ReadInteger('Setup', 'GroupMbAttackSlave', -1) < 0 then
    Config.WriteBool('Setup', 'GroupMbAttackSlave', g_Config.boGroupMbAttackSlave);
  g_Config.boGroupMbAttackSlave := Config.ReadBool('Setup', 'GroupMbAttackSlave', g_Config.boGroupMbAttackSlave);

  nLoadInteger := Config.ReadInteger('Setup', 'BigStorageLimitCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BigStorageLimitCount', g_Config.nBigStorageLimitCount)
  else g_Config.nBigStorageLimitCount := nLoadInteger;

  if Config.ReadInteger('Setup', 'DropGoldToPlayBag', -1) < 0 then
    Config.WriteBool('Setup', 'DropGoldToPlayBag', g_Config.boDropGoldToPlayBag);
  g_Config.boDropGoldToPlayBag := Config.ReadBool('Setup', 'DropGoldToPlayBag', g_Config.boDropGoldToPlayBag);

  if Config.ReadInteger('Setup', 'ChangeUseItemNameByPlayName', -1) < 0 then
    Config.WriteBool('Setup', 'ChangeUseItemNameByPlayName', g_Config.boChangeUseItemNameByPlayName);
  g_Config.boChangeUseItemNameByPlayName := Config.ReadBool('Setup', 'ChangeUseItemNameByPlayName', g_Config.boChangeUseItemNameByPlayName);

  if Config.ReadString('Setup', 'ChangeUseItemName', '') = '' then
    Config.WriteString('Setup', 'ChangeUseItemName', g_Config.sChangeUseItemName);
  g_Config.sChangeUseItemName := Config.ReadString('Setup', 'ChangeUseItemName', g_Config.sChangeUseItemName);

  nLoadInteger := Config.ReadInteger('Setup', 'Magic55UseTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Magic55UseTime', g_Config.nKill55UseTime)
  else g_Config.nKill55UseTime := nLoadInteger;

//开天斩使用间隔 20080204
  nLoadInteger := Config.ReadInteger('Setup', 'Magic43UseTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Magic43UseTime', g_Config.nKill43UseTime)
  else g_Config.nKill43UseTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagicDedingUseTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagicDedingUseTime', g_Config.nDedingUseTime)
  else g_Config.nDedingUseTime := nLoadInteger;

//无极真气使用间隔 20080603
  nLoadInteger := Config.ReadInteger('Setup', 'AbilityUpTick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AbilityUpTick', g_Config.nAbilityUpTick)
  else g_Config.nAbilityUpTick := nLoadInteger;

//无极真气使用时长模式 20081109
  if Config.ReadInteger('Setup', 'AbilityUpFixMode', -1) < 0 then
    Config.WriteBool('Setup', 'AbilityUpFixMode', g_Config.boAbilityUpFixMode);
  g_Config.boAbilityUpFixMode := Config.ReadBool('Setup', 'AbilityUpFixMode', g_Config.boAbilityUpFixMode);

//无极真气是否同时增加上下限
  if Config.ReadInteger('Setup', 'AbilityAddMode', -1) < 0 then
    Config.WriteBool('Setup', 'AbilityAddMode', g_Config.boAbilityAddMode);
  g_Config.boAbilityAddMode := Config.ReadBool('Setup', 'AbilityAddMode', g_Config.boAbilityAddMode);

//无极真气不考虑套装所增加的道术
  if Config.ReadInteger('Setup', 'DecSuitItemMode', -1) < 0 then
    Config.WriteBool('Setup', 'DecSuitItemMode', g_Config.boDecSuitItemMode);
  g_Config.boDecSuitItemMode := Config.ReadBool('Setup', 'DecSuitItemMode', g_Config.boDecSuitItemMode);

//无极真气不考虑心法所增加的道术 By TasNat at: 2012-03-06 16:18:55
  if Config.ReadInteger('Setup', 'DecMag105SC', -1) < 0 then
    Config.WriteBool('Setup', 'DecMag105SC', g_Config.boDecMag105SC);
  g_Config.boDecMag105SC := Config.ReadBool('Setup', 'DecMag105SC', g_Config.boDecMag105SC);

//无极真气使用固定时长 20081109
  nLoadInteger := Config.ReadInteger('Setup', 'AbilityUpFixUseTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AbilityUpFixUseTime', g_Config.nAbilityUpFixUseTime)
  else g_Config.nAbilityUpFixUseTime := nLoadInteger;

//无极真气使用时长 20080603
  nLoadInteger := Config.ReadInteger('Setup', 'AbilityUpUseTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AbilityUpUseTime', g_Config.nAbilityUpUseTime)
  else g_Config.nAbilityUpUseTime := nLoadInteger;

//先天元力失效酒量下限比例 20080626
  nLoadInteger := Config.ReadInteger('Setup', 'MinDrinkValue67', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MinDrinkValue67', g_Config.nMinDrinkValue67)
  else g_Config.nMinDrinkValue67 := nLoadInteger;

//酒气护体失效酒量下限比例 20080626
  nLoadInteger := Config.ReadInteger('Setup', 'MinDrinkValue68', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MinDrinkValue68', g_Config.nMinDrinkValue68)
  else g_Config.nMinDrinkValue68 := nLoadInteger;

//酒气护体使用间隔 20080625
  nLoadInteger := Config.ReadInteger('Setup', 'HPUpTick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HPUpTick', g_Config.nHPUpTick)
  else g_Config.nHPUpTick := nLoadInteger;

//酒气护体增加使用时长 20080625
  nLoadInteger := Config.ReadInteger('Setup', 'HPUpUseTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HPUpUseTime', g_Config.nHPUpUseTime)
  else g_Config.nHPUpUseTime := nLoadInteger;

//押镖怪遇目标挡路自动转向
  if Config.ReadInteger('Setup', 'Mon109AutoTrun', -1) < 0 then
    Config.WriteBool('Setup', 'Mon109AutoTrun', g_Config.boMon109AutoTrun);
  g_Config.boMon109AutoTrun := Config.ReadBool('Setup', 'Mon109AutoTrun', g_Config.boMon109AutoTrun);

//押镖怪提示开启
  if Config.ReadInteger('Setup', 'Mon109ShowHint', -1) < 0 then
    Config.WriteBool('Setup', 'Mon109ShowHint', g_Config.boMon109ShowHint);
  g_Config.boMon109ShowHint := Config.ReadBool('Setup', 'Mon109ShowHint', g_Config.boMon109ShowHint);

//押镖怪提示时长
  nLoadInteger := Config.ReadInteger('Setup', 'ShowHintMon109Tick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ShowHintMon109Tick', g_Config.nShowHintMon109)
  else g_Config.nShowHintMon109 := nLoadInteger;

//限时绑定时长
  nLoadInteger := Config.ReadInteger('Setup', 'LimitItemTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'LimitItemTime', g_Config.nLimitItemTime)
  else g_Config.nLimitItemTime := nLoadInteger;

  if Config.ReadInteger('Setup', 'DedingAllowPK', -1) < 0 then
    Config.WriteBool('Setup', 'DedingAllowPK', g_Config.boDedingAllowPK);
  g_Config.boDedingAllowPK := Config.ReadBool('Setup', 'DedingAllowPK', g_Config.boDedingAllowPK);

  {分身术设置}
  nLoadInteger := Config.ReadInteger('Setup', 'MakeSelfTick', -1);  //分身使用时长 20080404
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MakeSelfTick', g_Config.nMakeSelfTick)
  else g_Config.nMakeSelfTick := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'CopyHumanTick', -1);  //召唤分身的间隔 20080204
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'CopyHumanTick', g_Config.nCopyHumanTick)
  else g_Config.nCopyHumanTick := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'CopyHumanBagCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'CopyHumanBagCount', g_Config.nCopyHumanBagCount)
  else g_Config.nCopyHumanBagCount := nLoadInteger;

//分身名字颜色 20080404
  nLoadInteger := Config.ReadInteger('Setup', 'CopyHumNameColor', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'CopyHumNameColor', g_Config.nCopyHumNameColor)
  else g_Config.nCopyHumNameColor := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'AllowCopyHumanCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AllowCopyHumanCount', g_Config.nAllowCopyHumanCount)
  else g_Config.nAllowCopyHumanCount := nLoadInteger;

//分身与主体攻击同一目标 20100408
  if Config.ReadInteger('Setup', 'AttackMasterTarget', -1) < 0 then
    Config.WriteBool('Setup', 'AttackMasterTarget', g_Config.boAttackMasterTarget);
  g_Config.boAttackMasterTarget := Config.ReadBool('Setup', 'AttackMasterTarget', g_Config.boAttackMasterTarget);

  if Config.ReadInteger('Setup', 'AddMasterName', -1) < 0 then
    Config.WriteBool('Setup', 'AddMasterName', g_Config.boAddMasterName);
  g_Config.boAddMasterName := Config.ReadBool('Setup', 'AddMasterName', g_Config.boAddMasterName);

  {if Config.ReadString('Setup', 'CopyHumName', '') = '' then
    Config.WriteString('Setup', 'CopyHumName', g_Config.sCopyHumName); }
  g_Config.sCopyHumName := Config.ReadString('Setup', 'CopyHumName', g_Config.sCopyHumName);

  nLoadInteger := Config.ReadInteger('Setup', 'CopyHumAddHPRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'CopyHumAddHPRate', g_Config.nCopyHumAddHPRate)
  else g_Config.nCopyHumAddHPRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'CopyHumAddMPRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'CopyHumAddMPRate', g_Config.nCopyHumAddMPRate)
  else g_Config.nCopyHumAddMPRate := nLoadInteger;

  if Config.ReadString('Setup', 'CopyHumBagItems1', '') = '' then
    Config.WriteString('Setup', 'CopyHumBagItems1', g_Config.sCopyHumBagItems1);
  g_Config.sCopyHumBagItems1 := Config.ReadString('Setup', 'CopyHumBagItems1', g_Config.sCopyHumBagItems1);

  if Config.ReadString('Setup', 'CopyHumBagItems2', '') = '' then
    Config.WriteString('Setup', 'CopyHumBagItems2', g_Config.sCopyHumBagItems2);
  g_Config.sCopyHumBagItems2 := Config.ReadString('Setup', 'CopyHumBagItems1', g_Config.sCopyHumBagItems2);

  if Config.ReadString('Setup', 'CopyHumBagItems3', '') = '' then
    Config.WriteString('Setup', 'CopyHumBagItems3', g_Config.sCopyHumBagItems3);
  g_Config.sCopyHumBagItems3 := Config.ReadString('Setup', 'CopyHumBagItems3', g_Config.sCopyHumBagItems3);

  if Config.ReadInteger('Setup', 'AllowGuardAttack', -1) < 0 then
    Config.WriteBool('Setup', 'AllowGuardAttack', g_Config.boAllowGuardAttack);
  g_Config.boAllowGuardAttack := Config.ReadBool('Setup', 'AllowGuardAttack', g_Config.boAllowGuardAttack);

  nLoadInteger := Config.ReadInteger('Setup', 'WarrorAttackTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WarrorAttackTime', g_Config.dwWarrorAttackTime)
  else g_Config.dwWarrorAttackTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WizardAttackTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WizardAttackTime', g_Config.dwWizardAttackTime)
  else g_Config.dwWizardAttackTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'TaoistAttackTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'TaoistAttackTime', g_Config.dwTaoistAttackTime)
  else g_Config.dwTaoistAttackTime := nLoadInteger;

  if Config.ReadInteger('Setup', 'AllowReCallMobOtherHum', -1) < 0 then
    Config.WriteBool('Setup', 'AllowReCallMobOtherHum', g_Config.boAllowReCallMobOtherHum);
  g_Config.boAllowReCallMobOtherHum := Config.ReadBool('Setup', 'AllowReCallMobOtherHum', g_Config.boAllowReCallMobOtherHum);

  if Config.ReadInteger('Setup', 'NeedLevelHighTarget', -1) < 0 then
    Config.WriteBool('Setup', 'NeedLevelHighTarget', g_Config.boNeedLevelHighTarget);
  g_Config.boNeedLevelHighTarget := Config.ReadBool('Setup', 'NeedLevelHighTarget', g_Config.boNeedLevelHighTarget);

//-----------------数据读取和保存等待时间 --------------------------------------
  if Config.ReadInteger('Setup', 'PullCrossInSafeZone', -1) < 0 then
    Config.WriteBool('Setup', 'PullCrossInSafeZone', g_Config.boPullCrossInSafeZone);
  g_Config.boPullCrossInSafeZone := Config.ReadBool('Setup', 'PullCrossInSafeZone', g_Config.boPullCrossInSafeZone);

  if Config.ReadInteger('Exp', 'HighLevelGroupFixExp', -1) < 0 then
    Config.WriteBool('Exp', 'HighLevelGroupFixExp', g_Config.boHighLevelGroupFixExp);
  g_Config.boHighLevelGroupFixExp := Config.ReadBool('Exp', 'HighLevelGroupFixExp', g_Config.boHighLevelGroupFixExp);

  if Config.ReadInteger('Setup', 'StartMapEvent', -1) < 0 then
    Config.WriteBool('Setup', 'StartMapEvent', g_Config.boStartMapEvent);
  g_Config.boStartMapEvent := Config.ReadBool('Setup', 'StartMapEvent', g_Config.boStartMapEvent);

//是否登陆时初始复活计数 20100704
  if Config.ReadInteger('Setup', 'StartRevivalTick', -1) < 0 then
    Config.WriteBool('Setup', 'StartRevivalTick', g_Config.boStartRevivalTick);
  g_Config.boStartRevivalTick := Config.ReadBool('Setup', 'StartRevivalTick', g_Config.boStartRevivalTick);

//是否登陆时初始重生戒指计数 20100720
  if Config.ReadInteger('Setup', 'StartRebirthTick', -1) < 0 then
    Config.WriteBool('Setup', 'StartRebirthTick', g_Config.boStartRebirthTick);
  g_Config.boStartRebirthTick := Config.ReadBool('Setup', 'StartRebirthTick', g_Config.boStartRebirthTick);

//攻城期复活传送回攻方复活点
  if Config.ReadInteger('Setup', 'UnderWarMove', -1) < 0 then
    Config.WriteBool('Setup', 'UnderWarMove', g_Config.boUnderWarMove);
  g_Config.boUnderWarMove := Config.ReadBool('Setup', 'UnderWarMove', g_Config.boUnderWarMove);

//是否使用新算法计算血魄技能威力 20100704
  if Config.ReadInteger('Setup', 'UseNewAttackFFT_96', -1) < 0 then
    Config.WriteBool('Setup', 'UseNewAttackFFT_96', g_Config.boUseNewAttackFFT_96);
  g_Config.boUseNewAttackFFT_96 := Config.ReadBool('Setup', 'UseNewAttackFFT_96', g_Config.boUseNewAttackFFT_96);

//带上斗笠是否显示神秘人 20080424
  if Config.ReadInteger('Setup', 'UnKnowHum', -1) < 0 then
    Config.WriteBool('Setup', 'UnKnowHum', g_Config.boUnKnowHum);
  g_Config.boUnKnowHum := Config.ReadBool('Setup', 'UnKnowHum', g_Config.boUnKnowHum);
//带上斗笠是否显示神秘人 20080424
  if Config.ReadInteger('Setup', 'OneRingXiXue', -1) < 0 then
    Config.WriteBool('Setup', 'OneRingXiXue', g_Config.boOneRingXiXue);
  g_Config.boOneRingXiXue := Config.ReadBool('Setup', 'OneRingXiXue', g_Config.boOneRingXiXue);
//是否保存双倍经验时间 20080412
  if Config.ReadInteger('Exp', 'SaveExpRate', -1) < 0 then
    Config.WriteBool('Exp', 'SaveExpRate', g_Config.boSaveExpRate);
  g_Config.boSaveExpRate := Config.ReadBool('Exp', 'SaveExpRate', g_Config.boSaveExpRate);
//是否保存真视经验时间 20090213
  if Config.ReadInteger('Exp', 'SaveHighLevelKillMonFixExp', -1) < 0 then
    Config.WriteBool('Exp', 'SaveHighLevelKillMonFixExp', g_Config.boSaveHighLevelKillMonFixExp);
  g_Config.boSaveHighLevelKillMonFixExp := Config.ReadBool('Exp', 'SaveHighLevelKillMonFixExp', g_Config.boSaveHighLevelKillMonFixExp);

  //是否使用连续升级
  if Config.ReadInteger('Exp', 'ContinuousUpLevel', -1) < 0 then
    Config.WriteBool('Exp', 'ContinuousUpLevel', g_Config.boContinuousUpLevel);
  g_Config.boContinuousUpLevel := Config.ReadBool('Exp', 'ContinuousUpLevel', g_Config.boContinuousUpLevel);

  nLoadInteger := Config.ReadInteger('Exp', 'LimitExpLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Exp', 'LimitExpLevel', g_Config.nLimitExpLevel)
  else g_Config.nLimitExpLevel := nLoadInteger;

{$IF HEROVERSION = 1}
//限制英雄等级 20110113
  nLoadInteger := Config.ReadInteger('Exp', 'LimitExpLevelHero', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Exp', 'LimitExpLevelHero', g_Config.nLimitExpLevelHero)
  else g_Config.nLimitExpLevelHero := nLoadInteger;
{$IFEND}
  nLoadInteger := Config.ReadInteger('Exp', 'LimitExpValue', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Exp', 'LimitExpValue', g_Config.nLimitExpValue)
  else g_Config.nLimitExpValue := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'FireDelayTimeRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'FireDelayTimeRate', g_Config.nFireDelayTimeRate)
  else g_Config.nFireDelayTimeRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'FirePowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'FirePowerRate', g_Config.nFirePowerRate)
  else g_Config.nFirePowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'FireMaxTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'FireMaxTime', g_Config.nFireMaxTime)
  else g_Config.nFireMaxTime := nLoadInteger;

  if Config.ReadInteger('Setup', 'ChangeMapFireExtinguish', -1) < 0 then
    Config.WriteBool('Setup', 'ChangeMapFireExtinguish', g_Config.boChangeMapFireExtinguish);
  g_Config.boChangeMapFireExtinguish := Config.ReadBool('Setup', 'ChangeMapFireExtinguish', g_Config.boChangeMapFireExtinguish);

  if Config.ReadInteger('Setup', 'MagFirNoneSSMagic', -1) < 0 then
    Config.WriteBool('Setup', 'MagFirNoneSSMagic', g_Config.boMagFirNoneSSMagic);
  g_Config.boMagFirNoneSSMagic := Config.ReadBool('Setup', 'MagFirNoneSSMagic', g_Config.boMagFirNoneSSMagic);

  nLoadInteger := Config.ReadInteger('Setup', 'DidingPowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DidingPowerRate', g_Config.nDidingPowerRate)
  else g_Config.nDidingPowerRate := nLoadInteger;

{$IF M2Version <> 2}
  //是否开放英雄系统
  if Config.ReadInteger('Setup', 'UseCanHero', -1) < 0 then
    Config.WriteBool('Setup', 'UseCanHero', g_Config.boUseCanHero);
  g_Config.boUseCanHero := Config.ReadBool('Setup', 'UseCanHero', g_Config.boUseCanHero);

  if Config.ReadInteger('Setup', 'UseCanDivision', -1) < 0 then
    Config.WriteBool('Setup', 'UseCanDivision', g_Config.boUseCanDivision);
  g_Config.boUseCanDivision := Config.ReadBool('Setup', 'UseCanDivision', g_Config.boUseCanDivision);
{$ELSE}
  g_Config.boUseCanHero := False;
  g_Config.boUseCanDivision := False;
{$IFEND}

//道法固定的吸伤比例 20090808
  nLoadInteger := Config.ReadInteger('Setup', 'BatterDecDamageRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BatterDecDamageRate', g_Config.dwBatterDecDamageRate)
  else g_Config.dwBatterDecDamageRate := nLoadInteger;

//道法随机的吸伤比例 20090808
  nLoadInteger := Config.ReadInteger('Setup', 'BatterRandDecDamageRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BatterRandDecDamageRate', g_Config.dwBatterRandDecDamageRate)
  else g_Config.dwBatterRandDecDamageRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'DoCallTrollTick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DoCallTrollTick', g_Config.dwDoCallTrollTick)
  else g_Config.dwDoCallTrollTick := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'DoCallTrollTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DoCallTrollTime', g_Config.dwDoCallTrollTime)
  else g_Config.dwDoCallTrollTime := nLoadInteger;

//血魄一击(法)范围
  nLoadInteger := Config.ReadInteger('Setup', 'Explosion_97Range', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Explosion_97Range', g_Config.nExplosion_97Range)
  else g_Config.nExplosion_97Range := nLoadInteger;

//血魄一击(道)范围
  nLoadInteger := Config.ReadInteger('Setup', 'Explosion_98Range', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Explosion_98Range', g_Config.nExplosion_98Range)
  else g_Config.nExplosion_98Range := nLoadInteger;

//使用血魄一击间隔
  nLoadInteger := Config.ReadInteger('Setup', 'UseBloodSoulTick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UseBloodSoulTick', g_Config.dwUseBloodSoulTick)
  else g_Config.dwUseBloodSoulTick := nLoadInteger;
//血魄一击暴击倍数
  nLoadInteger := Config.ReadInteger('Setup', 'BloodSoulHitRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BloodSoulHitRate', g_Config.nBloodSoulHitRate)
  else g_Config.nBloodSoulHitRate := nLoadInteger;
//血魄一击暴击机率
  nLoadInteger := Config.ReadInteger('Setup', 'BloodSoulRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BloodSoulRate', g_Config.dwBloodSoulRate)
  else g_Config.dwBloodSoulRate := nLoadInteger;
//无内力值减血比例
  nLoadInteger := Config.ReadInteger('Setup', 'NotGNDecHPRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NotGNDecHPRate', g_Config.dwNotGNDecHPRate)
  else g_Config.dwNotGNDecHPRate := nLoadInteger;

//使用连击间隔 20090618
  nLoadInteger := Config.ReadInteger('Setup', 'UseBatterTick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UseBatterTick', g_Config.dwUseBatterTick)
  else g_Config.dwUseBatterTick := nLoadInteger;
//暴击伤害倍数  20090618
  for I := Low(g_Config.nStormsHitRate) to High(g_Config.nStormsHitRate) do begin
    if Config.ReadInteger('Setup', 'StormsHitRate' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'StormsHitRate' + IntToStr(I), g_Config.nStormsHitRate[I]);
    g_Config.nStormsHitRate[I] := Config.ReadInteger('Setup', 'StormsHitRate' + IntToStr(I), g_Config.nStormsHitRate[I]);
  end;
//暴击率 20090619
  for I := Low(g_Config.nStormsHitAppearRate) to High(g_Config.nStormsHitAppearRate) do begin
    if Config.ReadInteger('Setup', 'StormsHitAppearRate' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'StormsHitAppearRate' + IntToStr(I), g_Config.nStormsHitAppearRate[I]);
    g_Config.nStormsHitAppearRate[I] := Config.ReadInteger('Setup', 'StormsHitAppearRate' + IntToStr(I), g_Config.nStormsHitAppearRate[I]);
  end;
  
//断岳斩攻击范围 20090706
  nLoadInteger := Config.ReadInteger('Setup', 'BatterSkillFireRange_82', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BatterSkillFireRange_82', g_Config.nBatterSkillFireRange_82)
  else g_Config.nBatterSkillFireRange_82 := nLoadInteger;

//横扫千军攻击范围 20090704
  nLoadInteger := Config.ReadInteger('Setup', 'BatterSkillFireRange_85', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BatterSkillFireRange_85', g_Config.nBatterSkillFireRange_85)
  else g_Config.nBatterSkillFireRange_85 := nLoadInteger;

//冰天雪地攻击范围 20090626
  nLoadInteger := Config.ReadInteger('Setup', 'BatterSkillFireRange_86', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BatterSkillFireRange_86', g_Config.nBatterSkillFireRange_86)
  else g_Config.nBatterSkillFireRange_86 := nLoadInteger;

//冰天雪地持续掉血点数 20090727
  nLoadInteger := Config.ReadInteger('Setup', 'BatterSkillPoinson_86', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BatterSkillPoinson_86', g_Config.nBatterSkillPoinson_86)
  else g_Config.nBatterSkillPoinson_86 := nLoadInteger;

//万剑归宗攻击范围 20090626
  nLoadInteger := Config.ReadInteger('Setup', 'BatterSkillFireRange_87', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BatterSkillFireRange_87', g_Config.nBatterSkillFireRange_87)
  else g_Config.nBatterSkillFireRange_87 := nLoadInteger;

//万剑归宗持续掉血点数 20090727
  nLoadInteger := Config.ReadInteger('Setup', 'BatterSkillPoinson_87', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BatterSkillPoinson_87', g_Config.nBatterSkillPoinson_87)
  else g_Config.nBatterSkillPoinson_87 := nLoadInteger;

//万剑归宗中毒时长
  nLoadInteger := Config.ReadInteger('Setup', 'PoisonLength_87', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PoisonLength_87', g_Config.nPoisonLength_87)
  else g_Config.nPoisonLength_87 := nLoadInteger;
//------------------------------------------------------------------------------
//移行换位使用间隔 20080616
  nLoadInteger := Config.ReadInteger('Setup', 'MagChangXYTick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagChangXYTick', g_Config.dwMagChangXYTick)
  else g_Config.dwMagChangXYTick := nLoadInteger;

//护体神盾相关设置参数 20080108
  nLoadInteger := Config.ReadInteger('Setup', 'ProtectionRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ProtectionRate', g_Config.nProtectionRate)
  else g_Config.nProtectionRate := nLoadInteger;

//护体神盾生效机率 20080929
  nLoadInteger := Config.ReadInteger('Setup', 'ProtectionOKRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ProtectionOKRate', g_Config.nProtectionOKRate)
  else g_Config.nProtectionOKRate := nLoadInteger;

//使用内功物品按等级增加额外经验
  nLoadInteger := Config.ReadInteger('Setup', 'UseNGItemIncExp', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'UseNGItemIncExp', g_Config.boUseNGItemIncExp)
  else g_Config.boUseNGItemIncExp := not (nLoadInteger = 0);

//灵符火符智能锁定 20080418
  nLoadInteger := Config.ReadInteger('Setup', 'AutoCanHit', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'AutoCanHit', g_Config.boAutoCanHit)
  else g_Config.boAutoCanHit := not (nLoadInteger = 0);

//噬血术智能锁定 20090521
  nLoadInteger := Config.ReadInteger('Setup', 'AutoCanHit59', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'AutoCanHit59', g_Config.boAutoCanHit59)
  else g_Config.boAutoCanHit59 := not (nLoadInteger = 0);

//灭天火智能锁定
  nLoadInteger := Config.ReadInteger('Setup', 'AutoCanHit45', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'AutoCanHit45', g_Config.boAutoCanHit45)
  else g_Config.boAutoCanHit45 := not (nLoadInteger = 0);

//宝宝是否飞到主人身边 20080713
  nLoadInteger := Config.ReadInteger('Setup', 'SlaveMoveMaster', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'SlaveMoveMaster', g_Config.boSlaveMoveMaster)
  else g_Config.boSlaveMoveMaster := not (nLoadInteger = 0);

  nLoadInteger := Config.ReadInteger('Setup', 'MagLock', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'MagLock', g_Config.boMagLock)
  else g_Config.boMagLock := not (nLoadInteger = 0);
//------------------------------------------------------------------------------
{$IF M2Version <> 2}
  for I := 0 to 16 do begin
    //强化技能威力比例
    if Config.ReadInteger('Setup', 'SKILLStrongRate' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILLStrongRate' + IntToStr(I), g_Config.nSKILLStrongRate[I]);
    g_Config.nSKILLStrongRate[I] := Config.ReadInteger('Setup', 'SKILLStrongRate' + IntToStr(I), g_Config.nSKILLStrongRate[I]);

    if I < 9 then begin//0..8
      //升级传承心法所需要的等级条件
      if Config.ReadInteger('Setup', 'UpHeartNeedLevel' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'UpHeartNeedLevel' + IntToStr(I), g_Config.nUpHeartNeedLevel[I]);
      g_Config.nUpHeartNeedLevel[I] := Config.ReadInteger('Setup', 'UpHeartNeedLevel' + IntToStr(I), g_Config.nUpHeartNeedLevel[I]);

      if Config.ReadInteger('Setup', 'SKILL_7Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_7Strong' + IntToStr(I), g_Config.nSKILL_7Strong[I]);
      g_Config.nSKILL_7Strong[I] := Config.ReadInteger('Setup', 'SKILL_7Strong' + IntToStr(I), g_Config.nSKILL_7Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_90Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_90Strong' + IntToStr(I), g_Config.nSKILL_90Strong[I]);
      g_Config.nSKILL_90Strong[I] := Config.ReadInteger('Setup', 'SKILL_90Strong' + IntToStr(I), g_Config.nSKILL_90Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_89Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_89Strong' + IntToStr(I), g_Config.nSKILL_89Strong[I]);
      g_Config.nSKILL_89Strong[I] := Config.ReadInteger('Setup', 'SKILL_89Strong' + IntToStr(I), g_Config.nSKILL_89Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_26Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_26Strong' + IntToStr(I), g_Config.nSKILL_26Strong[I]);
      g_Config.nSKILL_26Strong[I] := Config.ReadInteger('Setup', 'SKILL_26Strong' + IntToStr(I), g_Config.nSKILL_26Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_74Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_74Strong' + IntToStr(I), g_Config.nSKILL_74Strong[I]);
      g_Config.nSKILL_74Strong[I] := Config.ReadInteger('Setup', 'SKILL_74Strong' + IntToStr(I), g_Config.nSKILL_74Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_91Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_91Strong' + IntToStr(I), g_Config.nSKILL_91Strong[I]);
      g_Config.nSKILL_91Strong[I] := Config.ReadInteger('Setup', 'SKILL_91Strong' + IntToStr(I), g_Config.nSKILL_91Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_10Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_10Strong' + IntToStr(I), g_Config.nSKILL_10Strong[I]);
      g_Config.nSKILL_10Strong[I] := Config.ReadInteger('Setup', 'SKILL_10Strong' + IntToStr(I), g_Config.nSKILL_10Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_22Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_22Strong' + IntToStr(I), g_Config.nSKILL_22Strong[I]);
      g_Config.nSKILL_22Strong[I] := Config.ReadInteger('Setup', 'SKILL_22Strong' + IntToStr(I), g_Config.nSKILL_22Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_45Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_45Strong' + IntToStr(I), g_Config.nSKILL_45Strong[I]);
      g_Config.nSKILL_45Strong[I] := Config.ReadInteger('Setup', 'SKILL_45Strong' + IntToStr(I), g_Config.nSKILL_45Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_92Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_92Strong' + IntToStr(I), g_Config.nSKILL_92Strong[I]);
      g_Config.nSKILL_92Strong[I] := Config.ReadInteger('Setup', 'SKILL_92Strong' + IntToStr(I), g_Config.nSKILL_92Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_93Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_93Strong' + IntToStr(I), g_Config.nSKILL_93Strong[I]);
      g_Config.nSKILL_93Strong[I] := Config.ReadInteger('Setup', 'SKILL_93Strong' + IntToStr(I), g_Config.nSKILL_93Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_13Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_13Strong' + IntToStr(I), g_Config.nSKILL_13Strong[I]);
      g_Config.nSKILL_13Strong[I] := Config.ReadInteger('Setup', 'SKILL_13Strong' + IntToStr(I), g_Config.nSKILL_13Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_17Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_17Strong' + IntToStr(I), g_Config.nSKILL_17Strong[I]);
      g_Config.nSKILL_17Strong[I] := Config.ReadInteger('Setup', 'SKILL_17Strong' + IntToStr(I), g_Config.nSKILL_17Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_71Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_71Strong' + IntToStr(I), g_Config.nSKILL_71Strong[I]);
      g_Config.nSKILL_71Strong[I] := Config.ReadInteger('Setup', 'SKILL_71Strong' + IntToStr(I), g_Config.nSKILL_71Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_94Strong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_94Strong' + IntToStr(I), g_Config.nSKILL_94Strong[I]);
      g_Config.nSKILL_94Strong[I] := Config.ReadInteger('Setup', 'SKILL_94Strong' + IntToStr(I), g_Config.nSKILL_94Strong[I]);

      if Config.ReadInteger('Setup', 'SKILL_FIREBOOMStrong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_FIREBOOMStrong' + IntToStr(I), g_Config.nSKILL_FIREBOOMStrong[I]);
      g_Config.nSKILL_FIREBOOMStrong[I] := Config.ReadInteger('Setup', 'SKILL_FIREBOOMStrong' + IntToStr(I), g_Config.nSKILL_FIREBOOMStrong[I]);

      if Config.ReadInteger('Setup', 'SKILL_SNOWWINDStrong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_SNOWWINDStrong' + IntToStr(I), g_Config.nSKILL_SNOWWINDStrong[I]);
      g_Config.nSKILL_SNOWWINDStrong[I] := Config.ReadInteger('Setup', 'SKILL_SNOWWINDStrong' + IntToStr(I), g_Config.nSKILL_SNOWWINDStrong[I]);

      if Config.ReadInteger('Setup', 'SKILL_HANGMAJINBUBStrong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_HANGMAJINBUBStrong' + IntToStr(I), g_Config.nSKILL_HANGMAJINBUBStrong[I]);
      g_Config.nSKILL_HANGMAJINBUBStrong[I] := Config.ReadInteger('Setup', 'SKILL_HANGMAJINBUBStrong' + IntToStr(I), g_Config.nSKILL_HANGMAJINBUBStrong[I]);

      if Config.ReadInteger('Setup', 'SKILL_DEJIWONHOStrong' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_DEJIWONHOStrong' + IntToStr(I), g_Config.nSKILL_DEJIWONHOStrong[I]);
      g_Config.nSKILL_DEJIWONHOStrong[I] := Config.ReadInteger('Setup', 'SKILL_DEJIWONHOStrong' + IntToStr(I), g_Config.nSKILL_DEJIWONHOStrong[I]);

      //纵横剑术升级所需心法等级
      if Config.ReadInteger('Setup', 'SKILL_107NeedHeart' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_107NeedHeart' + IntToStr(I), g_Config.nSKILL_107NeedHeart[I]);
      g_Config.nSKILL_107NeedHeart[I] := Config.ReadInteger('Setup', 'SKILL_107NeedHeart' + IntToStr(I), g_Config.nSKILL_107NeedHeart[I]);

      //冰霜雪雨升级所需心法等级
      if Config.ReadInteger('Setup', 'SKILL_108NeedHeart' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_108NeedHeart' + IntToStr(I), g_Config.nSKILL_108NeedHeart[I]);
      g_Config.nSKILL_108NeedHeart[I] := Config.ReadInteger('Setup', 'SKILL_108NeedHeart' + IntToStr(I), g_Config.nSKILL_108NeedHeart[I]);

      //裂神符升级所需心法等级
      if Config.ReadInteger('Setup', 'SKILL_109NeedHeart' + IntToStr(I), -1) < 0 then
        Config.WriteInteger('Setup', 'SKILL_109NeedHeart' + IntToStr(I), g_Config.nSKILL_109NeedHeart[I]);
      g_Config.nSKILL_109NeedHeart[I] := Config.ReadInteger('Setup', 'SKILL_109NeedHeart' + IntToStr(I), g_Config.nSKILL_109NeedHeart[I]);
    end;
  end;
//弟子心法激活可用时长
  nLoadInteger := Config.ReadInteger('Setup', 'MemberUseHeartTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MemberUseHeartTime', g_Config.nMemberUseHeartTime)
  else g_Config.nMemberUseHeartTime := nLoadInteger;

//激活弟子心法(255为不激活)
  nLoadInteger := Config.ReadInteger('Setup', 'ActivMemberHeartRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ActivMemberHeartRate', g_Config.nActivMemberHeartRate)
  else g_Config.nActivMemberHeartRate := nLoadInteger;

//心法增加属性比例
  nLoadInteger := Config.ReadInteger('Setup', 'HeartArrValueRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HeartArrValueRate', g_Config.nHeartArrValueRate)
  else g_Config.nHeartArrValueRate := nLoadInteger;

//心法压制增加伤害比例
  nLoadInteger := Config.ReadInteger('Setup', 'HeartIncDamageRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HeartIncDamageRate', g_Config.nHeartIncDamageRate)
  else g_Config.nHeartIncDamageRate := nLoadInteger;

//触发领悟脚本段@Savvy机率
  nLoadInteger := Config.ReadInteger('Setup', 'DivisionSavvyRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DivisionSavvyRate', g_Config.nDivisionSavvyRate)
  else g_Config.nDivisionSavvyRate := nLoadInteger;

//公共心法传承等级
  nLoadInteger := Config.ReadInteger('Setup', 'PublicHeartLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PublicHeartLevel', g_Config.nPublicHeartLevel)
  else g_Config.nPublicHeartLevel := nLoadInteger;

//领悟心法所需等级
  nLoadInteger := Config.ReadInteger('Setup', 'SavvyHeartNeedLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SavvyHeartNeedLevel', g_Config.nSavvyHeartNeedLevel)
  else g_Config.nSavvyHeartNeedLevel := nLoadInteger;

//激活心法所需内力值
  nLoadInteger := Config.ReadInteger('Setup', 'ActivHeartNH', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ActivHeartNH', g_Config.nActivHeartNH)
  else g_Config.nActivHeartNH := nLoadInteger;

//吸收心法经验所需经验
  nLoadInteger := Config.ReadInteger('Setup', 'IncHeartPointNeedExp', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'IncHeartPointNeedExp', g_Config.nIncHeartPointNeedExp)
  else g_Config.nIncHeartPointNeedExp := nLoadInteger;

//神圣属性需龙卫状态下生效
  nLoadInteger := Config.ReadInteger('Setup', 'HeratPowerNeed', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'HeratPowerNeed', g_Config.boHeratPowerNeed)
  else g_Config.boHeratPowerNeed := not (nLoadInteger = 0);

//神圣属性需龙卫状态下生效
  nLoadInteger := Config.ReadInteger('Setup', 'HeratPowerNeed2', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'HeratPowerNeed2', g_Config.boHeratPowerNeed2)
  else g_Config.boHeratPowerNeed2 := not (nLoadInteger = 0);

//倚天辟地使用间隔
  nLoadInteger := Config.ReadInteger('Setup', 'Magic69UseTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Magic69UseTime', g_Config.nKill69UseTime)
  else g_Config.nKill69UseTime := nLoadInteger;

//唯我独尊使用间隔
  nLoadInteger := Config.ReadInteger('Setup', 'Magic102UseTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Magic102UseTime', g_Config.nKill102UseTime)
  else g_Config.nKill102UseTime := nLoadInteger;

//3级唯我独尊目标减防时长
  nLoadInteger := Config.ReadInteger('Setup', 'Sill102TargetDecACTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Sill102TargetDecACTime', g_Config.nSill102TargetDecACTime)
  else g_Config.nSill102TargetDecACTime := nLoadInteger;

//神龙附体威力
  nLoadInteger := Config.ReadInteger('Setup', 'Skill101Point', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill101Point', g_Config.nSkill101Point)
  else g_Config.nSkill101Point := nLoadInteger;

//神龙附体使用间隔
  nLoadInteger := Config.ReadInteger('Setup', 'Kill101UseTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Kill101UseTime', g_Config.nKill101UseTime)
  else g_Config.nKill101UseTime := nLoadInteger;

//神龙附体持续时长(6)
  nLoadInteger := Config.ReadInteger('Setup', 'Kill101UseLogTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Kill101UseLogTime', g_Config.nKill101UseLogTime)
  else g_Config.nKill101UseLogTime := nLoadInteger;

//主动神技使用间隔(180)
  nLoadInteger := Config.ReadInteger('Setup', 'HeartSkilltime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HeartSkilltime', g_Config.nHeartSkilltime)
  else g_Config.nHeartSkilltime := nLoadInteger;

//纵横剑术范围
  nLoadInteger := Config.ReadInteger('Setup', 'MagicAttackRage_107', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagicAttackRage_107', g_Config.nMagicAttackRage_107)
  else g_Config.nMagicAttackRage_107 := nLoadInteger;
//被天雷乱舞禁锢允许飞走
  nLoadInteger := Config.ReadInteger('Setup', 'Mag113LockCanFly', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'Mag113LockCanFly', g_Config.boMag113LockCanFly)
  else g_Config.boMag113LockCanFly := nLoadInteger <> 0;
//内功技能强化所需物品
  if Config.ReadString('Setup', 'NGStrongItem', '') = '' then
    Config.WriteString('Setup', 'NGStrongItem', g_Config.sNGStrongItem);
  g_Config.sNGStrongItem := Config.ReadString('Setup', 'NGStrongItem', g_Config.sNGStrongItem);

  if Config.ReadInteger('Setup', 'NGSkillMaxLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'NGSkillMaxLevel', g_Config.nNGSkillMaxLevel);
  g_Config.nNGSkillMaxLevel := Config.ReadInteger('Setup', 'NGSkillMaxLevel', g_Config.nNGSkillMaxLevel);

  for I := 0 to 3 do begin
    if Config.ReadInteger('Setup', 'SKILL_200NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_200NGStrong' + IntToStr(I), g_Config.nSKILL_200NGStrong[I]);
    g_Config.nSKILL_200NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_200NGStrong' + IntToStr(I), g_Config.nSKILL_200NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_202NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_202NGStrong' + IntToStr(I), g_Config.nSKILL_202NGStrong[I]);
    g_Config.nSKILL_202NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_202NGStrong' + IntToStr(I), g_Config.nSKILL_202NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_236NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_236NGStrong' + IntToStr(I), g_Config.nSKILL_236NGStrong[I]);
    g_Config.nSKILL_236NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_236NGStrong' + IntToStr(I), g_Config.nSKILL_236NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_204NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_204NGStrong' + IntToStr(I), g_Config.nSKILL_204NGStrong[I]);
    g_Config.nSKILL_204NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_204NGStrong' + IntToStr(I), g_Config.nSKILL_204NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_206NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_206NGStrong' + IntToStr(I), g_Config.nSKILL_206NGStrong[I]);
    g_Config.nSKILL_206NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_206NGStrong' + IntToStr(I), g_Config.nSKILL_206NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_239NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_239NGStrong' + IntToStr(I), g_Config.nSKILL_239NGStrong[I]);
    g_Config.nSKILL_239NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_239NGStrong' + IntToStr(I), g_Config.nSKILL_239NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_230NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_230NGStrong' + IntToStr(I), g_Config.nSKILL_230NGStrong[I]);
    g_Config.nSKILL_230NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_230NGStrong' + IntToStr(I), g_Config.nSKILL_230NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_232NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_232NGStrong' + IntToStr(I), g_Config.nSKILL_232NGStrong[I]);
    g_Config.nSKILL_232NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_232NGStrong' + IntToStr(I), g_Config.nSKILL_232NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_241NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_241NGStrong' + IntToStr(I), g_Config.nSKILL_241NGStrong[I]);
    g_Config.nSKILL_241NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_241NGStrong' + IntToStr(I), g_Config.nSKILL_241NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_228NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_228NGStrong' + IntToStr(I), g_Config.nSKILL_228NGStrong[I]);
    g_Config.nSKILL_228NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_228NGStrong' + IntToStr(I), g_Config.nSKILL_228NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_234NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_234NGStrong' + IntToStr(I), g_Config.nSKILL_234NGStrong[I]);
    g_Config.nSKILL_234NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_234NGStrong' + IntToStr(I), g_Config.nSKILL_234NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_208NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_208NGStrong' + IntToStr(I), g_Config.nSKILL_208NGStrong[I]);
    g_Config.nSKILL_208NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_208NGStrong' + IntToStr(I), g_Config.nSKILL_208NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_214NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_214NGStrong' + IntToStr(I), g_Config.nSKILL_214NGStrong[I]);
    g_Config.nSKILL_214NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_214NGStrong' + IntToStr(I), g_Config.nSKILL_214NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_218NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_218NGStrong' + IntToStr(I), g_Config.nSKILL_218NGStrong[I]);
    g_Config.nSKILL_218NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_218NGStrong' + IntToStr(I), g_Config.nSKILL_218NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_222NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_222NGStrong' + IntToStr(I), g_Config.nSKILL_222NGStrong[I]);
    g_Config.nSKILL_222NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_222NGStrong' + IntToStr(I), g_Config.nSKILL_222NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_210NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_210NGStrong' + IntToStr(I), g_Config.nSKILL_210NGStrong[I]);
    g_Config.nSKILL_210NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_210NGStrong' + IntToStr(I), g_Config.nSKILL_210NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_212NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_212NGStrong' + IntToStr(I), g_Config.nSKILL_212NGStrong[I]);
    g_Config.nSKILL_212NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_212NGStrong' + IntToStr(I), g_Config.nSKILL_212NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_216NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_216NGStrong' + IntToStr(I), g_Config.nSKILL_216NGStrong[I]);
    g_Config.nSKILL_216NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_216NGStrong' + IntToStr(I), g_Config.nSKILL_216NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_224NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_224NGStrong' + IntToStr(I), g_Config.nSKILL_224NGStrong[I]);
    g_Config.nSKILL_224NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_224NGStrong' + IntToStr(I), g_Config.nSKILL_224NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_226NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_226NGStrong' + IntToStr(I), g_Config.nSKILL_226NGStrong[I]);
    g_Config.nSKILL_226NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_226NGStrong' + IntToStr(I), g_Config.nSKILL_226NGStrong[I]);

    if Config.ReadInteger('Setup', 'SKILL_220NGStrong' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SKILL_220NGStrong' + IntToStr(I), g_Config.nSKILL_220NGStrong[I]);
    g_Config.nSKILL_220NGStrong[I] := Config.ReadInteger('Setup', 'SKILL_220NGStrong' + IntToStr(I), g_Config.nSKILL_220NGStrong[I]);
  end;
{$IFEND}
//龙影剑法使用间隔 20080204
  nLoadInteger := Config.ReadInteger('Setup', 'Magic42UseTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Magic42UseTime', g_Config.nKill42UseTime)
  else g_Config.nKill42UseTime := nLoadInteger;

//龙影剑法威力 20080213
  nLoadInteger := Config.ReadInteger('Setup', 'AttackRate_42', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AttackRate_42', g_Config.nAttackRate_42)
  else g_Config.nAttackRate_42 := nLoadInteger;
//龙影剑法范围 20080218
  nLoadInteger := Config.ReadInteger('Setup', 'MagicAttackRage_42', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagicAttackRage_42', g_Config.nMagicAttackRage_42)
  else g_Config.nMagicAttackRage_42 := nLoadInteger;
//------------------------------------------------------------------------------

{$IF HEROVERSION = 1}
//英雄尸体清理时间 20080418
  nLoadInteger := Config.ReadInteger('HeroSetup', 'MakeGhostHeroTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'MakeGhostHeroTime', g_Config.nMakeGhostHeroTime)
  else g_Config.nMakeGhostHeroTime := nLoadInteger;

//召唤英雄间隔 20071201
  nLoadInteger := Config.ReadInteger('HeroSetup', 'RecallHeroTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'RecallHeroTime', g_Config.nRecallHeroTime)
  else g_Config.nRecallHeroTime := nLoadInteger;

//召唤副将英雄间隔
  nLoadInteger := Config.ReadInteger('HeroSetup', 'RecallDeputyHeroTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'RecallDeputyHeroTime', g_Config.nRecallDeputyHeroTime)
  else g_Config.nRecallDeputyHeroTime := nLoadInteger;

//副将英雄经验倍数
  nLoadInteger := Config.ReadInteger('HeroSetup', 'DeputyHeroExpRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'DeputyHeroExpRate', g_Config.nDeputyHeroExpRate)
  else g_Config.nDeputyHeroExpRate := nLoadInteger;
//------------------------------------------------------------------------------
//英雄HP为人物的倍数 20081219
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroHPRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroHPRate', g_Config.nHeroHPRate)
  else g_Config.nHeroHPRate := nLoadInteger;

//法英雄HP为人物的倍数 20090207
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroHPRate1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroHPRate1', g_Config.nHeroHPRate1)
  else g_Config.nHeroHPRate1 := nLoadInteger;
  
//道英雄HP为人物的倍数 20090207
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroHPRate2', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroHPRate2', g_Config.nHeroHPRate2)
  else g_Config.nHeroHPRate2 := nLoadInteger;

//死亡减少忠诚度 20080110
  nLoadInteger := Config.ReadInteger('HeroSetup', 'DeathDecLoyal', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'DeathDecLoyal', g_Config.nDeathDecLoyal)
  else g_Config.nDeathDecLoyal := nLoadInteger;

//PK值减少忠诚度 20080214
  nLoadInteger := Config.ReadInteger('HeroSetup', 'PKDecLoyal', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'PKDecLoyal', g_Config.nPKDecLoyal)
  else g_Config.nPKDecLoyal := nLoadInteger;

//行会战增加忠诚度 20080214
  nLoadInteger := Config.ReadInteger('HeroSetup', 'GuildIncLoyal', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'GuildIncLoyal', g_Config.nGuildIncLoyal)
  else g_Config.nGuildIncLoyal := nLoadInteger;

{//人物等级排名上升增加忠诚度 20080214
  nLoadInteger := Config.ReadInteger('HeroSetup', 'LevelOrderIncLoyal', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'LevelOrderIncLoyal', g_Config.nLevelOrderIncLoyal)
  else g_Config.nLevelOrderIncLoyal := nLoadInteger;

//人物等级排名下降减少忠诚度 20080214
  nLoadInteger := Config.ReadInteger('HeroSetup', 'LevelOrderDecLoyal', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'LevelOrderDecLoyal', g_Config.nLevelOrderDecLoyal)
  else g_Config.nLevelOrderDecLoyal := nLoadInteger;  }

//获得经验->忠诚度 20080110
  nLoadInteger := Config.ReadInteger('HeroSetup', 'WinExp', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'WinExp', g_Config.nWinExp)
  else g_Config.nWinExp := nLoadInteger;

//经验加忠诚 20080110
  nLoadInteger := Config.ReadInteger('HeroSetup', 'ExpAddLoyal', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'ExpAddLoyal', g_Config.nExpAddLoyal)
  else g_Config.nExpAddLoyal := nLoadInteger;

//四级触发 20080110
  nLoadInteger := Config.ReadInteger('HeroSetup', 'GotoLV4', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'GotoLV4', g_Config.nGotoLV4)
  else g_Config.nGotoLV4 := nLoadInteger;

//四级技能杀伤力增加值 20080112
  nLoadInteger := Config.ReadInteger('HeroSetup', 'PowerLV4', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'PowerLV4', g_Config.nPowerLV4)
  else g_Config.nPowerLV4 := nLoadInteger;

//道法英雄移动间隔
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroRunIntervalTime1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroRunIntervalTime1', g_Config.dwHeroRunIntervalTime1)
  else g_Config.dwHeroRunIntervalTime1 := nLoadInteger;

//英雄跑步间隔 20090207
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroRunIntervalTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroRunIntervalTime', g_Config.dwHeroRunIntervalTime)
  else g_Config.dwHeroRunIntervalTime := nLoadInteger;

//英雄走路间隔 20080217
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroWalkIntervalTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroWalkIntervalTime', g_Config.dwHeroWalkIntervalTime)
  else g_Config.dwHeroWalkIntervalTime := nLoadInteger;
//英雄转向间隔 20080213
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroTurnIntervalTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroTurnIntervalTime', g_Config.dwHeroTurnIntervalTime)
  else g_Config.dwHeroTurnIntervalTime := nLoadInteger;
//英雄魔法间隔 20080524
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroMagicHitIntervalTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroMagicHitIntervalTime', g_Config.dwHeroMagicHitIntervalTime)
  else g_Config.dwHeroMagicHitIntervalTime := nLoadInteger;

 //英雄施毒术使用模式 20080604
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroSkillMode', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('HeroSetup', 'HeroSkillMode', g_Config.btHeroSkillMode)
  else g_Config.btHeroSkillMode := not (nLoadInteger = 0);
  
//英雄无极真气使用模式 20080827
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroSkillMode50', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('HeroSetup', 'HeroSkillMode50', g_Config.btHeroSkillMode50)
  else g_Config.btHeroSkillMode50 := not (nLoadInteger = 0);

//英雄分身术模式 20081029
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroSkillMode46', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('HeroSetup', 'HeroSkillMode46', g_Config.btHeroSkillMode46)
  else g_Config.btHeroSkillMode46 := not (nLoadInteger = 0);

//英雄开天斩重击模式 20081221
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroSkillMode43', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('HeroSetup', 'HeroSkillMode43', g_Config.btHeroSkillMode43)
  else g_Config.btHeroSkillMode43 := not (nLoadInteger = 0);
  
//英雄开天斩HP触发条件 20090213
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroSkill43HPRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroSkill43HPRate', g_Config.nHeroSkill43HPRate)
  else g_Config.nHeroSkill43HPRate := nLoadInteger;

//噬魂沼泽使用绿毒模式 20080911
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroSkillMode_63', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('HeroSetup', 'HeroSkillMode_63', g_Config.btHeroSkillMode_63)
  else g_Config.btHeroSkillMode_63 := not (nLoadInteger = 0);

//英雄连击间隔 20091027
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroUseBatterTick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroUseBatterTick', g_Config.dwHeroUseBatterTick)
  else g_Config.dwHeroUseBatterTick := nLoadInteger;

//杀怪英雄经络修炼经验倍数                    
  nLoadInteger := Config.ReadInteger('HeroSetup', 'KillMonHeroPulsExpMultiple', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'KillMonHeroPulsExpMultiple', g_Config.dwKillMonHeroPulsExpMultiple)
  else g_Config.dwKillMonHeroPulsExpMultiple := nLoadInteger;
//------------------------------------------------------------------------------
//低强度减金币
  nLoadInteger := Config.ReadInteger('HeroSetup', 'Strength1DecGold', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'Strength1DecGold', g_Config.nStrength1DecGold)
  else g_Config.nStrength1DecGold := nLoadInteger;

//低强度减灵符
  nLoadInteger := Config.ReadInteger('HeroSetup', 'Strength1DecGameGird', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'Strength1DecGameGird', g_Config.nStrength1DecGameGird)
  else g_Config.nStrength1DecGameGird := nLoadInteger;

//低强度每秒经验
  nLoadInteger := Config.ReadInteger('HeroSetup', 'Strength1Exp', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'Strength1Exp', g_Config.nStrength1Exp)
  else g_Config.nStrength1Exp := nLoadInteger;

//中强度减金币
  nLoadInteger := Config.ReadInteger('HeroSetup', 'Strength2DecGold', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'Strength1DecGold', g_Config.nStrength2DecGold)
  else g_Config.nStrength2DecGold := nLoadInteger;

//中强度减灵符
  nLoadInteger := Config.ReadInteger('HeroSetup', 'Strength2DecGameGird', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'Strength2DecGameGird', g_Config.nStrength2DecGameGird)
  else g_Config.nStrength2DecGameGird := nLoadInteger;

//中强度每秒经验
  nLoadInteger := Config.ReadInteger('HeroSetup', 'Strength2Exp', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'Strength2Exp', g_Config.nStrength2Exp)
  else g_Config.nStrength2Exp := nLoadInteger;

//高强度减金币
  nLoadInteger := Config.ReadInteger('HeroSetup', 'Strength3DecGold', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'Strength1DecGold', g_Config.nStrength3DecGold)
  else g_Config.nStrength3DecGold := nLoadInteger;

//高强度减灵符
  nLoadInteger := Config.ReadInteger('HeroSetup', 'Strength3DecGameGird', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'Strength3DecGameGird', g_Config.nStrength3DecGameGird)
  else g_Config.nStrength3DecGameGird := nLoadInteger;
  
//高强度每秒经验
  nLoadInteger := Config.ReadInteger('HeroSetup', 'Strength3Exp', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'Strength3Exp', g_Config.nStrength3Exp)
  else g_Config.nStrength3Exp := nLoadInteger;

//英雄守护需等级
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroProtectLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroProtectLevel', g_Config.nHeroProtectLevel)
  else g_Config.nHeroProtectLevel := nLoadInteger;

  nLoadInteger := Config.ReadInteger('HeroSetup', 'StartLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'StartLevel', g_Config.nHeroStartLevel)
  else g_Config.nHeroStartLevel := nLoadInteger;
//卧龙英雄开始等级 20080514
  nLoadInteger := Config.ReadInteger('HeroSetup', 'DrinkHeroStartLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'DrinkHeroStartLevel', g_Config.nDrinkHeroStartLevel)
  else g_Config.nDrinkHeroStartLevel := nLoadInteger;

  nLoadInteger := Config.ReadInteger('HeroSetup', 'KillMonExpRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'KillMonExpRate', g_Config.nHeroKillMonExpRate)
  else g_Config.nHeroKillMonExpRate := nLoadInteger;
//20080803 非杀怪分配经验比例
  nLoadInteger := Config.ReadInteger('HeroSetup', 'NoKillMonExpRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'NoKillMonExpRate', g_Config.nHeroNoKillMonExpRate)
  else g_Config.nHeroNoKillMonExpRate := nLoadInteger;

  for I := Low(g_Config.nHeroBagItemCount) to High(g_Config.nHeroBagItemCount) do begin
    nLoadInteger := Config.ReadInteger('HeroSetup', 'BagItemCount' + IntToStr(I), -1);
    if nLoadInteger < 0 then
      Config.WriteInteger('HeroSetup', 'BagItemCount' + IntToStr(I), g_Config.nHeroBagItemCount[I])
    else g_Config.nHeroBagItemCount[I] := nLoadInteger;
  end;
  nLoadInteger := Config.ReadInteger('HeroSetup', 'WarrorAttackTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'WarrorAttackTime', g_Config.dwHeroWarrorAttackTime)
  else g_Config.dwHeroWarrorAttackTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('HeroSetup', 'WizardAttackTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'WizardAttackTime', g_Config.dwHeroWizardAttackTime)
  else g_Config.dwHeroWizardAttackTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('HeroSetup', 'TaoistAttackTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'TaoistAttackTime', g_Config.dwHeroTaoistAttackTime)
  else g_Config.dwHeroTaoistAttackTime := nLoadInteger;

  if Config.ReadInteger('HeroSetup', 'KillByMonstDropUseItem', -1) < 0 then
    Config.WriteBool('HeroSetup', 'KillByMonstDropUseItem', g_Config.boHeroKillByMonstDropUseItem);
  g_Config.boHeroKillByMonstDropUseItem := Config.ReadBool('HeroSetup', 'KillByMonstDropUseItem', g_Config.boHeroKillByMonstDropUseItem);

  if Config.ReadInteger('HeroSetup', 'KillByHumanDropUseItem', -1) < 0 then
    Config.WriteBool('HeroSetup', 'KillByHumanDropUseItem', g_Config.boHeroKillByHumanDropUseItem);
  g_Config.boHeroKillByHumanDropUseItem := Config.ReadBool('HeroSetup', 'KillByHumanDropUseItem', g_Config.boHeroKillByHumanDropUseItem);

  if Config.ReadInteger('HeroSetup', 'DieScatterBag', -1) < 0 then
    Config.WriteBool('HeroSetup', 'DieScatterBag', g_Config.boHeroDieScatterBag);
  g_Config.boHeroDieScatterBag := Config.ReadBool('HeroSetup', 'DieScatterBag', g_Config.boHeroDieScatterBag);

//英雄无目标下可召唤宝宝 20080615
  if Config.ReadInteger('HeroSetup', 'HeroNoTargetCall', -1) < 0 then
    Config.WriteBool('HeroSetup', 'HeroNoTargetCall', g_Config.boHeroNoTargetCall);
  g_Config.boHeroNoTargetCall := Config.ReadBool('HeroSetup', 'HeroNoTargetCall', g_Config.boHeroNoTargetCall);

  //英雄死亡掉经验 20080605
  if Config.ReadInteger('HeroSetup', 'HeroDieExp', -1) < 0 then
    Config.WriteBool('HeroSetup', 'HeroDieExp', g_Config.boHeroDieExp);
  g_Config.boHeroDieExp := Config.ReadBool('HeroSetup', 'HeroDieExp', g_Config.boHeroDieExp);
  
//英雄死亡掉经验比率 20080605
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroDieExpRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroDieExpRate', g_Config.nHeroDieExpRate)
  else g_Config.nHeroDieExpRate := nLoadInteger;

  if Config.ReadInteger('HeroSetup', 'DieRedScatterBagAll', -1) < 0 then
    Config.WriteBool('HeroSetup', 'DieRedScatterBagAll', g_Config.boHeroDieRedScatterBagAll);
  g_Config.boHeroDieRedScatterBagAll := Config.ReadBool('HeroSetup', 'DieRedScatterBagAll', g_Config.boHeroDieRedScatterBagAll);

  nLoadInteger := Config.ReadInteger('HeroSetup', 'DieDropUseItemRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'DieDropUseItemRate', g_Config.nHeroDieDropUseItemRate)
  else g_Config.nHeroDieDropUseItemRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('HeroSetup', 'DieRedDropUseItemRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'DieRedDropUseItemRate', g_Config.nHeroDieRedDropUseItemRate)
  else g_Config.nHeroDieRedDropUseItemRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('HeroSetup', 'DieScatterBagRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'DieScatterBagRate', g_Config.nHeroDieScatterBagRate)
  else g_Config.nHeroDieScatterBagRate := nLoadInteger;

//英雄自动吃药
  if Config.ReadInteger('HeroSetup', 'boAutoHeroUseEat', -1) < 0 then
    Config.WriteBool('HeroSetup', 'boAutoHeroUseEat', g_Config.boAutoHeroUseEat);
  g_Config.boAutoHeroUseEat := Config.ReadBool('HeroSetup', 'boAutoHeroUseEat', g_Config.boAutoHeroUseEat);

  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroAddHPRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAddHPRate', g_Config.nHeroAddHPRate)
  else g_Config.nHeroAddHPRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroAddMPRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAddMPRate', g_Config.nHeroAddMPRate)
  else g_Config.nHeroAddMPRate := nLoadInteger;

//战吃普通药速度
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroAddHPMPTick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAddHPMPTick', g_Config.nHeroAddHPMPTick)
  else g_Config.nHeroAddHPMPTick := nLoadInteger;

  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroAddHPRate1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAddHPRate1', g_Config.nHeroAddHPRate1)
  else g_Config.nHeroAddHPRate1 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroAddMPRate1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAddMPRate1', g_Config.nHeroAddMPRate1)
  else g_Config.nHeroAddMPRate1 := nLoadInteger;
  
//战特殊药速度
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroAddHPMPTick1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAddHPMPTick1', g_Config.nHeroAddHPMPTick1)
  else g_Config.nHeroAddHPMPTick1 := nLoadInteger;

//道法普通药速度
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroAddHPMPTickA', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAddHPMPTickA', g_Config.nHeroAddHPMPTickA)
  else g_Config.nHeroAddHPMPTickA := nLoadInteger;

//道法特殊药药速度
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroAddHPMPTickB', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAddHPMPTickB', g_Config.nHeroAddHPMPTickB)
  else g_Config.nHeroAddHPMPTickB := nLoadInteger;
//------------------------------------------
  nLoadInteger := Config.ReadInteger('HeroSetup', 'MaxFirDragonPoint', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'MaxFirDragonPoint', g_Config.nMaxFirDragonPoint)
  else g_Config.nMaxFirDragonPoint := nLoadInteger;

  nLoadInteger := Config.ReadInteger('HeroSetup', 'AddFirDragonPoint', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'AddFirDragonPoint', g_Config.nAddFirDragonPoint)
  else g_Config.nAddFirDragonPoint := nLoadInteger;

  nLoadInteger := Config.ReadInteger('HeroSetup', 'DecFirDragonPoint', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'DecFirDragonPoint', g_Config.nDecFirDragonPoint)
  else g_Config.nDecFirDragonPoint := nLoadInteger;

//加怒气时间间隔 20080606
  nLoadInteger := Config.ReadInteger('HeroSetup', 'IncDragonPointTick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'IncDragonPointTick', g_Config.nIncDragonPointTick)
  else g_Config.nIncDragonPointTick := nLoadInteger;
  
//0级 英雄召唤分身HP的比率 20080907
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroSkill46MaxHP_0', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroSkill46MaxHP_0', g_Config.nHeroSkill46MaxHP_0)
  else g_Config.nHeroSkill46MaxHP_0 := nLoadInteger;

//1级 英雄召唤分身HP的比率 20081217
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroSkill46MaxHP_1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroSkill46MaxHP_1', g_Config.nHeroSkill46MaxHP_1)
  else g_Config.nHeroSkill46MaxHP_1 := nLoadInteger;

//2级 英雄召唤分身HP的比率 20081217
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroSkill46MaxHP_2', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroSkill46MaxHP_2', g_Config.nHeroSkill46MaxHP_2)
  else g_Config.nHeroSkill46MaxHP_2 := nLoadInteger;

//3级 英雄召唤分身HP的比率 20081217
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroSkill46MaxHP_3', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroSkill46MaxHP_3', g_Config.nHeroSkill46MaxHP_3)
  else g_Config.nHeroSkill46MaxHP_3 := nLoadInteger;

//英雄分身0级使用时间 20081217
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroMakeSelfTick', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroMakeSelfTick', g_Config.nHeroMakeSelfTick)
  else g_Config.nHeroMakeSelfTick := nLoadInteger;

//英雄分身1级使用时间 20090817
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroMakeSelfTick1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroMakeSelfTick1', g_Config.nHeroMakeSelfTick1)
  else g_Config.nHeroMakeSelfTick1 := nLoadInteger;

//英雄分身2级使用时间 20090817
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroMakeSelfTick2', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroMakeSelfTick2', g_Config.nHeroMakeSelfTick2)
  else g_Config.nHeroMakeSelfTick2 := nLoadInteger;

//英雄分身3级使用时间 20090817
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroMakeSelfTick3', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroMakeSelfTick3', g_Config.nHeroMakeSelfTick3)
  else g_Config.nHeroMakeSelfTick3 := nLoadInteger;

//饮酒减少合击伤害 20080626
  nLoadInteger := Config.ReadInteger('HeroSetup', 'DecDragonHitPoint', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'DecDragonHitPoint', g_Config.nDecDragonHitPoint)
  else g_Config.nDecDragonHitPoint := nLoadInteger;

//合击对人物的伤害比例 20080803
  nLoadInteger := Config.ReadInteger('HeroSetup', 'DecDragonRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'DecDragonRate', g_Config.nDecDragonRate)
  else g_Config.nDecDragonRate := nLoadInteger;

//四级合击减目标内力值比例 20100719
  nLoadInteger := Config.ReadInteger('HeroSetup', '4SKillDecNHRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', '4SKillDecNHRate', g_Config.n4SKillDecNHRate)
  else g_Config.n4SKillDecNHRate := nLoadInteger;

//四级合击减目标MP值比例 20100719
  nLoadInteger := Config.ReadInteger('HeroSetup', '4SKillDecMPRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', '4SKillDecMPRate', g_Config.n4SKillDecMPRate)
  else g_Config.n4SKillDecMPRate := nLoadInteger;

//英雄名字颜色 20080315
  nLoadInteger := Config.ReadInteger('HeroSetup', 'nHeroNameColor', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'nHeroNameColor', g_Config.nHeroNameColor)
  else g_Config.nHeroNameColor := nLoadInteger;

//英雄名字 20080315  20080323
//  if Config.ReadString('HeroSetup', 'sHeroName', '') = '' then
//    Config.WriteString('HeroSetup', 'sHeroName', g_Config.sHeroName);
  g_Config.sHeroName := Config.ReadString('HeroSetup', 'sHeroName', g_Config.sHeroName);

//英雄名后缀  20080315
  if Config.ReadString('HeroSetup', 'sHeroNameSuffix', '') = '' then
    Config.WriteString('HeroSetup', 'sHeroNameSuffix', g_Config.sHeroNameSuffix);
  g_Config.sHeroNameSuffix := Config.ReadString('HeroSetup', 'sHeroNameSuffix', g_Config.sHeroNameSuffix);

//是否显示后缀  20080315
  if Config.ReadInteger('HeroSetup', 'boNameSuffix', -1) < 0 then
    Config.WriteBool('HeroSetup', 'boNameSuffix', g_Config.boNameSuffix);
  g_Config.boNameSuffix := Config.ReadBool('HeroSetup', 'boNameSuffix', g_Config.boNameSuffix);

//守护时可捡物品 20090723
  if Config.ReadInteger('HeroSetup', 'boProtectPickUpItem', -1) < 0 then
    Config.WriteBool('HeroSetup', 'boProtectPickUpItem', g_Config.boProtectPickUpItem);
  g_Config.boProtectPickUpItem := Config.ReadBool('HeroSetup', 'boProtectPickUpItem', g_Config.boProtectPickUpItem);

//主人换地图停止守护By TasNat at: 2012-06-24 15:49:17
  if Config.ReadInteger('HeroSetup', 'boStopProtectOnChangMap', -1) < 0 then
    Config.WriteBool('HeroSetup', 'boStopProtectOnChangMap', g_Config.boStopProtectOnChangMap);
  g_Config.boStopProtectOnChangMap := Config.ReadBool('HeroSetup', 'boStopProtectOnChangMap', g_Config.boStopProtectOnChangMap);

//禁止安全区守护 20080603
  if Config.ReadInteger('HeroSetup', 'boNoSafeProtect', -1) < 0 then
    Config.WriteBool('HeroSetup', 'boNoSafeProtect', g_Config.boNoSafeProtect);
  g_Config.boNoSafeProtect := Config.ReadBool('HeroSetup', 'boNoSafeProtect', g_Config.boNoSafeProtect);

//道法22前是否物理攻击 20081218
  if Config.ReadInteger('HeroSetup', 'boHeroAttackTarget', -1) < 0 then
    Config.WriteBool('HeroSetup', 'boHeroAttackTarget', g_Config.boHeroAttackTarget);
  g_Config.boHeroAttackTarget := Config.ReadBool('HeroSetup', 'boHeroAttackTarget', g_Config.boHeroAttackTarget);

//道22后是否物理攻击 20090108
  if Config.ReadInteger('HeroSetup', 'boHeroAttackTao', -1) < 0 then
    Config.WriteBool('HeroSetup', 'boHeroAttackTao', g_Config.boHeroAttackTao);
  g_Config.boHeroAttackTao := Config.ReadBool('HeroSetup', 'boHeroAttackTao', g_Config.boHeroAttackTao);

//英雄攻击时不与主人切换地图 20090723
  if Config.ReadInteger('HeroSetup', 'boHeroAttackNoFollow', -1) < 0 then
    Config.WriteBool('HeroSetup', 'boHeroAttackNoFollow', g_Config.boHeroAttackNoFollow);
  g_Config.boHeroAttackNoFollow := Config.ReadBool('HeroSetup', 'boHeroAttackNoFollow', g_Config.boHeroAttackNoFollow);

//英雄休息不跟随主人切换地图 20081209
  if Config.ReadInteger('HeroSetup', 'boRestNoFollow', -1) < 0 then
    Config.WriteBool('HeroSetup', 'boRestNoFollow', g_Config.boRestNoFollow);
  g_Config.boRestNoFollow := Config.ReadBool('HeroSetup', 'boRestNoFollow', g_Config.boRestNoFollow);
//------------------------------------------------------------------------------
//破魂斩威力 20080131
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroAttackRate_60', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAttackRate_60', g_Config.nHeroAttackRate_60)
  else g_Config.nHeroAttackRate_60 := nLoadInteger;

//破魂斩 攻击范围 20080406
  if Config.ReadInteger('HeroSetup', 'HeroAttackRange_60', -1) < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAttackRange_60', g_Config.nHeroAttackRange_60);
  g_Config.nHeroAttackRange_60 := Config.ReadInteger('HeroSetup', 'HeroAttackRange_60', g_Config.nHeroAttackRange_60);

//劈星斩威力 20080131
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroAttackRate_61', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAttackRate_61', g_Config.nHeroAttackRate_61)
  else g_Config.nHeroAttackRate_61 := nLoadInteger;

//雷霆一击威力 20080131
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroAttackRate_62', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAttackRate_62', g_Config.nHeroAttackRate_62)
  else g_Config.nHeroAttackRate_62 := nLoadInteger;

//噬魂沼泽威力 20080131
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroAttackRate_63', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAttackRate_63', g_Config.nHeroAttackRate_63)
  else g_Config.nHeroAttackRate_63 := nLoadInteger;

//噬魂沼泽 攻击范围 20080131
  if Config.ReadInteger('HeroSetup', 'HeroAttackRange_63', -1) < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAttackRange_63', g_Config.nHeroAttackRange_63);
  g_Config.nHeroAttackRange_63 := Config.ReadInteger('HeroSetup', 'HeroAttackRange_63', g_Config.nHeroAttackRange_63);

//末日审判威力 20080131
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroAttackRate_64', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAttackRate_64', g_Config.nHeroAttackRate_64)
  else g_Config.nHeroAttackRate_64 := nLoadInteger;

//火龙气焰威力 20080131
  nLoadInteger := Config.ReadInteger('HeroSetup', 'HeroAttackRate_65', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAttackRate_65', g_Config.nHeroAttackRate_65)
  else g_Config.nHeroAttackRate_65 := nLoadInteger;

//末日审判  攻击范围 20081216
  if Config.ReadInteger('HeroSetup', 'HeroAttackRange_64', -1) < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAttackRange_64', g_Config.nHeroAttackRange_64);
  g_Config.nHeroAttackRange_64 := Config.ReadInteger('HeroSetup', 'HeroAttackRange_64', g_Config.nHeroAttackRange_64);

//火龙气焰 攻击范围 20080131
  if Config.ReadInteger('HeroSetup', 'HeroAttackRange_65', -1) < 0 then
    Config.WriteInteger('HeroSetup', 'HeroAttackRange_65', g_Config.nHeroAttackRange_65);
  g_Config.nHeroAttackRange_65 := Config.ReadInteger('HeroSetup', 'HeroAttackRange_65', g_Config.nHeroAttackRange_65);
//------------------------------------------------------------------------------
  if Config.ReadString('HeroNames', 'ClothsMan', '') = '' then
    Config.WriteString('HeroNames', 'ClothsMan', g_Config.sHeroClothsMan);
  g_Config.sHeroClothsMan := Config.ReadString('HeroNames', 'ClothsMan', g_Config.sHeroClothsMan);

  if Config.ReadString('HeroNames', 'ClothsWoman', '') = '' then
    Config.WriteString('HeroNames', 'ClothsWoman', g_Config.sClothsWoman);
  g_Config.sHeroClothsWoman := Config.ReadString('HeroNames', 'ClothsWoman', g_Config.sHeroClothsWoman);

  if Config.ReadString('HeroNames', 'WoodenSword', '') = '' then
    Config.WriteString('HeroNames', 'WoodenSword', g_Config.sHeroWoodenSword);
  g_Config.sHeroWoodenSword := Config.ReadString('HeroNames', 'WoodenSword', g_Config.sHeroWoodenSword);

  if Config.ReadString('HeroNames', 'BasicDrug', '') = '' then
    Config.WriteString('HeroNames', 'BasicDrug', g_Config.sBasicDrug);
  g_Config.sHeroBasicDrug := Config.ReadString('HeroNames', 'BasicDrug', g_Config.sHeroBasicDrug);
{$IFEND}
//------------------------------------------------------------------------------
  //商铺使用游戏点购买
  if Config.ReadInteger('Shop','ShopGamePoint', -1) < 0 then
    Config.WriteBool('Shop','ShopGamePoint', g_Config.g_boShopGamePoint)
  else g_Config.g_boShopGamePoint := Config.ReadBool('Shop','ShopGamePoint',g_Config.g_boShopGamePoint);
  if Config.ReadInteger('Shop','CanBuyShopItemGive', -1) < 0 then
    Config.WriteBool('Shop','CanBuyShopItemGive', g_Config.boCanBuyShopItemGive)
  else g_Config.boCanBuyShopItemGive := Config.ReadBool('Shop','CanBuyShopItemGive',g_Config.boCanBuyShopItemGive);
{$IF M2Version <> 2}
  if Config.ReadInteger('Shop','ShopBuyGameGird', -1) < 0 then
    Config.WriteBool('Shop','ShopBuyGameGird', g_Config.g_boGameGird)
  else g_Config.g_boGameGird := Config.ReadBool('Shop','ShopBuyGameGird',g_Config.g_boGameGird);

  nLoadInteger := Config.ReadInteger('Shop','GameGold', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Shop','GameGold', g_Config.g_nGameGold)
  else g_Config.g_nGameGold := nLoadInteger;
{$ELSEIF M2Version = 2}
  g_Config.g_boGameGird := False;
//开启商铺功能 20100630
  if Config.ReadInteger('Shop','boCanShop', -1) < 0 then
    Config.WriteBool('Shop','boCanShop', g_Config.g_boCanShop)
  else g_Config.g_boCanShop := Config.ReadBool('Shop','boCanShop',g_Config.g_boCanShop);

//商铺使用金币交易 20100630
  if Config.ReadInteger('Shop','ShopUseGold', -1) < 0 then
    Config.WriteBool('Shop','ShopUseGold', g_Config.g_boShopUseGold)
  else g_Config.g_boShopUseGold := Config.ReadBool('Shop','ShopUseGold',g_Config.g_boShopUseGold);
{$IFEND}
  if Config.ReadString('Setup', 'AIHomeMap', '') = '' then
    Config.WriteString('Setup', 'AIHomeMap', g_Config.sAIHomeMap);
  g_Config.sAIHomeMap := Config.ReadString('Setup', 'AIHomeMap', g_Config.sAIHomeMap);

  if Config.ReadInteger('Setup', 'AIHomeX', -1) < 0 then
    Config.WriteInteger('Setup', 'AIHomeX', g_Config.nAIHomeX);
  g_Config.nAIHomeX := Config.ReadInteger('Setup', 'AIHomeX', g_Config.nAIHomeX);

  if Config.ReadInteger('Setup', 'AIHomeY', -1) < 0 then
    Config.WriteInteger('Setup', 'AIHomeY', g_Config.nAIHomeY);
  g_Config.nAIHomeY := Config.ReadInteger('Setup', 'AIHomeY', g_Config.nAIHomeY);

  if Config.ReadInteger('Setup', 'HPAutoMoveMap', -1) < 0 then
    Config.WriteBool('Setup', 'HPAutoMoveMap', g_Config.boHPAutoMoveMap);
  g_Config.boHPAutoMoveMap := Config.ReadBool('Setup', 'HPAutoMoveMap', g_Config.boHPAutoMoveMap);

  if Config.ReadInteger('Setup', 'AutoRepairItem', -1) < 0 then
    Config.WriteBool('Setup', 'AutoRepairItem', g_Config.boAutoRepairItem);
  g_Config.boAutoRepairItem := Config.ReadBool('Setup', 'AutoRepairItem', g_Config.boAutoRepairItem);

  if Config.ReadInteger('Setup', 'AutoPickUpItem', -1) < 0 then
    Config.WriteBool('Setup', 'AutoPickUpItem', g_Config.boAutoPickUpItem);
  g_Config.boAutoPickUpItem := Config.ReadBool('Setup', 'AutoPickUpItem', g_Config.boAutoPickUpItem);

  if Config.ReadInteger('Setup', 'RenewHealth', -1) < 0 then
    Config.WriteBool('Setup', 'RenewHealth', g_Config.boRenewHealth);
  g_Config.boRenewHealth := Config.ReadBool('Setup', 'RenewHealth', g_Config.boRenewHealth);

  if Config.ReadInteger('Setup', 'RenewPercent', -1) < 0 then
    Config.WriteInteger('Setup', 'RenewPercent', g_Config.nRenewPercent);
  g_Config.nRenewPercent := Config.ReadInteger('Setup', 'RenewPercent', g_Config.nRenewPercent);

  if Config.ReadInteger('Setup', 'AIRunIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'AIRunIntervalTime', g_Config.nAIRunIntervalTime);
  g_Config.nAIRunIntervalTime := Config.ReadInteger('Setup', 'AIRunIntervalTime', g_Config.nAIRunIntervalTime);

  if Config.ReadInteger('Setup', 'AIWalkIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'AIWalkIntervalTime', g_Config.nAIWalkIntervalTime);
  g_Config.nAIWalkIntervalTime := Config.ReadInteger('Setup', 'AIWalkIntervalTime', g_Config.nAIWalkIntervalTime);

  if Config.ReadInteger('Setup', 'AIWarrorAttackTime', -1) < 0 then
    Config.WriteInteger('Setup', 'AIWarrorAttackTime', g_Config.nAIWarrorAttackTime);
  g_Config.nAIWarrorAttackTime := Config.ReadInteger('Setup', 'AIWarrorAttackTime', g_Config.nAIWarrorAttackTime);

  if Config.ReadInteger('Setup', 'AIWizardAttackTime', -1) < 0 then
    Config.WriteInteger('Setup', 'AIWizardAttackTime', g_Config.nAIWizardAttackTime);
  g_Config.nAIWizardAttackTime := Config.ReadInteger('Setup', 'AIWizardAttackTime', g_Config.nAIWizardAttackTime);

  if Config.ReadInteger('Setup', 'AITaoistAttackTime', -1) < 0 then
    Config.WriteInteger('Setup', 'AITaoistAttackTime', g_Config.nAITaoistAttackTime);
  g_Config.nAITaoistAttackTime := Config.ReadInteger('Setup', 'AITaoistAttackTime', g_Config.nAITaoistAttackTime);

  if Config.ReadString('Setup', 'AIConfigListFileName', '') = '' then
    Config.WriteString('Setup', 'AIConfigListFileName', g_Config.sAIConfigListFileName);
  g_Config.sAIConfigListFileName := Config.ReadString('Setup', 'AIConfigListFileName', g_Config.sAIConfigListFileName);
{$IF HEROVERSION = 1}
  if Config.ReadString('Setup', 'AIHeroConfigListFileName', '') = '' then
    Config.WriteString('Setup', 'AIHeroConfigListFileName', g_Config.sHeroAIConfigListFileName);
  g_Config.sHeroAIConfigListFileName := Config.ReadString('Setup', 'AIHeroConfigListFileName', g_Config.sHeroAIConfigListFileName);
{$IFEND}
end;

function GetRGB(c256: Byte): TColor;
begin
  Result := RGB(ColorTable[c256].rgbRed, ColorTable[c256].rgbGreen, ColorTable[c256].rgbBlue);
end;

procedure SendGameCenterMsg(wIdent: Word; sSENDMSG: string);
var
  SendData: TCopyDataStruct;
  nParam: Integer;
begin
  nParam := MakeLong(Word(tM2Server), wIdent);
  SendData.cbData := Length(sSENDMSG) + 1;
  GetMem(SendData.lpData, SendData.cbData);
  StrCopy(SendData.lpData, PChar(sSENDMSG));
  SendMessage(g_dwGameCenterHandle, WM_COPYDATA, nParam, Cardinal(@SendData));
  FreeMem(SendData.lpData);
end;

function GetIPAddr: string;
var
  A, B, C, D: Byte;
begin
  while True do begin
    A := Random(High(Byte));
    B := Random(High(Byte));
    C := Random(High(Byte));
    D := Random(High(Byte));
    if (A = 0) then Continue;
    if (A = 127) and (B = 0) and (C = 0) and (D = 1) then Continue;
    if (A = 192) and (B = 168) then Continue;
    if (A = 255) and (B = 255) then Continue;
    Result := Format('%d.%d.%d.%d', [A, B, C, D]);
    break;
  end;
end;
//查IP地址（读取插件函数）
function GetIPLocal(sIPaddr: string): string;
var
  sLocal: array[0..254] of Char;
begin
  try
    if (nIPLocal >= 0) and Assigned(PlugProcArray[nIPLocal].nProcAddr) then begin
      FillChar(sLocal, SizeOf(sLocal), 0);
      TIPLocal(PlugProcArray[nIPLocal].nProcAddr)(Pchar(sIPaddr), @sLocal, SizeOf(sLocal));
      Result := StrPas(@sLocal);
      Exit;
    end;
    Result := '未知！';
  except
    Result := '未知！';
  end;
end;
{//反调试过程
procedure LoadKernelFunction();
var
  DllModule: THandle;
begin
  DllModule := LoadLibrary('kernel32.dll');
  IsDebuggerPresent := GetProcAddress(DllModule, PChar(DeCodeString('NSI@UREqUrYaXa=nUSIaWcL'))); //'IsDebuggerPresent'
end;  }
{//20080815注释
procedure ExportProc();
begin
  AddToProcTable(@GetRGB, PN_GETRGB,0);
  //nAddGameDataLog := AddToPulgProcTable(PN_GAMEDATALOG,4);//20080815注释
end; }

//是否记录物品日志
//返回 FALSE 为记录
//返回 TRUE  为不记录
{function IsCheapStuff(tByte: Byte): Boolean; //004B2FA8
begin
  if tByte < 0 then Result := True
  else Result := False;
end; }
//sIPaddr 为当前IP
//dIPaddr 为要比较的IP
//* 号为通配符
function CompareIPaddr(sIPaddr, dIPaddr: string): Boolean;
var
  nPos: Integer;
begin
  Result := False;
  if (sIPaddr = '') or (dIPaddr = '') then Exit;

  if (dIPaddr[1] = '*') then begin
    Result := True;
    Exit;
  end;

  nPos := Pos('*', dIPaddr);
  if nPos > 0 then begin
    Result := CompareLStr(sIPaddr, dIPaddr, nPos - 1);
  end else begin
    Result := CompareText(sIPaddr, dIPaddr) = 0;
  end;
end;

function LoadAICharNameList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName, sCharName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'AICharNameList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then begin
    g_AICharNameList.Lock;
    try
      g_AICharNameList.Clear;
      LoadList.LoadFromFile(sFileName);
      for I := 0 to LoadList.Count - 1 do begin
        sCharName := Trim(LoadList.Strings[I]);
        if (sCharName = '') or (sCharName[1] = ';') then Continue;
        g_AICharNameList.Add(sCharName);
      end;
    finally
      g_AICharNameList.UnLock;
    end;
    Result := True;
  end else begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function GetAICharNameList(sName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  g_AICharNameList.Lock;
  try
    for I := 0 to g_AICharNameList.Count - 1 do begin
      if CompareText(sName, g_AICharNameList.Strings[I]) = 0 then begin
        Result := True;
        Break;
      end;
    end;
  finally
    g_AICharNameList.UnLock;
  end;
end;

function SaveAICharNameList(): Boolean;
var
  I: Integer;
  sFileName: string;
  SaveList: TStringList;
begin
  sFileName := g_Config.sEnvirDir + 'AICharNameList.txt';
  SaveList := TStringList.Create;
  g_AICharNameList.Lock;
  try
    for I := 0 to g_AICharNameList.Count - 1 do begin
      SaveList.Add(g_AICharNameList.Strings[I]);
    end;
    SaveList.SaveToFile(sFileName);
  finally
    g_AICharNameList.UnLock;
  end;
  SaveList.Free;
  Result := True;
end;

function LoadAIHeroNameList(): Boolean;
var
  I: Integer;
  LoadList: TStringList;
  sFileName, sHeroName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'AIHeroNameList.txt';
  LoadList := TStringList.Create;
  try
    if FileExists(sFileName) then begin
      g_AIHeroNameList.Lock;
      try
        g_AIHeroNameList.Clear;
        LoadList.LoadFromFile(sFileName);
        for I := 0 to LoadList.Count - 1 do begin
          sHeroName := Trim(LoadList.Strings[I]);
          if (sHeroName = '') or (sHeroName[1] = ';') then Continue;
          g_AIHeroNameList.Add(sHeroName);
        end;
      finally
        g_AIHeroNameList.UnLock;
      end;
      Result := True;
    end else begin
      LoadList.SaveToFile(sFileName);
    end;
  finally
    LoadList.Free;
  end;
end;

function GetAIHeroName(sCharName: string): string;
var
  I: Integer;
begin
  Result := '';
  g_AICharNameList.Lock;
  g_AIHeroNameList.Lock;
  try
    for I := 0 to g_AICharNameList.Count - 1 do begin
      if CompareText(sCharName, g_AICharNameList.Strings[I]) = 0 then begin
        if (I >= 0) and (I < g_AIHeroNameList.Count) then
          Result := g_AIHeroNameList.Strings[I];
        Break;
      end;
    end;
  finally
    g_AIHeroNameList.UnLock;
    g_AICharNameList.UnLock;
  end;
end;

//加载物品特效规则
procedure LoadEffecItemList();
var
  I: Integer;
  sFileName, sLineText, sItemName, sPackLook, sPackPlay,sPackX,sPackY,sPackWilName: string;
  sWithinLook,sWithinPlay,sWithinX,sWithinY,sWithinWilName: string;
  sOutsideLook,{sOutsidePlay,sOutsideX,sOutsideY,}sOutsideWilName: string;

  LoadList: TStringList;
  EffecItem: pTEffecItem;
begin
  sFileName := g_Config.sEnvirDir + 'EffectItemList.txt';
  if g_EffecItemtList.Count > 0 then begin//禁止物品规则
    for I := 0 to g_EffecItemtList.Count - 1 do begin
      if pTEffecItem(g_EffecItemtList.Objects[I]) <> nil then Dispose(pTEffecItem(g_EffecItemtList.Objects[I]));
    end;
    g_EffecItemtList.Clear;
  end;
  if not FileExists(sFileName) then begin
    LoadList := TStringList.Create();
    LoadList.Add(';物品特效配置文件');
    LoadList.Add(';物品名称'#9'包裹图片'#9'包裹播放'#9'包裹X'#9'包裹Y'#9'包裹Wil'#9'内观图片'#9'内观播放'#9'内观X'#9'内观Y'#9'内观Wil'#9'外观图片'#9'外观播放'#9'外观X'#9'外观Y'#9'外观Wil');
    LoadList.SaveToFile(sFileName);
    LoadList.Free;
    Exit;
  end;
  LoadList := TStringList.Create();
  try
    LoadList.LoadFromFile(sFileName);
    if LoadList.Count > 0 then begin
      for I := 0 to LoadList.Count - 1 do begin
        sLineText := LoadList.Strings[I];
        if (sLineText <> '') and (sLineText[1] <> ';') then begin
          sItemName:='';
          sPackLook:='';
          sPackPlay:='';
          sPackX:='';
          sPackY:='';
          sPackWilName:='';
          sWithinLook:='';
          sWithinPlay:='';
          sWithinX:='';
          sWithinY:='';
          sWithinWilName:='';
          sOutsideLook:='';
          {sOutsidePlay:='';
          sOutsideX:='';
          sOutsideY:=''; }
          sOutsideWilName:='';
          sLineText := GetValidStr3(sLineText, sItemName, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sPackLook, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sPackPlay, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sPackX, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sPackY, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sPackWilName, [' ', #9]);

          sLineText := GetValidStr3(sLineText, sWithinLook, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sWithinPlay, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sWithinX, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sWithinY, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sWithinWilName, [' ', #9]);

          sLineText := GetValidStr3(sLineText, sOutsideLook, [' ', #9]);
          {sLineText := GetValidStr3(sLineText, sOutsidePlay, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sOutsideX, [' ', #9]);
          sLineText := GetValidStr3(sLineText, sOutsideY, [' ', #9]); }
          sLineText := GetValidStr3(sLineText, sOutsideWilName, [' ', #9]);

          if (sItemName <> '') and (sPackWilName <> '') and (sWithinWilName <>'')
            and (sOutsideWilName <> '') then begin
            New(EffecItem);
            EffecItem.sName := sItemName;
            EffecItem.wBagIndex:= 0;//包裹开始图片
            EffecItem.btBagCount:= 0;//包裹播放数量
            EffecItem.nBagX:= 0;//包裹X坐标修正
            EffecItem.nBagY:= 0;//包裹Y坐标修正
            EffecItem.btBagWilIndex:= 0;//包裹Wil索引
            EffecItem.wShapeIndex:= 0;//内观开始图片
            EffecItem.btShapeCount:= 0;//内观播放数量
            EffecItem.nShapeX:= 0;//内观X坐标修正
            EffecItem.nShapeY:= 0;//内观Y坐标修正
            EffecItem.btShapeWilIndex:= 0;//内观Wil索引
            EffecItem.wLookIndex:= 0;//外观开始图片
            //EffecItem.btLookCount:= 0;//外观播放数量
            //EffecItem.nLookX:= 0;//外观X坐标修正
            //EffecItem.nLookY:= 0;//外观Y坐标修正
            EffecItem.btLookWilIndex:= 0;//外观Wil索引
            try
              EffecItem.wBagIndex:= Str_ToInt(sPackLook,0);//包裹开始图片
              EffecItem.btBagCount:= Str_ToInt(sPackPlay,0);//包裹播放数量
              EffecItem.nBagX:= Str_ToInt(sPackX,0);//包裹X坐标修正
              EffecItem.nBagY:= Str_ToInt(sPackY,0);//包裹Y坐标修正
              EffecItem.btBagWilIndex:= Str_ToInt(sPackWilName,0);//包裹Wil索引

              EffecItem.wShapeIndex:= Str_ToInt(sWithinLook,0);//内观开始图片
              EffecItem.btShapeCount:= Str_ToInt(sWithinPlay,0);//内观播放数量
              EffecItem.nShapeX:= Str_ToInt(sWithinX,0);//内观X坐标修正
              EffecItem.nShapeY:= Str_ToInt(sWithinY,0);//内观Y坐标修正
              EffecItem.btShapeWilIndex:= Str_ToInt(sWithinWilName,0);//内观Wil索引

              EffecItem.wLookIndex:= Str_ToInt(sOutsideLook,0);//外观开始图片
              //EffecItem.btLookCount:= Str_ToInt(sOutsidePlay,0);//外观播放数量
              //EffecItem.nLookX:= Str_ToInt(sOutsideX,0);//外观X坐标修正
              //EffecItem.nLookY:= Str_ToInt(sOutsideY,0);//外观Y坐标修正
              EffecItem.btLookWilIndex:= Str_ToInt(sOutsideWilName,0);//外观Wil索引
              g_EffecItemtList.AddObject(sItemName, TObject(EffecItem));

            except
              Dispose(EffecItem);
            end;
          end;
        end;
      end;
    end;
  finally
    LoadList.Free;
  end;
end;
//取物品特效
function GetEffecItemList(ItemName: String): pTEffecItem;
var
  I: Integer;
begin
  Result:= nil;
  if (g_EffecItemtList = nil) or (ItemName='') then Exit;
  if g_EffecItemtList.Count > 0 then begin
    I:= g_EffecItemtList.IndexOf(ItemName);
    if I > -1 then begin
      Result:= pTEffecItem(g_EffecItemtList.Objects[I]);
    end;
  end;
end;

initialization
  begin
    Config := TIniFile.Create(sConfigFileName);
    CommandConf := TIniFile.Create(sCommandFileName);
    StringConf := TIniFile.Create(sStringFileName);
    Move(ColorArray, ColorTable, SizeOf(ColorArray));
{$IF UserMode1 = 1}
    g_nGetLicenseInfo := AddToPulgProcTable(Base64DecodeStr('R2V0TGljZW5zZUluZm8='){GetLicenseInfo},2);//获取许可信息 20080630(注册)
{$ELSEIF UserMode1 = 2}
    //New(PBoolean1);
    New(pMaxPlayCount);
{$IFEND}
    nIPLocal := AddToPulgProcTable('GetIPLocal',0);
    //LoadKernelFunction(); //检查是否有调试器
    //ExportProc();
  end;

finalization
  begin
{$IF UserMode1 = 2}
    //Dispose(PBoolean1);
    Dispose(pMaxPlayCount);
{$IFEND}
    Config.Free;
    CommandConf.Free;
    StringConf.Free;
  end;
end.


